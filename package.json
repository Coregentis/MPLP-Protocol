{
  "name": "mplp",
  "version": "1.0.0",
  "description": "MPLP v1.0 - L4 Intelligent Agent Operating System with 10 complete modules and Domain-Driven Design Architecture",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "exports": {
    ".": {
      "import": "./dist/index.js",
      "require": "./dist/index.js",
      "types": "./dist/index.d.ts"
    },
    "./core": {
      "import": "./dist/src/public/modules/core/index.js",
      "require": "./dist/src/public/modules/core/index.js",
      "types": "./dist/src/public/modules/core/index.d.ts"
    },
    "./context": {
      "import": "./dist/src/modules/context/index.js",
      "require": "./dist/src/modules/context/index.js",
      "types": "./dist/src/modules/context/index.d.ts"
    },
    "./plan": {
      "import": "./dist/src/modules/plan/index.js",
      "require": "./dist/src/modules/plan/index.js",
      "types": "./dist/src/modules/plan/index.d.ts"
    },
    "./confirm": {
      "import": "./dist/src/modules/confirm/index.js",
      "require": "./dist/src/modules/confirm/index.js",
      "types": "./dist/src/modules/confirm/index.d.ts"
    },
    "./trace": {
      "import": "./dist/src/modules/trace/index.js",
      "require": "./dist/src/modules/trace/index.js",
      "types": "./dist/src/modules/trace/index.d.ts"
    },
    "./role": {
      "import": "./dist/src/modules/role/index.js",
      "require": "./dist/src/modules/role/index.js",
      "types": "./dist/src/modules/role/index.d.ts"
    },
    "./extension": {
      "import": "./dist/src/modules/extension/index.js",
      "require": "./dist/src/modules/extension/index.js",
      "types": "./dist/src/modules/extension/index.d.ts"
    },
    "./collab": {
      "import": "./dist/src/modules/collab/index.js",
      "require": "./dist/src/modules/collab/index.js",
      "types": "./dist/src/modules/collab/index.d.ts"
    },
    "./dialog": {
      "import": "./dist/src/modules/dialog/index.js",
      "require": "./dist/src/modules/dialog/index.js",
      "types": "./dist/src/modules/dialog/index.d.ts"
    },
    "./network": {
      "import": "./dist/src/modules/network/index.js",
      "require": "./dist/src/modules/network/index.js",
      "types": "./dist/src/modules/network/index.d.ts"
    },
    "./types": {
      "import": "./dist/src/public/shared/types/index.js",
      "require": "./dist/src/public/shared/types/index.js",
      "types": "./dist/src/public/shared/types/index.d.ts"
    },
    "./utils": {
      "import": "./dist/src/public/utils/index.js",
      "require": "./dist/src/public/utils/index.js",
      "types": "./dist/src/public/utils/index.d.ts"
    },
    "./package.json": "./package.json"
  },
  "files": [
    "dist",
    "README.md",
    "LICENSE",
    "CHANGELOG.md"
  ],
  "scripts": {
    "start": "node dist/index.js",
    "dev": "ts-node src/index.ts",
    "build": "tsc",
    "build:watch": "tsc --watch",
    "build:dev": "npm run build",
    "build:release": "npm run build && ts-node scripts/build-release-version.ts",
    "build:release:dry-run": "ts-node scripts/build-release-version.ts --dry-run --verbose",
    "build:public-release": "ts-node scripts/build-public-release.ts",
    "validate:public-release": "ts-node scripts/validate-public-release.ts",
    "test": "jest --config=jest.config.js",
    "test:all": "npm run test:unit && npm run test:integration && npm run test:performance",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:integration": "jest tests/public/integration",
    "test:unit": "jest tests/modules tests/public/unit",
    "test:performance": "jest --testPathPattern=performance",
    "test:performance:real": "jest tests/public/performance/real-business-performance.test.ts",
    "test:performance:regression": "jest tests/public/performance --testNamePattern=\"regression\"",
    "coverage:open": "open coverage/lcov-report/index.html",
    "coverage:check": "jest --coverage --coverageThreshold",
    "lint": "eslint src/**/*.ts",
    "lint:fix": "eslint src/**/*.ts --fix",
    "typecheck": "tsc --noEmit",
    "type-check": "tsc --noEmit",
    "validate:schemas": "ts-node src/tools/schema-validator/cli/validator-cli.ts check-syntax",
    "validate:compatibility": "ts-node src/tools/schema-validator/cli/validator-cli.ts check-compatibility",
    "validate:schema-data": "ts-node src/tools/schema-validator/cli/validator-cli.ts validate",
    "validate:enterprise": "ts-node src/tools/schema-validator/cli/validator-cli.ts check-enterprise",
    "validate:naming": "ts-node src/tools/schema-validator/cli/validator-cli.ts check-naming",
    "validate:all-schemas": "npm run validate:schemas && npm run validate:compatibility && npm run validate:enterprise && npm run validate:naming",
    "test:validator": "jest src/tools/schema-validator/tests",
    "mplp-validator": "ts-node src/tools/schema-validator/cli/validator-cli.ts",
    "repair:schemas": "node src/tools/schema-repair/index.js --fix-all",
    "repair:naming": "node src/tools/schema-repair/fix-naming-conventions.js",
    "repair:headers": "node src/tools/schema-repair/fix-schema-headers.js",
    "repair:enterprise": "node src/tools/schema-repair/fix-all-enterprise-issues.js",
    "repair:specialization": "node src/tools/schema-repair/add-all-specialization-fields.js",
    "validate:release": "ts-node scripts/validate-release-content.ts",
    "validate:release:dir": "ts-node scripts/validate-release-content.ts",
    "security:audit": "npm audit --audit-level=moderate",
    "security:fix": "npm audit fix",
    "quality:fix": "node scripts/fix-code-quality.js",
    "quality:gate": "node scripts/quality-gate.js",
    "quality:check": "npm run typecheck && npm run lint && npm run test:coverage",
    "verify:status": "node scripts/verify-project-status.js",
    "verify:docs": "node scripts/verify-project-status.js",
    "test:fix": "node scripts/fix-test-failures.js",
    "release:prepare": "npm run build:release && npm run validate:release",
    "release:dry-run": "npm run build:release:dry-run",
    "release:public": "npm run build:public-release && npm run validate:public-release",
    "restructure": "ts-node scripts/restructure-project.ts",
    "restructure:dry-run": "ts-node scripts/restructure-project.ts --dry-run --verbose",
    "restructure:no-backup": "ts-node scripts/restructure-project.ts --no-backup",
    "track:before": "ts-node scripts/track-changes.ts before",
    "track:after": "ts-node scripts/track-changes.ts after",
    "track:validate": "ts-node scripts/track-changes.ts validate",
    "track:report": "ts-node scripts/track-changes.ts report",
    "docs:generate": "typedoc src --out docs/api",
    "docs:update": "npm run docs:generate",
    "backup:create": "ts-node scripts/backup-manager.ts create",
    "backup:list": "ts-node scripts/backup-manager.ts list",
    "backup:restore": "ts-node scripts/backup-manager.ts restore",
    "backup:auto-check": "ts-node scripts/backup-hooks.ts",
    "backup:pre-version": "ts-node -e \"require('./scripts/backup-hooks').preVersionBackup(process.argv[1])\"",
    "backup:pre-refactor": "ts-node -e \"require('./scripts/backup-hooks').preRefactorBackup(process.argv[1])\"",
    "backup:pre-deploy": "ts-node -e \"require('./scripts/backup-hooks').preDeployBackup(process.argv[1])\"",
    "backup:pre-public-release": "ts-node -e \"require('./scripts/backup-hooks').prePublicReleaseBackup(process.argv[1])\"",
    "circleci:validate": "ts-node scripts/validate-circleci-config.ts",
    "circleci:local": "circleci local execute",
    "ci:test": "npm run test:all",
    "ci:build": "npm run build && npm run validate:schemas",
    "ci:security": "npm run security:audit",
    "ci:backup": "npm run backup:auto-check",
    "clean": "node -e \"const fs=require('fs'); ['dist','coverage','release','public-release'].forEach(d=>{try{if(fs.existsSync(d))fs.rmSync(d,{recursive:true,force:true})}catch(e){console.warn('Could not remove:',d)}})\"",
    "prebuild": "npm run clean",
    "pretest": "npm run typecheck",
    "prepare": "husky install",
    "preversion": "npm run backup:pre-version",
    "version": "npm run docs:update && git add docs/",
    "postversion": "git push && git push --tags"
  },
  "keywords": [
    "mplp",
    "multi-agent",
    "protocol",
    "lifecycle",
    "ddd",
    "domain-driven-design",
    "typescript",
    "ai-agent",
    "workflow",
    "orchestration"
  ],
  "author": "MPLP Team",
  "license": "MIT",
  "devDependencies": {
    "@types/compression": "^1.8.1",
    "@types/cors": "^2.8.19",
    "@types/express": "4.17.17",
    "@types/express-rate-limit": "^5.1.3",
    "@types/express-validator": "^2.20.33",
    "@types/helmet": "^0.0.48",
    "@types/jest": "^29.5.5",
    "@types/morgan": "^1.9.10",
    "@types/node": "18.15.13",
    "@types/rimraf": "^3.0.2",
    "@types/supertest": "^2.0.16",
    "@types/uuid": "^9.0.1",
    "@types/ws": "^8.18.1",
    "@typescript-eslint/eslint-plugin": "^5.58.0",
    "@typescript-eslint/parser": "^5.58.0",
    "ajv": "^8.17.1",
    "ajv-formats": "^3.0.1",
    "commander": "^14.0.0",
    "eslint": "^8.38.0",
    "husky": "^8.0.3",
    "jest": "^29.5.0",
    "madge": "^8.0.0",
    "prettier": "^2.8.8",
    "rimraf": "^5.0.1",
    "supertest": "^6.3.4",
    "ts-jest": "^29.1.0",
    "ts-node": "^10.9.2",
    "typedoc": "^0.26.0",
    "typescript": "^5.4.4"
  },
  "dependencies": {
    "@types/js-yaml": "^4.0.9",
    "axios": "^1.3.6",
    "body-parser": "^1.20.2",
    "chalk": "^5.5.0",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "express-validator": "^7.2.1",
    "js-yaml": "^4.1.0",
    "puppeteer": "^24.15.0",
    "reflect-metadata": "^0.2.2",
    "typeorm": "^0.3.25",
    "uuid": "^9.0.0",
    "winston": "^3.8.2"
  }
}

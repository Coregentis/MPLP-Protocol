description: "MPLP项目领域术语词汇表 - 定义MPLP协议相关的核心术语和概念"
globs: ["**/*.ts", "**/*.md", "**/*.json"]
alwaysApply: true
---

# MPLP 项目领域术语词汇表

> **词汇表版本**: v2.1  
> **更新时间**: 2025-07-09T19:04:01+08:00  
> **适用项目**: Multi-Agent Project Lifecycle Protocol (MPLP) v1.0  
> **关联文档**: [MPLP协议正式规范](../requirements-docs/07_MPLP协议正式规范.md) | [技术规范统一标准](../requirements-docs/技术规范统一标准.md)

## 🎯 核心协议术语

### **MPLP (Multi-Agent Project Lifecycle Protocol)**
多代理项目生命周期协议。一个企业级的、供应商中立的协议框架，用于AI驱动的软件开发生命周期管理，支持多个AI代理协作完成复杂项目开发任务。

### **生命周期阶段 (Lifecycle Stages)**
- **Plan**: 规划阶段 - 任务分析、依赖规划、执行策略制定
- **Confirm**: 确认阶段 - 方案验证、决策审批、风险评估  
- **Trace**: 追踪阶段 - 过程记录、性能监控、问题诊断
- **Delivery**: 交付阶段 - 成果产出、质量验证、文档更新

### **核心模块 (Core Modules)**
MPLP协议的6个核心功能模块，构成协议的技术基础架构。

---

## 📋 6个核心模块术语定义

### **1. Context 模块 - 全局状态管理**

#### **Context Protocol (上下文协议)**
定义跨系统、跨代理的状态同步机制，确保所有参与方共享一致的项目状态信息。

#### **Shared State (共享状态)**
多个代理或系统间共同维护的状态数据，包括项目配置、用户偏好、环境变量等。

#### **Lifecycle Stage (生命周期阶段)**
当前上下文所处的项目生命周期状态：`active`(活跃)、`inactive`(非活跃)、`suspended`(暂停)。

#### **Context Synchronization (上下文同步)**
跨系统的状态同步机制，确保分布式环境下的状态一致性，性能要求：状态查询<5ms，状态更新<10ms。

### **2. Plan 模块 - 任务规划结构**

#### **Task Orchestration (任务编排)**
根据任务依赖关系和执行策略，自动安排任务执行顺序和并行度的机制。

#### **Execution Strategy (执行策略)**
任务执行模式的定义：
- `sequential`: 顺序执行
- `parallel`: 并行执行  
- `conditional`: 条件执行

#### **Dependency Mapping (依赖映射)**
任务间依赖关系的图形化表示和解析机制，支持复杂的依赖链分析。

#### **Plan Parsing (计划解析)**
将高级任务描述转换为可执行任务队列的过程，性能要求：解析时间<8ms。

### **3. Confirm 模块 - 验证决策机制**

#### **Approval Workflow (审批工作流)**
多层级的审批流程定义，支持自动审批、人工审批、条件审批等多种模式。

#### **Confirmation Type (确认类型)**
- `approval`: 审批确认 - 需要明确的同意/拒绝决策
- `validation`: 验证确认 - 技术方案的正确性验证
- `verification`: 核实确认 - 数据或状态的真实性核实

#### **Auto-Approval Rules (自动审批规则)**
基于预定义条件的自动决策规则，减少人工干预，提高效率。

#### **Decision Deadline (决策截止时间)**
审批决策的时间限制，超时后可触发默认决策或升级机制。

### **4. Trace 模块 - 追踪记录信息**

#### **Distributed Tracing (分布式追踪)**
跨系统、跨服务的操作追踪机制，提供完整的请求链路可视化。

#### **Performance Metrics (性能指标)**
系统运行性能的量化指标，包括响应时间、吞吐量、错误率等。

#### **Trace Type (追踪类型)**
- `operation`: 操作追踪 - 业务操作的执行记录
- `state_change`: 状态变更 - 系统状态变化的记录
- `error`: 错误追踪 - 异常和错误的详细记录
- `compensation`: 补偿操作 - 失败恢复操作的记录

#### **Compensation Actions (补偿操作)**
当操作失败时执行的恢复和回滚操作，确保系统一致性。

### **5. Role 模块 - 角色定义能力**

#### **RBAC (Role-Based Access Control)**
基于角色的访问控制模型，通过角色定义和权限分配实现细粒度的权限管理。

#### **Permission Definition (权限定义)**
系统中具体操作权限的定义，如读取、写入、删除、执行等。

#### **Capability Definition (能力定义)**
角色所具备的功能能力声明，定义角色在特定场景下的行为边界。

#### **Role Inheritance (角色继承)**
角色间的层级关系和权限继承机制，支持复杂的组织架构映射。

#### **Permission Scope (权限作用域)**
- `global`: 全局权限 - 跨所有上下文的权限
- `context`: 上下文权限 - 特定上下文内的权限
- `plan`: 计划权限 - 特定任务计划的权限

### **6. Extension 模块 - 扩展机制框架**

#### **Plugin Framework (插件框架)**
支持第三方扩展的架构机制，包括插件生命周期管理、依赖注入、热插拔等。

#### **Extension Type (扩展类型)**
- `cli_tool`: 命令行工具扩展
- `api_service`: API服务扩展
- `database`: 数据库扩展
- `monitoring`: 监控扩展
- `ai_service`: AI服务扩展
- `custom`: 自定义扩展

#### **Hot-Swap (热插拔)**
在系统运行时动态加载、卸载扩展模块的能力，不影响主系统运行。

#### **Health Check (健康检查)**
扩展模块的运行状态监控机制，确保扩展的可用性和稳定性。

---

## 🔧 技术架构术语

### **TracePilot Integration (TracePilot集成)**
与TracePilot平台的双向集成机制，支持追踪数据的实时同步和格式转换。

### **Coregentis Integration (Coregentis集成)**
与Coregentis企业平台的集成适配器，提供统一的管理界面和业务逻辑适配。

### **Vendor-Neutral (供应商中立)**
不依赖特定供应商或平台的设计原则，确保协议的通用性和可移植性。

### **Protocol Parsing (协议解析)**
将MPLP协议格式的数据解析为系统可理解的内部数据结构，性能要求：<10ms。

### **Schema Validation (模式验证)**
基于JSON Schema或类似标准对协议数据进行格式和内容验证。

---

## 📊 性能和质量术语

### **Performance Benchmarks (性能基准)**
系统性能的标准化测量指标：
- API响应时间：P95 < 100ms, P99 < 200ms
- 协议解析性能：< 10ms
- 系统吞吐量：> 10,000 TPS
- 并发用户支持：> 1000

### **Quality Gates (质量门禁)**
代码质量的强制检查点：
- 单元测试覆盖率：≥ 90%
- 集成测试覆盖率：≥ 80%
- E2E测试覆盖率：≥ 60%
- 安全漏洞：0个高危

### **Test Coverage (测试覆盖率)**
代码被测试用例覆盖的百分比，分为单元测试、集成测试、端到端测试三个维度。

### **Security Vulnerability (安全漏洞)**
系统中可能被恶意利用的安全弱点，按严重程度分为低危、中危、高危、严重四个等级。

---

## 🛠️ 开发流程术语

### **Git Workflow (Git工作流)**
基于双仓库策略的代码版本管理流程：
- **Dev Repository**: 开发仓库，用于开发过程记录
- **Release Repository**: 发布仓库，用于生产发布

### **Conventional Commits (约定式提交)**
标准化的Git提交消息格式，包含类型、作用域、描述等结构化信息。

### **Stage-based Development (阶段式开发)**
基于Roadmap v1.0的5阶段开发模式：
- Stage 1: 核心架构实现
- Stage 2: 6个核心模块实现
- Stage 3: 集成和API层
- Stage 4: 测试和文档
- Stage 5: 发布准备

### **Milestone (里程碑)**
项目开发过程中的关键节点，标志着特定阶段的完成和下一阶段的开始。

---

## 🔐 安全和合规术语

### **TLS 1.3**
传输层安全协议的最新版本，提供端到端的数据传输加密保护。

### **JWT (JSON Web Token)**
基于JSON的无状态身份验证令牌标准，支持用户认证和授权。

### **AES-256 Encryption**
高级加密标准，使用256位密钥的对称加密算法，用于敏感数据保护。

### **Input Validation (输入验证)**
对所有外部输入数据进行格式、类型、范围等方面的安全检查。

### **Audit Trail (审计追踪)**
完整记录系统中所有操作和变更的日志机制，用于合规和安全审计。

---

## 📚 集成和部署术语

### **Docker Containerization (Docker容器化)**
使用Docker技术将应用程序及其依赖打包为可移植的容器镜像。

### **Kubernetes Orchestration (Kubernetes编排)**
使用Kubernetes平台进行容器集群的自动化部署、扩缩容和管理。

### **Multi-stage Build (多阶段构建)**
Docker构建过程中使用多个阶段来优化镜像大小和安全性的技术。

### **Health Check (健康检查)**
定期检查应用程序运行状态的机制，确保服务的可用性。

### **CI/CD Pipeline (持续集成/持续部署流水线)**
自动化的代码集成、测试、构建和部署流程。

---

## 📈 监控和运维术语

### **Structured Logging (结构化日志)**
使用JSON等结构化格式记录日志信息，便于自动化分析和检索。

### **Performance Monitoring (性能监控)**
实时监控系统性能指标，包括响应时间、资源使用率、错误率等。

### **Alerting (告警)**
基于预定义规则的自动化通知机制，在出现异常时及时通知相关人员。

### **Metrics Collection (指标收集)**
系统运行过程中各种量化指标的自动收集和存储机制。

### **Observability (可观测性)**
系统内部状态的可见性和可理解性，通过日志、指标、链路追踪实现。

---

## 工作流系统术语

### 核心概念

- **工作流系统 (Workflow System)**: MPLP中用于协调Plan→Confirm→Trace→Delivery流程的系统，确保开发流程标准化和可追踪。

- **工作流阶段 (Workflow Stage)**: 工作流中的一个执行阶段，包括Plan（规划）、Confirm（确认）、Trace（追踪）和Delivery（交付）。

- **工作流上下文 (Workflow Context)**: 工作流执行过程中的核心数据结构，包含工作流状态、阶段数据和元数据。

### 工作流组件

- **WorkflowManager**: 工作流管理器，负责协调工作流阶段的执行，管理工作流生命周期。

- **WorkflowRegistry**: 工作流注册表，管理所有工作流阶段实现，支持动态注册和发现。

- **WorkflowAdapter**: 工作流适配器，提供与外部系统的集成点，实现厂商中立的扩展机制。

- **WorkflowService**: 工作流服务，提供高级API来执行工作流，简化开发流程。

### 工作流状态

- **CREATED**: 工作流已创建但尚未开始执行。

- **PLANNED**: 工作流已完成Plan阶段，等待Confirm。

- **CONFIRMED**: 工作流已完成Confirm阶段，等待Trace。

- **TRACED**: 工作流已完成Trace阶段，等待Delivery。

- **DELIVERED**: 工作流已完成所有阶段，成功交付。

- **FAILED**: 工作流在某个阶段失败，需要处理错误。

### 工作流事件

- **STAGE_START**: 阶段开始事件，表示某个工作流阶段开始执行。

- **STAGE_COMPLETE**: 阶段完成事件，表示某个工作流阶段成功完成。

- **STAGE_FAILED**: 阶段失败事件，表示某个工作流阶段执行失败。

- **WORKFLOW_COMPLETE**: 工作流完成事件，表示整个工作流成功完成。

- **WORKFLOW_FAILED**: 工作流失败事件，表示工作流在某个阶段失败。

---

**术语词汇表版本**: v2.1  
**维护团队**: Coregentis MPLP项目团队  
**更新周期**: 随协议演进持续更新  
**术语贡献**: 欢迎团队成员提交新术语和定义优化

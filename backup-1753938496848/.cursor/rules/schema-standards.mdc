description: "MPLP项目Schema标准 - 定义JSON Schema设计原则、验证规则和数据模型标准"
globs: ["**/*.json", "**/schemas/**", "**/*.ts", "**/*.js", "**/types/**"]
alwaysApply: true
---

# MPLP Schema 设计和验证标准

> **规则版本**: v2.0.0  
> **创建时间**: 2025-07-27  
> **更新时间**: 2025-07-27  
> **适用范围**: 所有JSON Schema文件和数据结构定义  
> **强制等级**: 🚨 **最高优先级** - 违反将导致任务重新执行

## 🎯 Schema 设计核心原则

### 基础原则
- **Schema定义为权威**: Schema是所有代码实现的单一可信来源
- **类型安全**: 明确定义所有字段类型，避免any类型
- **向后兼容**: 新版本Schema必须与旧版本兼容
- **文档完备**: 每个字段都要有清晰的描述
- **验证严格**: 使用适当的约束确保数据质量

## 📋 Schema 文件结构标准

### 1. Schema文件位置
```
src/schemas/
├── context-protocol.json    # Context模块Schema
├── plan-protocol.json       # Plan模块Schema
├── confirm-protocol.json    # Confirm模块Schema
├── trace-protocol.json      # Trace模块Schema
├── role-protocol.json       # Role模块Schema
└── extension-protocol.json  # Extension模块Schema
```

### 2. 标准Schema结构
```json
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://mplp.dev/schemas/{module}-protocol.json",
  "title": "{Module}Protocol",
  "description": "MPLP {Module} module protocol definition",
  "type": "object",
  "version": "1.0.0",
  "required": ["context_id", "version", "timestamp"],
  "properties": {
    // 字段定义
  },
  "additionalProperties": false,
  "examples": [
    // 示例数据
  ]
}
```

### 3. 基础字段标准
```json
{
  "properties": {
    "context_id": {
      "type": "string",
      "format": "uuid",
      "description": "Unique context identifier",
      "example": "123e4567-e89b-12d3-a456-426614174000"
    },
    "version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+\\.\\d+$",
      "description": "Protocol version following SemVer",
      "example": "1.0.0"
    },
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "ISO 8601 timestamp",
      "example": "2024-07-09T14:30:00Z"
    }
  }
}
```

## 🔤 字段设计规范

### 1. 字段命名约定
```json
{
  "properties": {
    // ✅ 正确: 使用snake_case
    "context_id": { "type": "string" },
    "lifecycle_stage": { "type": "string" },
    "execution_status": { "type": "string" },
    "created_at": { "type": "string", "format": "date-time" },
    "updated_at": { "type": "string", "format": "date-time" },
    
    // ❌ 错误: 不一致的命名风格
    "contextId": { "type": "string" },        // camelCase不符合JSON约定
    "lifecycle-stage": { "type": "string" },  // kebab-case不标准
    "CreatedAt": { "type": "string" }         // PascalCase不符合JSON约定
  }
}
```

### 2. 数据类型规范
```json
{
  "properties": {
    // 字符串类型
    "name": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "description": "Name field with length constraints"
    },
    
    // UUID字段
    "entity_id": {
      "type": "string",
      "format": "uuid",
      "description": "Unique entity identifier"
    },
    
    // 时间戳字段
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "ISO 8601 timestamp"
    },
    
    // 枚举字段
    "status": {
      "type": "string",
      "enum": ["active", "inactive", "pending"],
      "description": "Status enumeration"
    },
    
    // 数值字段
    "count": {
      "type": "integer",
      "minimum": 0,
      "maximum": 1000,
      "description": "Count with range constraints"
    },
    
    // 布尔字段
    "is_enabled": {
      "type": "boolean",
      "description": "Boolean flag"
    },
    
    // 对象字段
    "metadata": {
      "type": "object",
      "description": "Additional metadata",
      "additionalProperties": false,
      "properties": {
        "source": { "type": "string" },
        "tags": {
          "type": "array",
          "items": { "type": "string" }
        }
      }
    }
  }
}
```

## 🔧 Schema验证约束规范

### 1. 字符串约束
```json
{
  "properties": {
    "name": {
      "type": "string",
      "minLength": 1,
      "maxLength": 255,
      "pattern": "^[a-zA-Z0-9_-]+$",
      "description": "Name with alphanumeric, underscore, and hyphen only"
    },
    "email": {
      "type": "string",
      "format": "email",
      "description": "Valid email address"
    },
    "url": {
      "type": "string",
      "format": "uri",
      "description": "Valid URL"
    },
    "version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+\\.\\d+$",
      "description": "Semantic version (e.g., 1.0.0)"
    }
  }
}
```

### 2. 数值约束
```json
{
  "properties": {
    "timeout_ms": {
      "type": "integer",
      "minimum": 1000,
      "maximum": 300000,
      "multipleOf": 1000,
      "description": "Timeout in milliseconds (1s to 5min)"
    },
    "percentage": {
      "type": "number",
      "minimum": 0,
      "maximum": 100,
      "description": "Percentage value (0-100)"
    },
    "priority": {
      "type": "integer",
      "minimum": 1,
      "maximum": 10,
      "description": "Priority level (1=lowest, 10=highest)"
    }
  }
}
```

### 3. 数组约束
```json
{
  "properties": {
    "tags": {
      "type": "array",
      "minItems": 0,
      "maxItems": 10,
      "uniqueItems": true,
      "items": {
        "type": "string",
        "pattern": "^[a-z0-9-]+$"
      },
      "description": "Unique tags (lowercase alphanumeric with hyphens)"
    },
    "dependencies": {
      "type": "array",
      "items": {
        "type": "string",
        "format": "uuid"
      },
      "uniqueItems": true,
      "description": "List of dependency UUIDs"
    }
  }
}
```

## 📝 Schema到TypeScript类型映射

### 1. 类型映射规则
```typescript
// JSON Schema类型 → TypeScript类型映射
// string → string
// number → number
// integer → number
// boolean → boolean
// object → interface
// array → Array<T>
// enum → union type or enum
// null → null
// $ref → referenced type
```

### 2. 类型定义文件示例
```typescript
// src/modules/context/types.ts
export type UUID = string;
export type Timestamp = string;
export type Version = string;
export type Priority = 'critical' | 'high' | 'medium' | 'low';

export interface ContextProtocol {
  /** 协议版本 - Schema: #/properties/protocol_version */
  protocol_version: Version;
  
  /** 时间戳 - Schema: #/properties/timestamp */
  timestamp: Timestamp;
  
  /** 上下文唯一标识符 - Schema: #/properties/context_id */
  context_id: UUID;
  
  /** 上下文名称 - Schema: #/properties/name */
  name: string;
  
  /** 上下文描述 - Schema: #/properties/description */
  description?: string;
  
  /** 上下文状态 - Schema: #/properties/status */
  status: ContextStatus;
  
  /** 生命周期阶段 - Schema: #/properties/lifecycle_stage */
  lifecycle_stage: ContextLifecycleStage;
  
  /** 共享状态 - Schema: #/properties/shared_state */
  shared_state: SharedState;
  
  /** 访问控制 - Schema: #/properties/access_control */
  access_control: AccessControl;
  
  /** 配置信息 - Schema: #/properties/configuration */
  configuration: ContextConfiguration;
}

export type ContextStatus = 'active' | 'suspended' | 'completed' | 'terminated';
```

## 🔄 Schema版本兼容性管理

### 1. 向后兼容规则
```json
{
  "version": "1.1.0",
  "description": "Backward compatible changes only",
  "properties": {
    // ✅ 允许: 新增可选字段
    "new_optional_field": {
      "type": "string",
      "description": "New optional field"
    },
    
    // ✅ 允许: 放宽现有约束
    "name": {
      "type": "string",
      "maxLength": 500  // 从255增加到500
    }
  }
}
```

### 2. 破坏性变更处理
破坏性变更必须创建新的主版本Schema：
```json
// 旧版本: context-protocol-v1.json
{
  "version": "1.0.0",
  "properties": {
    "status": {
      "enum": ["active", "suspended", "terminated"]
    }
  }
}

// 新版本: context-protocol-v2.json
{
  "version": "2.0.0",
  "properties": {
    "status": {
      "enum": ["active", "suspended", "completed", "failed", "terminated"]
    }
  }
}
```

### 3. 版本标识
```json
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://mplp.dev/schemas/context-protocol.json",
  "title": "ContextProtocol",
  "version": "1.0.1",  // SemVer版本号
  "description": "MPLP Context module protocol definition"
}
```

## 🛠️ Schema验证工具和实践

### 1. Schema验证实现
```typescript
// src/core/schema/schema-validator.ts
import Ajv from 'ajv';
import addFormats from 'ajv-formats';
import contextSchema from '../schemas/context-protocol.json';
import planSchema from '../schemas/plan-protocol.json';

export class SchemaValidator {
  private ajv: Ajv;
  
  constructor() {
    this.ajv = new Ajv({
      allErrors: true,
      verbose: true,
      strict: true
    });
    
    addFormats(this.ajv);
    
    // 添加所有Schema
    this.ajv.addSchema(contextSchema, 'context');
    this.ajv.addSchema(planSchema, 'plan');
  }
  
  public validate(data: unknown, schemaName: string): {
    valid: boolean;
    errors: any[] | null;
  } {
    const validate = this.ajv.getSchema(schemaName);
    if (!validate) {
      throw new Error(`Schema ${schemaName} not found`);
    }
    
    const valid = validate(data) as boolean;
    return {
      valid,
      errors: validate.errors || null
    };
  }
}
```

### 2. API请求验证中间件
```typescript
// src/middleware/schema-validation.middleware.ts
import { Request, Response, NextFunction } from 'express';
import { SchemaValidator } from '../core/schema/schema-validator';

const schemaValidator = new SchemaValidator();

export function validateSchema(schemaName: string) {
  return (req: Request, res: Response, next: NextFunction) => {
    const result = schemaValidator.validate(req.body, schemaName);
    
    if (!result.valid) {
      return res.status(400).json({
        success: false,
        error: 'Schema validation failed',
        details: result.errors
      });
    }
    
    next();
  };
}
```

### 3. 单元测试中的Schema验证
```typescript
// tests/modules/context/schema-validation.test.ts
import { SchemaValidator } from '../../../src/core/schema/schema-validator';
import { createTestContext } from './test-factories';

describe('Context Schema Validation', () => {
  const validator = new SchemaValidator();
  
  it('should validate valid context data', () => {
    const context = createTestContext();
    const result = validator.validate(context, 'context');
    expect(result.valid).toBe(true);
  });
  
  it('should reject invalid context data', () => {
    const invalidContext = {
      // Missing required fields
    };
    
    const result = validator.validate(invalidContext, 'context');
    expect(result.valid).toBe(false);
    expect(result.errors).not.toBeNull();
  });
});
```

## ✅ Schema设计检查清单

Schema提交前确认：
- [ ] 使用正确的JSON Schema版本
- [ ] 包含完整的元数据（$id, title, description, version）
- [ ] 所有字段都有清晰的描述
- [ ] 使用snake_case命名字段
- [ ] 包含适当的验证约束
- [ ] 提供示例数据
- [ ] 向后兼容性检查
- [ ] 通过Schema验证工具检查
- [ ] 生成了相应的TypeScript类型定义
- [ ] 完成了单元测试验证

---

**规则创建**: MPLP架构团队  
**维护责任**: 所有开发者  
**审查周期**: 每个开发阶段结束后审查
description:
globs:
alwaysApply: false
---

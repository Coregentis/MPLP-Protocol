description: "定义依赖版本控制、冲突解决和安全审计规则，确保项目依赖一致性和安全性"
globs: ["**/*.ts", "**/*.json", "package.json", "package-lock.json"]
alwaysApply: true
---

# MPLP 依赖管理规则

> **规则版本**: v1.1.0  
> **创建时间**: 2025-08-19T10:00:00+08:00  
> **更新时间**: 2025-08-20T11:00:00+08:00  
> **适用范围**: 所有MPLP项目依赖管理  
> **强制等级**: 🚨 **最高优先级** - 违反将导致构建失败

## 🎯 依赖管理核心原则

### 基础原则
- **版本统一**: 相同依赖包必须使用统一版本
- **明确版本**: 所有依赖必须指定确切版本号，禁止使用^或~
- **版本锁定**: 使用package-lock.json锁定所有依赖版本
- **定期更新**: 每月进行一次依赖更新评估
- **安全优先**: 关键安全更新必须立即应用

## 📋 依赖版本管理流程

### 1. 添加新依赖
```bash
# 正确：指定确切版本
npm install package-name@1.2.3 --save-exact

# 错误：使用版本范围
npm install package-name@^1.2.3
```

### 2. 依赖版本冲突检查
每次修改依赖后必须执行以下命令检查版本冲突：

```bash
# 检查包依赖
npm run check-deps

# 检查源码中的依赖引用
npm run check-source-deps

# 检查所有依赖
npm run check-all-deps
```

### 3. 解决版本冲突
在package.json中使用overrides字段强制统一版本：

```json
{
  "overrides": {
    "glob": "10.4.5",
    "debug": "4.3.7",
    "ms": "2.1.3"
  }
}
```

## 🔒 固定依赖版本列表

以下核心依赖必须使用指定版本：

| 依赖名称 | 固定版本 | 原因 |
|---------|---------|-----|
| typescript | 5.0.4 | 类型系统稳定性 |
| express | 4.18.2 | API稳定性 |
| typeorm | 0.3.25 | 数据库操作兼容性 |
| glob | 10.4.5 | 文件操作一致性 |
| debug | 4.3.7 | 日志系统兼容性 |
| ajv | 8.12.0 | Schema验证一致性 |
| jest | 29.5.0 | 测试框架稳定性 |
| axios | 1.4.0 | HTTP客户端一致性 |

## ⚠️ 已知的依赖问题

| 依赖名称 | 冲突版本 | 解决方案 |
|---------|---------|---------|
| glob | 7.2.3 vs 10.4.5 | 使用overrides强制10.4.5，修改使用方式以兼容新API |
| debug | 2.6.9 vs 4.3.7 | 使用overrides强制4.3.7，注意API差异 |
| cookie | 0.7.1 vs 0.7.2 | 使用overrides强制0.7.2 |
| ms | 2.0.0 vs 2.1.3 | 使用overrides强制2.1.3 |

## 📊 依赖审计流程

1. **每周安全审计**:
   ```bash
   npm audit
   ```

2. **每月全面依赖检查**:
   ```bash
   # 检查过时依赖
   npm outdated
   
   # 检查重复依赖
   npx find-duplicate-dependencies
   
   # 执行依赖清理
   npm dedupe
   ```

3. **依赖更新策略**:
   - 安全补丁：立即更新
   - 功能更新：每月评估
   - 主版本升级：每季度评估

## 🛠️ 依赖管理工具

1. **版本统一检查工具**:
   - npm-check-duplicates
   - find-duplicate-dependencies
   - depcheck

2. **安全审计工具**:
   - npm audit
   - snyk

3. **CI/CD集成检查**:
   ```yaml
   # 示例CI配置
   dependency-check:
     script:
       - npx find-duplicate-dependencies
       - npm audit --audit-level=moderate
       - node scripts/check-dependency-versions.js
   ```

## 🔄 重构成果

在完成的重构工作中，我们已经成功地：

1. **统一了依赖版本**：
   - 解决了glob库的版本冲突（7.2.3 vs 10.4.5），统一使用10.4.5
   - 解决了debug库的版本冲突（2.6.9 vs 4.3.7），统一使用4.3.7
   - 解决了ms库的版本冲突（2.0.0 vs 2.1.3），统一使用2.1.3
   - 解决了cookie库的版本冲突（0.7.1 vs 0.7.2），统一使用0.7.2

2. **更新了依赖使用方式**：
   - 更新了所有使用glob的代码，以兼容v10.4.5 API
   - 修复了所有使用旧版API的代码

3. **实现了依赖检查工具**：
   - 创建了scripts/check-dependency-versions.js工具
   - 创建了scripts/check-source-imports.js工具
   - 添加了npm run check-deps命令

4. **集成了CI检查**：
   - 在.github/workflows/ci.yml中添加了依赖检查步骤
   - 确保PR和主分支提交都经过依赖检查

5. **添加了依赖管理规则**：
   - 创建了本规则文件，定义了依赖管理标准
   - 将规则添加到项目规则索引中

---

**规则创建**: MPLP架构团队  
**维护责任**: 所有开发者  
**审查周期**: 每个季度审查一次
 
description: "MPLP扩展协议规范 - 定义第三方工具和平台集成的标准接口和安全要求"
globs: ["src/modules/extension/**/*", "**/extension-protocol.json", "**/extension*.ts", "**/integration/**/*", "**/workflow*.ts"]
alwaysApply: true
---

# MPLP 扩展协议规则

> **规则版本**: v1.2  
> **创建时间**: 2025-07-11T15:45:00+08:00  
> **更新时间**: 2025-07-29T10:30:00+08:00  
> **适用范围**: 所有扩展模块和第三方集成  
> **强制等级**: 🚨 **高优先级** - 所有扩展必须符合协议规范

## 🎯 扩展协议核心原则

### 基础原则
- **厂商中立**: 扩展协议完全中立，不依赖特定厂商或平台
- **安全隔离**: 扩展运行在隔离环境，不影响核心系统稳定性
- **标准接口**: 所有扩展必须实现标准化的接口契约
- **版本兼容**: 扩展必须声明兼容的协议版本范围
- **性能约束**: 扩展调用不得超过50ms响应时间

## 📋 扩展类型定义

### 支持的扩展类型
```typescript
enum ExtensionType {
  CLI_TOOL = 'cli_tool',           // 命令行工具扩展
  API_SERVICE = 'api_service',     // API服务扩展
  DATABASE = 'database',           // 数据库扩展
  MONITORING = 'monitoring',       // 监控扩展
  AI_SERVICE = 'ai_service',       // AI服务扩展
  WORKFLOW = 'workflow',           // 工作流扩展
  CUSTOM = 'custom'                // 自定义扩展
}
```

### 扩展生命周期
```typescript
enum ExtensionLifecycle {
  REGISTERED = 'registered',       // 已注册
  ACTIVE = 'active',               // 激活状态
  SUSPENDED = 'suspended',         // 暂停状态
  DEPRECATED = 'deprecated',       // 已废弃
  UNREGISTERED = 'unregistered'    // 已注销
}
```

## 🔧 扩展接口规范

### 标准扩展接口
```typescript
interface ExtensionProtocol {
  // 元数据
  extension_id: string;            // 扩展唯一标识符
  name: string;                    // 扩展名称
  version: string;                 // 扩展版本
  type: ExtensionType;             // 扩展类型
  vendor: string;                  // 供应商信息
  
  // 兼容性信息
  protocol_version: string;        // 支持的协议版本
  compatibility: {
    min_version: string;           // 最低兼容版本
    max_version?: string;          // 最高兼容版本
  };
  
  // 配置和能力
  configuration_schema: object;    // 配置Schema
  capabilities: string[];          // 扩展能力列表
  dependencies?: string[];         // 依赖的其他扩展
  
  // 生命周期钩子
  lifecycle_hooks: {
    init?: string;                 // 初始化钩子
    activate?: string;             // 激活钩子
    deactivate?: string;           // 停用钩子
    uninstall?: string;            // 卸载钩子
  };
  
  // 安全信息
  security: {
    permissions: string[];         // 所需权限
    isolation_level: 'high' | 'medium' | 'low';  // 隔离级别
    verified: boolean;             // 是否已验证
  };
}
```

### 适配器接口设计规范
```typescript
// 适配器接口命名和实现规范

// 1. 通用适配器接口必须使用中立命名
interface IExtensionAdapter {  // ✅ 正确：使用I前缀 + 功能名称 + Adapter后缀
  installExtension(extension: ExtensionPackage): Promise<InstallResult>;
  loadExtension(extensionId: string): Promise<LoadResult>;
  uninstallExtension(extensionId: string): Promise<UninstallResult>;
}

// 2. 厂商特定实现必须在单独的文件中
// src/adapters/extension/base-extension-adapter.ts
class BaseExtensionAdapter implements IExtensionAdapter {
  // 实现通用接口
}

// 3. 增强版适配器应保持兼容性
// src/adapters/extension/enhanced-extension-adapter.ts
class EnhancedExtensionAdapter extends BaseExtensionAdapter {
  // 实现通用接口，提供增强功能
}

// 4. 核心模块只能依赖通用接口，不能直接引用厂商实现
// src/modules/extension/extension-manager.ts
class ExtensionManager {
  private extensionAdapter: IExtensionAdapter;  // ✅ 正确：依赖通用接口
  
  // 注入适配器实例
  setExtensionAdapter(adapter: IExtensionAdapter): void {
    this.extensionAdapter = adapter;
  }
}
```

### 工作流适配器接口
```typescript
// 工作流适配器标准接口
interface IWorkflowAdapter {
  // 初始化工作流
  initializeWorkflow(definition: WorkflowDefinition): Promise<WorkflowInitResult>;
  
  // 阶段操作
  startStage(workflowId: string, stage: WorkflowStageType): Promise<StageStartResult>;
  completeStage(workflowId: string, stage: WorkflowStageType, result: StageResult): Promise<StageCompleteResult>;
  
  // 工作流操作
  pauseWorkflow(workflowId: string): Promise<PauseResult>;
  resumeWorkflow(workflowId: string): Promise<ResumeResult>;
  cancelWorkflow(workflowId: string): Promise<CancelResult>;
  
  // 状态查询
  getWorkflowStatus(workflowId: string): Promise<WorkflowStatus>;
  getWorkflowHistory(workflowId: string): Promise<WorkflowHistoryItem[]>;
  
  // 健康检查
  checkHealth(): Promise<HealthCheckResult>;
}

// 基础工作流适配器实现
class BaseWorkflowAdapter implements IWorkflowAdapter {
  // 实现标准接口
}

// 增强工作流适配器实现
class EnhancedWorkflowAdapter extends BaseWorkflowAdapter {
  // 实现增强功能
}
```

### 适配器实现最佳实践
1. **接口中立性**: 通用接口不应包含厂商特定术语或功能
2. **依赖注入**: 使用依赖注入而非直接实例化厂商适配器
3. **版本兼容**: 适配器应处理不同版本API的兼容性
4. **优雅降级**: 适配器应处理第三方服务不可用的情况
5. **性能缓冲**: 适配器应缓冲请求以减少对外部服务的依赖
6. **错误隔离**: 适配器错误不应传播到核心模块
7. **健康检查**: 提供标准化的健康检查接口

### 扩展注册接口
```typescript
interface ExtensionRegistration {
  manifest: ExtensionProtocol;     // 扩展清单
  entry_point: string;             // 入口点
  resources: {
    scripts?: string[];            // 脚本资源
    styles?: string[];             // 样式资源
    assets?: string[];             // 其他资源
  };
}
```

## 🛡️ 扩展安全要求

### 权限模型
```typescript
enum ExtensionPermission {
  // 基础权限
  READ_CONTEXT = 'context:read',
  WRITE_CONTEXT = 'context:write',
  READ_PLAN = 'plan:read',
  WRITE_PLAN = 'plan:write',
  
  // 高级权限
  EXECUTE_CODE = 'system:execute_code',
  ACCESS_NETWORK = 'system:access_network',
  ACCESS_FILESYSTEM = 'system:access_filesystem',
  
  // 系统权限
  MANAGE_EXTENSIONS = 'admin:manage_extensions',
  ACCESS_CREDENTIALS = 'admin:access_credentials',
  
  // 工作流权限
  WORKFLOW_CREATE = 'workflow:create',
  WORKFLOW_EXECUTE = 'workflow:execute',
  WORKFLOW_MONITOR = 'workflow:monitor',
  WORKFLOW_MANAGE = 'workflow:manage'
}
```

### 安全最佳实践
1. **最小权限原则**: 仅请求必要的最小权限集
2. **数据加密**: 敏感数据必须加密存储和传输
3. **输入验证**: 严格验证所有外部输入
4. **隔离执行**: 在沙箱环境中执行不可信代码
5. **定期安全审计**: 扩展代码应定期进行安全审计

## 📊 扩展性能要求

### 性能基准
```
- 扩展初始化: < 200ms
- API调用响应: < 50ms
- 资源使用限制: < 100MB内存
- 并发处理能力: 支持>100并发请求
- 健康检查响应: < 10ms
- 工作流阶段转换: < 30ms
```

### 性能监控
1. **性能指标收集**: 扩展应提供标准性能指标
2. **资源使用监控**: 内存、CPU使用率应可监控
3. **性能降级机制**: 超出资源限制时应优雅降级
4. **自动扩缩容**: 支持基于负载的自动扩缩容
5. **工作流监控**: 提供工作流阶段时间监控

## 🔌 适配器架构设计

### 适配器层次结构
```
接口层: IExtensionAdapter
    ↑
基础实现层: BaseExtensionAdapter
    ↑
增强实现层: EnhancedExtensionAdapter
    ↑
厂商实现层: 具体厂商适配器实现
```

### 工作流适配器层次结构
```
接口层: IWorkflowAdapter
    ↑
基础实现层: BaseWorkflowAdapter
    ↑
增强实现层: EnhancedWorkflowAdapter
    ↑
厂商实现层: 第三方工作流适配器实现
```

### 适配器工厂模式
```typescript
// 适配器工厂 - 创建适配器实例
class ExtensionAdapterFactory {
  // 创建基础适配器
  static createBaseAdapter(config: AdapterConfig): IExtensionAdapter {
    return new BaseExtensionAdapter(config);
  }
  
  // 创建增强适配器
  static createEnhancedAdapter(config: AdapterConfig): IExtensionAdapter {
    return new EnhancedExtensionAdapter(config);
  }
  
  // 根据配置创建适配器
  static createAdapter(config: AdapterConfig): IExtensionAdapter {
    if (config.useEnhanced) {
      return this.createEnhancedAdapter(config);
    }
    return this.createBaseAdapter(config);
  }
}

// 工作流适配器工厂
class WorkflowAdapterFactory {
  // 创建基础工作流适配器
  static createBaseAdapter(config: WorkflowAdapterConfig): IWorkflowAdapter {
    return new BaseWorkflowAdapter(config);
  }
  
  // 创建增强工作流适配器
  static createEnhancedAdapter(config: WorkflowAdapterConfig): IWorkflowAdapter {
    return new EnhancedWorkflowAdapter(config);
  }
  
  // 根据配置创建工作流适配器
  static createAdapter(config: WorkflowAdapterConfig): IWorkflowAdapter {
    if (config.useEnhanced) {
      return this.createEnhancedAdapter(config);
    }
    return this.createBaseAdapter(config);
  }
}
```

### 适配器目录结构
```
src/
  interfaces/                   # 通用接口定义
    extension-adapter.interface.ts
    workflow-adapter.interface.ts
  adapters/                     # 适配器基础实现
    extension/
      base-extension-adapter.ts
      enhanced-extension-adapter.ts
      adapter-factory.ts
    workflow/
      base-workflow-adapter.ts
      enhanced-workflow-adapter.ts
      workflow-adapter-factory.ts
  modules/                      # 核心模块实现
    extension/
      extension-manager.ts
    workflow/
      workflow-manager.ts
```

## 🔗 第三方集成示例

### TracePilot集成
```typescript
// TracePilot适配器示例
class TracePilotExtensionAdapter implements IExtensionAdapter {
  extension_id = 'tracepilot-extension-adapter';
  name = 'TracePilot Extension Integration';
  version = '1.0.1';
  type = ExtensionType.MONITORING;
  
  // 实现标准接口
  async installExtension(extension: ExtensionPackage): Promise<InstallResult> {
    // 安装逻辑
  }
  
  async loadExtension(extensionId: string): Promise<LoadResult> {
    // 加载逻辑
  }
  
  async uninstallExtension(extensionId: string): Promise<UninstallResult> {
    // 卸载逻辑
  }
}
```

### 工作流集成示例
```typescript
// 工作流适配器示例
class StandardWorkflowAdapter implements IWorkflowAdapter {
  adapter_id = 'standard-workflow-adapter';
  name = 'Standard Workflow Integration';
  version = '1.0.0';
  type = ExtensionType.WORKFLOW;
  
  // 实现工作流接口
  async initializeWorkflow(definition: WorkflowDefinition): Promise<WorkflowInitResult> {
    // 初始化工作流
    return { workflow_id: 'wf-' + Date.now(), status: 'created' };
  }
  
  async startStage(workflowId: string, stage: WorkflowStageType): Promise<StageStartResult> {
    // 开始阶段
    return { 
      stage_id: `${workflowId}-${stage}-${Date.now()}`,
      started_at: new Date().toISOString(),
      status: 'in_progress'
    };
  }
  
  // 其他方法实现...
}
```

### Coregentis集成
```typescript
// Coregentis适配器示例
class CoregentisExtensionAdapter implements IExtensionAdapter {
  extension_id = 'coregentis-extension-adapter';
  name = 'Coregentis Platform Extension Integration';
  version = '1.0.1';
  type = ExtensionType.API_SERVICE;
  
  // 实现标准接口
  async installExtension(extension: ExtensionPackage): Promise<InstallResult> {
    // 安装逻辑
  }
  
  async loadExtension(extensionId: string): Promise<LoadResult> {
    // 加载逻辑
  }
  
  async uninstallExtension(extensionId: string): Promise<UninstallResult> {
    // 卸载逻辑
  }
}
```

## ✅ 扩展开发检查清单

扩展开发前确认：
- [ ] 扩展清单符合ExtensionProtocol规范
- [ ] 实现所有必要的生命周期钩子
- [ ] 权限请求遵循最小权限原则
- [ ] 性能符合响应时间要求(<50ms)
- [ ] 提供健康检查端点
- [ ] 实现优雅降级机制
- [ ] 完整的错误处理和日志记录
- [ ] 提供详细的使用文档
- [ ] 工作流扩展遵循标准阶段定义
- [ ] 确保工作流阶段转换可追踪

---

**规则版本**: v1.2  
**规则创建**: MPLP扩展框架团队  
**维护责任**: 扩展开发者  
**审查周期**: 每个扩展版本发布前审查 
alwaysApply: false
---
 
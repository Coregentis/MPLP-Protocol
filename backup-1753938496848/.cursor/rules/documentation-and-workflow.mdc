description: "MPLP项目文档和工作流程标准 - 定义项目文档、工作流程和交付标准"
globs: ["**/*.md", "**/*.json", "**/docs/**", "**/README.md", "**/trace_history.json"]
alwaysApply: true
---

# MPLP 文档和工作流程标准

> **规则版本**: v2.0.0  
> **创建时间**: 2025-07-27  
> **更新时间**: 2025-07-27  
> **适用范围**: 所有项目文档、工作流程和交付过程  
> **强制等级**: 🚨 **高优先级** - 所有文档必须符合规范

## 🎯 文档和工作流程核心原则

### 基础原则
- **真实时间记录**: 所有时间戳必须使用真实时间，不得伪造
- **完整追踪**: 所有开发活动必须记录在trace_history.json中
- **文档同步**: 代码变更必须同步更新相关文档
- **统一格式**: 所有文档必须遵循统一的格式和风格
- **交付验证**: 所有交付必须通过完整的验收检查清单

## 📝 文档标准

### 1. 文档类型和位置
```
docs/
  architecture/        # 架构设计文档
    context-module.md  # Context模块架构
    plan-module.md     # Plan模块架构
    ...
  api/                 # API文档
    rest-api.md        # REST API文档
    graphql-api.md     # GraphQL API文档
  guides/              # 开发指南
    getting-started.md # 快速开始指南
    contribution.md    # 贡献指南
  schemas/             # Schema说明文档
    context-schema.md  # Context Schema说明
    plan-schema.md     # Plan Schema说明
```

### 2. 文档格式规范
```markdown
# 文档标题

> **版本**: v1.0.0  
> **创建时间**: 2025-07-10T10:30:00+08:00  
> **更新时间**: 2025-07-27T14:15:00+08:00  
> **状态**: [草稿/审核中/已发布/已弃用]  
> **关联模块**: [Context/Plan/Confirm/Trace/Role/Extension]

## 概述

简要描述本文档的目的和内容。

## 详细内容

### 小节标题

正文内容...

```

### 3. 代码文档注释
```typescript
/**
 * 模块名称描述
 * 
 * @module Context
 * @version 1.0.0
 * @created 2025-07-10T10:30:00+08:00
 * @updated 2025-07-27T14:15:00+08:00
 */

/**
 * 创建新的上下文对象
 * 
 * @param request - 创建上下文的请求数据
 * @param userId - 创建者用户ID
 * @returns 操作结果，包含创建的上下文或错误信息
 * 
 * @example
 * ```typescript
 * const result = await contextService.createContext({
 *   name: "My Context",
 *   description: "Test context"
 * }, "user-123");
 * ```
 */
async function createContext(
  request: CreateContextRequest,
  userId: string
): Promise<ContextOperationResult> {
  // 实现...
}
```

### 4. README.md 规范
每个模块和主要目录应包含README.md文件，包含以下内容：
- 模块/目录的用途和功能
- 关键类和接口说明
- 使用示例
- 注意事项和限制
- 与其他模块的关系
- 相关文档链接

## 🕒 时间追踪规则

### 1. 时间格式和记录
- **时间格式**: 所有时间戳必须使用ISO 8601标准格式 (`YYYY-MM-DDThh:mm:ss+zz:zz`)
- **时区一致性**: 所有时间戳应使用统一的时区（推荐使用UTC+08:00）
- **真实时间**: 严禁伪造或修改时间戳以符合计划时间线

### 2. trace_history.json时间记录
```json
{
  "created_at": "当前实际时间，而非计划时间",
  "completed_at": "实际完成时间，如未完成则为null",
  "implementation_progress": [
    "2025-07-27T10:30:00+08:00: 开始实现功能",
    "2025-07-27T14:15:00+08:00: 完成核心逻辑实现",
    "2025-07-27T16:45:00+08:00: 完成单元测试编写"
  ]
}
```

### 3. 禁止的时间相关行为
```
🚫 禁止为了符合预定计划而使用虚构的未来时间戳
🚫 禁止回溯修改已记录的时间戳以符合计划时间线
🚫 禁止在不同文档间使用不一致的时间记录标准
```

### 4. 计划调整流程
当实际进度偏离计划时，应调整计划而非伪造进度：
1. 记录原计划时间线
2. 记录调整后的时间线
3. 记录调整原因
4. 分析调整对项目的影响

## 🔄 工作流程标准

### 1. Plan→Confirm→Trace→Delivery流程
每个开发任务必须严格遵循四阶段流程：

#### Plan阶段（规划）
```markdown
## 📋 Plan阶段

**引用规则**: [引用相关规则文件]
**任务模块**: [模块名称]
**预期交付**: [具体功能和性能目标]

### 技术方案
- 实现方式：[详细技术方案]
- 性能目标：[具体性能指标]
- 依赖关系：[模块依赖和接口要求]

### 风险评估
- 技术风险：[潜在技术挑战]
- 性能风险：[性能相关风险]
- 缓解措施：[风险应对方案]
```

#### Confirm阶段（确认）
```markdown
## ✅ Confirm阶段

**方案确认**: [确认技术方案可行性]
**规则符合性**: 符合 [具体规则] 中的 [具体要求]
**性能目标**: [确认性能目标可达成]
**测试策略**: [单元/集成/E2E测试规划]
**版本影响**: [major/minor/patch版本递增需求]
```

#### Trace阶段（追踪）
```markdown
## 📊 Trace阶段

**实施进度**: 
- [时间戳]: [进度描述]
- [时间戳]: [进度描述]
- [时间戳]: [进度描述]

**性能指标**: 
- [操作名称]: [实测性能] (目标: [目标性能])
- [操作名称]: [实测性能] (目标: [目标性能])

**测试结果**: 
- 单元测试: [通过数]/[总数] (覆盖率: [覆盖率]%)
- 集成测试: [通过数]/[总数] (覆盖率: [覆盖率]%)
```

#### Delivery阶段（交付）
```markdown
## 🚀 Delivery阶段

**交付清单**: 
- [x] 源代码完整提交
- [x] 文档更新完成
- [x] 所有测试通过
- [x] 覆盖率达标
- [x] 性能目标达成

**合规性验证**:
- [x] Schema验证通过
- [x] 厂商中立验证通过
- [x] 接口兼容性确认

**发布准备**:
- 版本号: [版本号]
- 变更日志: [关键变更]
- 部署说明: [部署注意事项]
```

### 2. 自动同步更新规则

当进行变更时，相关文件必须同步更新：

#### 核心模块功能变更
必须更新：
- Schema文件（如需要）
- 类型定义文件
- 相关接口和实现
- 单元测试和集成测试
- API文档
- README.md
- 版本号（如需要）

#### 接口变更
必须更新：
- 接口定义文件
- 所有实现该接口的类
- 测试用例
- API文档
- 版本号（如需要）

#### Schema变更
必须更新：
- Schema JSON文件
- 类型定义文件
- 所有使用该Schema的代码
- 验证逻辑
- 测试数据
- API文档
- 版本号

## 📋 交付检查清单

### 1. 代码交付检查清单
```markdown
#### 功能完整性 ✅
- [ ] 所有需求功能已实现
- [ ] 核心业务逻辑验证正确
- [ ] 边界条件处理完善
- [ ] 错误处理机制完整
- [ ] 与其他模块集成正常

#### 代码质量 ✅
- [ ] 通过ESLint检查（0 errors, 0 warnings）
- [ ] 通过TypeScript严格检查
- [ ] 代码格式化（Prettier）完成
- [ ] 命名约定符合规范
- [ ] 通过代码安全扫描
```

### 2. 测试验收检查清单
```markdown
#### 单元测试 ✅
- [ ] 覆盖率 ≥ 90%（核心模块 ≥ 95%）
- [ ] 所有公共方法有测试
- [ ] 边界条件测试完整
- [ ] 错误场景测试覆盖
- [ ] 所有测试通过

#### 集成测试 ✅
- [ ] 模块间集成测试通过
- [ ] API端点集成测试完整
- [ ] 数据库操作测试正常
- [ ] 外部服务Mock测试
- [ ] 端到端关键流程测试

#### 性能测试 ✅
- [ ] API响应时间符合要求（P95 < 100ms）
- [ ] 并发处理能力验证（> 1000用户）
- [ ] 内存使用在合理范围
- [ ] 数据库查询性能优化
- [ ] 缓存策略有效性验证
```

### 3. 文档交付检查清单
```markdown
#### API文档 ✅
- [ ] OpenAPI/Swagger规范更新
- [ ] 端点描述完整准确
- [ ] 请求/响应示例正确
- [ ] 错误码文档更新
- [ ] 认证方式说明清晰

#### 代码文档 ✅
- [ ] JSDoc注释完整
- [ ] 复杂逻辑添加内联注释
- [ ] README.md更新
- [ ] 变更日志(CHANGELOG.md)更新
- [ ] 架构图表更新
```

### 4. 部署验证检查清单
```markdown
#### 服务部署 ✅
- [ ] 服务正常启动
- [ ] 健康检查端点响应正常
- [ ] 数据库连接正常
- [ ] 缓存服务连接正常
- [ ] 外部服务集成正常

#### 监控配置 ✅
- [ ] 应用性能监控配置
- [ ] 错误日志监控设置
- [ ] 业务指标监控配置
- [ ] 告警规则设置
- [ ] 仪表板配置完成
```

## 📊 项目状态报告

### 1. 日常进度报告
```markdown
# 日常进度报告 - 2025-07-27

## 完成的任务
- [x] Context模块单元测试编写
- [x] Plan模块接口实现
- [x] Trace模块性能优化

## 进行中的任务
- [ ] Confirm模块集成测试
- [ ] Role模块权限验证功能

## 阻塞问题
- 数据库连接池配置导致并发测试失败
- Schema验证性能低于预期

## 下一步计划
- 完成Confirm模块集成测试
- 修复数据库连接问题
- 优化Schema验证性能
```

### 2. 里程碑报告
```markdown
# 里程碑报告：阶段1核心架构完成

## 里程碑概述
- **代号**: MS1
- **计划完成日期**: 2025-07-20
- **实际完成日期**: 2025-07-23
- **状态**: 已完成 (延期3天)

## 完成的关键成果
1. 6个核心模块基础架构实现
2. 核心接口定义和标准适配器
3. Schema定义和验证机制
4. 基础单元测试覆盖率达到92%

## 关键指标
- **代码提交**: 124次提交
- **新增代码**: 15,420行
- **测试覆盖率**: 92%
- **性能基准**: API P95 85ms (目标<100ms)

## 延期原因分析
- Schema验证机制复杂度超出预期
- 厂商中立适配器需要额外重构工作

## 经验总结与下阶段改进
- 提前细化Schema复杂度评估
- 增加架构设计评审环节
```

---

**规则创建**: MPLP项目管理团队  
**维护责任**: 所有开发者  
**审查周期**: 每个开发阶段结束后审查
description:
globs:
alwaysApply: false
---

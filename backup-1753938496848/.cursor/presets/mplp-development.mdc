---
alwaysApply: true
---

# MPLP 项目开发预设指令

> **预设版本**: v3.1  
> **更新时间**: 2025-07-29T11:00:00+08:00  
> **适用项目**: Multi-Agent Project Lifecycle Protocol (MPLP) v1.0  

## 🎯 AI 助手开发约束

你将基于已有的 `.cursor/rules/*.mdc` 项目规范开发 MPLP 协议项目。

### 📌 强制执行的开发约束：

#### 0. **Schema驱动开发原则（最高优先级）** 
```
所有开发任务必须严格遵循Schema驱动原则：
- 开发前必须先读取相关src/schemas/*.json文件
- 所有字段名称、类型结构、枚举值必须100%匹配Schema定义
- 禁止在Schema未确认前编写代码或测试用例
- 严格按照Schema → Types → Modules → Protocols → Routes → Services → Core → Tests的开发顺序
参考规则：.cursor/rules/schema-standards.mdc
```

#### 1. **架构设计规则（严格执行）** 
```
所有开发必须严格遵循架构设计原则：
- 厂商中立原则：核心功能不依赖特定厂商，通过标准接口实现集成
- 模块化设计：6个核心模块独立且协作，边界清晰
- 性能约束：必须满足各模块性能指标要求
- 接口设计：通用接口命名必须中立，使用I前缀+PascalCase
- 错误处理：统一的错误处理机制和日志记录
参考规则：.cursor/rules/development-standards.mdc
```

#### 2. **MPLP 工作流系统（严格执行）**
```
所有任务必须使用MPLP工作流系统实现：
- 标准工作流：Plan → Confirm → Trace → Delivery流程
- 工作流适配器：使用IWorkflowAdapter接口，确保厂商中立
- 工作流状态：CREATED → PLANNED → CONFIRMED → TRACED → DELIVERED
- 工作流验证：确保工作流定义符合Schema规范，阶段顺序正确
- 工作流安全：工作流执行需要适当权限，必须有审计日志
参考规则：.cursor/rules/development-standards.mdc（工作流驱动开发部分）
```

#### 3. **测试规范（严格执行）** 
```
所有代码必须遵循严格的测试规范：
- 测试覆盖率：核心模块≥95%，其他模块≥90%
- 测试类型：单元测试、集成测试、性能测试全覆盖
- 测试数据：使用标准化的测试工厂方法创建符合Schema的数据
- 测试命名：遵循describe('{Feature}测试'), it('应该{预期行为}')格式
- 边界测试：必须包含边界条件和错误场景测试
参考规则：.cursor/rules/testing-standards.mdc
```

#### 4. **规则引用机制（必须执行）**
```
每轮生成代码/文档前，必须先确认你当前引用的 `.mdc` 规则，并说明所遵循的部分：
- 引用规则文件：如 `.cursor/rules/development-standards.mdc`
- 遵循章节：如 "厂商中立原则"
- 应用约束：如 "接口设计规范"
```

#### 5. **输出标准化（强制包含）**
```
输出必须同时包含：
✅ 修改文件名和路径
✅ 归属模块（context/plan/confirm/trace/role/extension/workflow）
✅ 技术规范符合性检查
✅ 版本号变更需求（基于version-and-commit-standards.mdc）
✅ 性能指标验证（如适用）
✅ 测试覆盖率要求（≥90%单元测试）
```

#### 6. **禁止行为（严格禁止）**
```
❌ 不允许直接跳过 Plan/Confirm/Trace/Delivery 任一阶段
❌ 不允许忽略 .mdc 规则约束
❌ 不允许生成不符合性能标准的代码
❌ 不允许省略错误处理和日志记录
❌ 不允许使用 any 类型或绕过 TypeScript 严格模式
❌ 不允许违反Schema定义实现不一致的代码
❌ 不允许忽略厂商中立原则使用特定厂商实现
❌ 不允许在工作流实现中跳过标准阶段
```

### 🔧 技术标准约束（基于开发规则）

#### **代码质量要求**
- TypeScript 5.0+ 严格模式，100% 类型覆盖
- ESLint + Prettier 检查必须通过
- 单元测试覆盖率 ≥ 90%，集成测试 ≥ 80%

#### **性能标准要求**
- API 响应时间：P95 < 100ms, P99 < 200ms
- 协议解析性能：< 10ms
- 模块特定性能：Context <5ms, Plan <8ms, Confirm <3ms, Trace <2ms, Role <1ms, Extension <50ms, Workflow <30ms

#### **安全标准要求**
- 所有输入必须验证和清理
- 敏感数据必须加密存储
- 0 个高危安全漏洞
- 遵循最小权限原则

### 📋 标准任务模板

#### **Plan 阶段模板**
```markdown
## 📋 Plan 阶段

**引用规则**: `.cursor/rules/[相关规则].mdc` - [具体章节]
**任务模块**: [context/plan/confirm/trace/role/extension/workflow]
**预期交付**: [具体功能描述和性能目标]

### 技术方案
- 实现方式：[详细技术方案]
- 性能目标：[具体性能指标]
- 依赖关系：[模块依赖和接口要求]

### 风险评估
- 技术风险：[潜在技术挑战]
- 性能风险：[性能相关风险]
- 缓解措施：[风险应对方案]
```

#### **Confirm 阶段模板**
```markdown
## ✅ Confirm 阶段

**方案确认**: [确认技术方案可行性]
**规则符合性**: 符合 [具体.mdc文件] 中的 [具体要求]
**性能目标**: [确认性能目标可达成]
**测试策略**: [单元/集成/E2E测试规划]
**版本影响**: [major/minor/patch版本递增需求]
```

#### **Trace 阶段模板**
```markdown
## 📊 Trace 阶段

**实施进度**: 
- [时间戳]: [进度描述]
- [时间戳]: [进度描述]
- [时间戳]: [进度描述]

**性能指标**: 
- [操作名称]: [实测性能] (目标: [目标性能])
- [操作名称]: [实测性能] (目标: [目标性能])

**测试结果**: 
- 单元测试: [通过数]/[总数] (覆盖率: [覆盖率]%)
- 集成测试: [通过数]/[总数] (覆盖率: [覆盖率]%)

**问题记录**:
- [问题1描述]: [解决方案]
- [问题2描述]: [解决方案]
```

#### **Delivery 阶段模板**
```markdown
## 🚀 Delivery 阶段

**交付清单**: 
- [x] 源代码完整提交
- [x] 文档更新完成
- [x] 所有测试通过
- [x] 覆盖率达标
- [x] 性能目标达成

**合规性验证**:
- [x] Schema验证通过
- [x] 厂商中立验证通过
- [x] 接口兼容性确认

**发布准备**:
- 版本号: [版本号]
- 变更日志: [关键变更]
- 部署说明: [部署注意事项]
```

### 🎯 使用示例

#### **任务1：实现标准工作流管理系统**
**用户请求**:
> 「请实现MPLP标准工作流系统，支持Plan→Confirm→Trace→Delivery流程，确保厂商中立原则。」

**AI 助手成功完成的流程**:
1. **Plan**: 分析工作流Schema定义，设计通用适配器接口
2. **Confirm**: 确认技术方案符合厂商中立原则
3. **Trace**: 实现通用工作流适配器接口和基础/增强实现
4. **Delivery**: 编写完整测试，确保覆盖率≥95%

**实际交付成果**:
- 创建 `src/interfaces/workflow-adapter.interface.ts` - 定义通用工作流适配器接口
- 创建 `src/modules/workflow/workflow-manager.ts` - 实现工作流管理器
- 创建 `src/adapters/workflow/base-workflow-adapter.ts` - 实现基础适配器
- 创建 `src/adapters/workflow/enhanced-workflow-adapter.ts` - 实现增强适配器
- 创建 `tests/modules/workflow/workflow-manager.test.ts` - 工作流管理器测试

#### **任务2：Context模块状态持久化实现**
**用户请求**:
> 「请为Context模块实现状态持久化功能，必须严格走Plan→Confirm→Trace→Delivery流程，并遵守相关规则。」

**AI 助手成功完成的流程**:
1. **Plan**: 分析 Schema 定义，设计状态持久化方案
2. **Confirm**: 确认技术方案符合性能要求 (<5ms查询)
3. **Trace**: 记录实施过程，监控性能指标，解决持久化问题
4. **Delivery**: 交付代码，创建测试用例，验证覆盖率>90%

**实际交付成果**:
- 修改 `src/modules/context/context-manager.ts` - 添加持久化机制
- 更新 `src/modules/context/types.ts` - 添加持久化相关类型定义
- 创建 `src/modules/context/persistence/context-persistence.ts` - 实现状态持久化
- 创建 `tests/modules/context/context-persistence.test.ts` - 持久化测试覆盖

#### **任务3：Plan模块适配器升级**
**用户请求**:
> 「Plan模块需要使用增强版适配器，确保厂商中立原则实现。」

**AI 助手成功完成的流程**:
1. **Plan**: 分析现有适配器架构，规划升级路径
2. **Confirm**: 确认升级方案符合厂商中立原则
3. **Trace**: 实施升级，确保接口一致性
4. **Delivery**: 完成升级，更新测试，验证兼容性

**实际交付成果**:
- 升级 `src/modules/plan/plan-manager.ts` - 使用增强版适配器
- 增强 `src/adapters/plan/enhanced-plan-adapter.ts` - 添加向后兼容方法
- 更新 `src/interfaces/plan-adapter.interface.ts` - 确保接口厂商中立
- 更新 `tests/modules/plan/vendor-neutral-validation.test.ts` - 验证厂商中立性

### 🔄 人工触发语句示例

以下是一些标准触发语句，可以在对话开始时使用，以激活特定的开发约束：

#### 1. **Schema驱动开发触发**
> 「请严格按照Schema驱动开发原则，为[模块名]实现[功能名]功能。」

#### 2. **架构规则触发**
> 「请严格遵守架构设计规则，特别是厂商中立原则，为[模块名]开发[功能名]。」

#### 3. **工作流开发触发**
> 「请为[模块名]实现标准工作流支持，确保遵循Plan→Confirm→Trace→Delivery流程。」

#### 4. **测试规范触发**
> 「请按照测试规范要求，为[模块名]的[功能名]编写全面的测试用例，确保覆盖率≥95%。」

#### 5. **完整流程触发**
> 「请为[模块名]实现[功能名]，必须严格走Plan→Confirm→Trace→Delivery流程，并遵守相关.mdc规则。」

#### 6. **性能优化触发**
> 「请对[模块名]进行性能优化，确保符合性能标准规范中的指标要求。」

#### 7. **代码重构触发**
> 「请根据架构设计规则和命名约定，重构[文件路径]，确保厂商中立和接口一致性。」

### 📚 参考规则文件

- `.cursor/rules/development-standards.mdc` - 架构设计、命名规范和Schema驱动开发
- `.cursor/rules/documentation-and-workflow.mdc` - 文档格式、时间追踪和工作流程
- `.cursor/rules/schema-standards.mdc` - Schema设计规范和验证机制
- `.cursor/rules/testing-standards.mdc` - 测试规范、厂商中立测试和性能测试
- `.cursor/rules/version-and-commit-standards.mdc` - 版本号规范和提交信息规范
- `.cursor/rules/extension-protocol.mdc` - 扩展模块和第三方集成规范
- `.cursor/rules/agent-role.mdc` - AI Agent角色定义和权限管理
- `.cursor/rules/pre-commit-checks.mdc` - 代码提交前的自动化检查

### ✅ 审计执行标准与方法

#### **六维度量化指标**
```markdown
## 📊 项目审计维度

1. **架构一致性审计**
   - 接口命名匹配度：目标>95%
   - 厂商中立实现度：目标100%
   - 模块边界清晰度：目标>90%
   - 错误处理一致性：目标100%

2. **Schema一致性审计**
   - 代码与Schema匹配度：目标100%
   - 字段命名一致性：目标100%
   - Schema验证覆盖率：目标>95%
   - 类型安全度：目标100%

3. **测试完整性审计**
   - 单元测试覆盖率：目标≥95%（核心模块）
   - 集成测试覆盖率：目标≥80%
   - 性能测试覆盖率：目标≥70%
   - 边界条件测试：目标>90%

4. **性能达标审计**
   - API响应时间：目标P95<100ms
   - 协议解析性能：目标<10ms
   - 模块特定性能：按各模块标准
   - 资源利用率：CPU<70%，内存<512MB

5. **文档完整性审计**
   - API文档匹配度：目标>95%
   - 代码注释覆盖率：目标>80%
   - 架构文档更新度：目标100%
   - 使用指南完整性：目标>90%

6. **开发规范审计**
   - ESLint规则符合率：目标100%
   - 命名约定匹配度：目标>95%
   - Git提交规范符合率：目标>90%
   - 代码审查覆盖率：目标100%
```

#### **审计结果输出模板**
```markdown
## 📋 项目审计结果

### 总体评分：[X/10]

### 详细审计结果
| 审计维度 | 当前状态 | 目标状态 | 差距 | 优先级 |
|---------|---------|---------|------|-------|
| 架构一致性 | [X%] | [Y%] | [Z%] | [高/中/低] |
| Schema一致性 | [X%] | [Y%] | [Z%] | [高/中/低] |
| 测试完整性 | [X%] | [Y%] | [Z%] | [高/中/低] |
| 性能达标 | [X%] | [Y%] | [Z%] | [高/中/低] |
| 文档完整性 | [X%] | [Y%] | [Z%] | [高/中/低] |
| 开发规范 | [X%] | [Y%] | [Z%] | [高/中/低] |

### 关键问题
1. [问题1描述]
2. [问题2描述]
3. [问题3描述]

### 改进建议
1. [建议1]
2. [建议2]
3. [建议3]
```

---

**预设指令版本**: v3.1  
**维护团队**: MPLP项目团队  
**更新周期**: 每个开发阶段结束后更新 # MPLP 项目开发预设指令

> **预设版本**: v3.1  
> **更新时间**: 2025-07-29T11:00:00+08:00  
> **适用项目**: Multi-Agent Project Lifecycle Protocol (MPLP) v1.0  

## 🎯 AI 助手开发约束

你将基于已有的 `.cursor/rules/*.mdc` 项目规范开发 MPLP 协议项目。

### 📌 强制执行的开发约束：

#### 0. **Schema驱动开发原则（最高优先级）** 
```
所有开发任务必须严格遵循Schema驱动原则：
- 开发前必须先读取相关src/schemas/*.json文件
- 所有字段名称、类型结构、枚举值必须100%匹配Schema定义
- 禁止在Schema未确认前编写代码或测试用例
- 严格按照Schema → Types → Modules → Protocols → Routes → Services → Core → Tests的开发顺序
参考规则：.cursor/rules/schema-standards.mdc
```

#### 1. **架构设计规则（严格执行）** 
```
所有开发必须严格遵循架构设计原则：
- 厂商中立原则：核心功能不依赖特定厂商，通过标准接口实现集成
- 模块化设计：6个核心模块独立且协作，边界清晰
- 性能约束：必须满足各模块性能指标要求
- 接口设计：通用接口命名必须中立，使用I前缀+PascalCase
- 错误处理：统一的错误处理机制和日志记录
参考规则：.cursor/rules/development-standards.mdc
```

#### 2. **MPLP 工作流系统（严格执行）**
```
所有任务必须使用MPLP工作流系统实现：
- 标准工作流：Plan → Confirm → Trace → Delivery流程
- 工作流适配器：使用IWorkflowAdapter接口，确保厂商中立
- 工作流状态：CREATED → PLANNED → CONFIRMED → TRACED → DELIVERED
- 工作流验证：确保工作流定义符合Schema规范，阶段顺序正确
- 工作流安全：工作流执行需要适当权限，必须有审计日志
参考规则：.cursor/rules/development-standards.mdc（工作流驱动开发部分）
```

#### 3. **测试规范（严格执行）** 
```
所有代码必须遵循严格的测试规范：
- 测试覆盖率：核心模块≥95%，其他模块≥90%
- 测试类型：单元测试、集成测试、性能测试全覆盖
- 测试数据：使用标准化的测试工厂方法创建符合Schema的数据
- 测试命名：遵循describe('{Feature}测试'), it('应该{预期行为}')格式
- 边界测试：必须包含边界条件和错误场景测试
参考规则：.cursor/rules/testing-standards.mdc
```

#### 4. **规则引用机制（必须执行）**
```
每轮生成代码/文档前，必须先确认你当前引用的 `.mdc` 规则，并说明所遵循的部分：
- 引用规则文件：如 `.cursor/rules/development-standards.mdc`
- 遵循章节：如 "厂商中立原则"
- 应用约束：如 "接口设计规范"
```

#### 5. **输出标准化（强制包含）**
```
输出必须同时包含：
✅ 修改文件名和路径
✅ 归属模块（context/plan/confirm/trace/role/extension/workflow）
✅ 技术规范符合性检查
✅ 版本号变更需求（基于version-and-commit-standards.mdc）
✅ 性能指标验证（如适用）
✅ 测试覆盖率要求（≥90%单元测试）
```

#### 6. **禁止行为（严格禁止）**
```
❌ 不允许直接跳过 Plan/Confirm/Trace/Delivery 任一阶段
❌ 不允许忽略 .mdc 规则约束
❌ 不允许生成不符合性能标准的代码
❌ 不允许省略错误处理和日志记录
❌ 不允许使用 any 类型或绕过 TypeScript 严格模式
❌ 不允许违反Schema定义实现不一致的代码
❌ 不允许忽略厂商中立原则使用特定厂商实现
❌ 不允许在工作流实现中跳过标准阶段
```

### 🔧 技术标准约束（基于开发规则）

#### **代码质量要求**
- TypeScript 5.0+ 严格模式，100% 类型覆盖
- ESLint + Prettier 检查必须通过
- 单元测试覆盖率 ≥ 90%，集成测试 ≥ 80%

#### **性能标准要求**
- API 响应时间：P95 < 100ms, P99 < 200ms
- 协议解析性能：< 10ms
- 模块特定性能：Context <5ms, Plan <8ms, Confirm <3ms, Trace <2ms, Role <1ms, Extension <50ms, Workflow <30ms

#### **安全标准要求**
- 所有输入必须验证和清理
- 敏感数据必须加密存储
- 0 个高危安全漏洞
- 遵循最小权限原则

### 📋 标准任务模板

#### **Plan 阶段模板**
```markdown
## 📋 Plan 阶段

**引用规则**: `.cursor/rules/[相关规则].mdc` - [具体章节]
**任务模块**: [context/plan/confirm/trace/role/extension/workflow]
**预期交付**: [具体功能描述和性能目标]

### 技术方案
- 实现方式：[详细技术方案]
- 性能目标：[具体性能指标]
- 依赖关系：[模块依赖和接口要求]

### 风险评估
- 技术风险：[潜在技术挑战]
- 性能风险：[性能相关风险]
- 缓解措施：[风险应对方案]
```

#### **Confirm 阶段模板**
```markdown
## ✅ Confirm 阶段

**方案确认**: [确认技术方案可行性]
**规则符合性**: 符合 [具体.mdc文件] 中的 [具体要求]
**性能目标**: [确认性能目标可达成]
**测试策略**: [单元/集成/E2E测试规划]
**版本影响**: [major/minor/patch版本递增需求]
```

#### **Trace 阶段模板**
```markdown
## 📊 Trace 阶段

**实施进度**: 
- [时间戳]: [进度描述]
- [时间戳]: [进度描述]
- [时间戳]: [进度描述]

**性能指标**: 
- [操作名称]: [实测性能] (目标: [目标性能])
- [操作名称]: [实测性能] (目标: [目标性能])

**测试结果**: 
- 单元测试: [通过数]/[总数] (覆盖率: [覆盖率]%)
- 集成测试: [通过数]/[总数] (覆盖率: [覆盖率]%)

**问题记录**:
- [问题1描述]: [解决方案]
- [问题2描述]: [解决方案]
```

#### **Delivery 阶段模板**
```markdown
## 🚀 Delivery 阶段

**交付清单**: 
- [x] 源代码完整提交
- [x] 文档更新完成
- [x] 所有测试通过
- [x] 覆盖率达标
- [x] 性能目标达成

**合规性验证**:
- [x] Schema验证通过
- [x] 厂商中立验证通过
- [x] 接口兼容性确认

**发布准备**:
- 版本号: [版本号]
- 变更日志: [关键变更]
- 部署说明: [部署注意事项]
```

### 🎯 使用示例

#### **任务1：实现标准工作流管理系统**
**用户请求**:
> 「请实现MPLP标准工作流系统，支持Plan→Confirm→Trace→Delivery流程，确保厂商中立原则。」

**AI 助手成功完成的流程**:
1. **Plan**: 分析工作流Schema定义，设计通用适配器接口
2. **Confirm**: 确认技术方案符合厂商中立原则
3. **Trace**: 实现通用工作流适配器接口和基础/增强实现
4. **Delivery**: 编写完整测试，确保覆盖率≥95%

**实际交付成果**:
- 创建 `src/interfaces/workflow-adapter.interface.ts` - 定义通用工作流适配器接口
- 创建 `src/modules/workflow/workflow-manager.ts` - 实现工作流管理器
- 创建 `src/adapters/workflow/base-workflow-adapter.ts` - 实现基础适配器
- 创建 `src/adapters/workflow/enhanced-workflow-adapter.ts` - 实现增强适配器
- 创建 `tests/modules/workflow/workflow-manager.test.ts` - 工作流管理器测试

#### **任务2：Context模块状态持久化实现**
**用户请求**:
> 「请为Context模块实现状态持久化功能，必须严格走Plan→Confirm→Trace→Delivery流程，并遵守相关规则。」

**AI 助手成功完成的流程**:
1. **Plan**: 分析 Schema 定义，设计状态持久化方案
2. **Confirm**: 确认技术方案符合性能要求 (<5ms查询)
3. **Trace**: 记录实施过程，监控性能指标，解决持久化问题
4. **Delivery**: 交付代码，创建测试用例，验证覆盖率>90%

**实际交付成果**:
- 修改 `src/modules/context/context-manager.ts` - 添加持久化机制
- 更新 `src/modules/context/types.ts` - 添加持久化相关类型定义
- 创建 `src/modules/context/persistence/context-persistence.ts` - 实现状态持久化
- 创建 `tests/modules/context/context-persistence.test.ts` - 持久化测试覆盖

#### **任务3：Plan模块适配器升级**
**用户请求**:
> 「Plan模块需要使用增强版适配器，确保厂商中立原则实现。」

**AI 助手成功完成的流程**:
1. **Plan**: 分析现有适配器架构，规划升级路径
2. **Confirm**: 确认升级方案符合厂商中立原则
3. **Trace**: 实施升级，确保接口一致性
4. **Delivery**: 完成升级，更新测试，验证兼容性

**实际交付成果**:
- 升级 `src/modules/plan/plan-manager.ts` - 使用增强版适配器
- 增强 `src/adapters/plan/enhanced-plan-adapter.ts` - 添加向后兼容方法
- 更新 `src/interfaces/plan-adapter.interface.ts` - 确保接口厂商中立
- 更新 `tests/modules/plan/vendor-neutral-validation.test.ts` - 验证厂商中立性

### 🔄 人工触发语句示例

以下是一些标准触发语句，可以在对话开始时使用，以激活特定的开发约束：

#### 1. **Schema驱动开发触发**
> 「请严格按照Schema驱动开发原则，为[模块名]实现[功能名]功能。」

#### 2. **架构规则触发**
> 「请严格遵守架构设计规则，特别是厂商中立原则，为[模块名]开发[功能名]。」

#### 3. **工作流开发触发**
> 「请为[模块名]实现标准工作流支持，确保遵循Plan→Confirm→Trace→Delivery流程。」

#### 4. **测试规范触发**
> 「请按照测试规范要求，为[模块名]的[功能名]编写全面的测试用例，确保覆盖率≥95%。」

#### 5. **完整流程触发**
> 「请为[模块名]实现[功能名]，必须严格走Plan→Confirm→Trace→Delivery流程，并遵守相关.mdc规则。」

#### 6. **性能优化触发**
> 「请对[模块名]进行性能优化，确保符合性能标准规范中的指标要求。」

#### 7. **代码重构触发**
> 「请根据架构设计规则和命名约定，重构[文件路径]，确保厂商中立和接口一致性。」

### 📚 参考规则文件

- `.cursor/rules/development-standards.mdc` - 架构设计、命名规范和Schema驱动开发
- `.cursor/rules/documentation-and-workflow.mdc` - 文档格式、时间追踪和工作流程
- `.cursor/rules/schema-standards.mdc` - Schema设计规范和验证机制
- `.cursor/rules/testing-standards.mdc` - 测试规范、厂商中立测试和性能测试
- `.cursor/rules/version-and-commit-standards.mdc` - 版本号规范和提交信息规范
- `.cursor/rules/extension-protocol.mdc` - 扩展模块和第三方集成规范
- `.cursor/rules/agent-role.mdc` - AI Agent角色定义和权限管理
- `.cursor/rules/pre-commit-checks.mdc` - 代码提交前的自动化检查

### ✅ 审计执行标准与方法

#### **六维度量化指标**
```markdown
## 📊 项目审计维度

1. **架构一致性审计**
   - 接口命名匹配度：目标>95%
   - 厂商中立实现度：目标100%
   - 模块边界清晰度：目标>90%
   - 错误处理一致性：目标100%

2. **Schema一致性审计**
   - 代码与Schema匹配度：目标100%
   - 字段命名一致性：目标100%
   - Schema验证覆盖率：目标>95%
   - 类型安全度：目标100%

3. **测试完整性审计**
   - 单元测试覆盖率：目标≥95%（核心模块）
   - 集成测试覆盖率：目标≥80%
   - 性能测试覆盖率：目标≥70%
   - 边界条件测试：目标>90%

4. **性能达标审计**
   - API响应时间：目标P95<100ms
   - 协议解析性能：目标<10ms
   - 模块特定性能：按各模块标准
   - 资源利用率：CPU<70%，内存<512MB

5. **文档完整性审计**
   - API文档匹配度：目标>95%
   - 代码注释覆盖率：目标>80%
   - 架构文档更新度：目标100%
   - 使用指南完整性：目标>90%

6. **开发规范审计**
   - ESLint规则符合率：目标100%
   - 命名约定匹配度：目标>95%
   - Git提交规范符合率：目标>90%
   - 代码审查覆盖率：目标100%
```

#### **审计结果输出模板**
```markdown
## 📋 项目审计结果

### 总体评分：[X/10]

### 详细审计结果
| 审计维度 | 当前状态 | 目标状态 | 差距 | 优先级 |
|---------|---------|---------|------|-------|
| 架构一致性 | [X%] | [Y%] | [Z%] | [高/中/低] |
| Schema一致性 | [X%] | [Y%] | [Z%] | [高/中/低] |
| 测试完整性 | [X%] | [Y%] | [Z%] | [高/中/低] |
| 性能达标 | [X%] | [Y%] | [Z%] | [高/中/低] |
| 文档完整性 | [X%] | [Y%] | [Z%] | [高/中/低] |
| 开发规范 | [X%] | [Y%] | [Z%] | [高/中/低] |

### 关键问题
1. [问题1描述]
2. [问题2描述]
3. [问题3描述]

### 改进建议
1. [建议1]
2. [建议2]
3. [建议3]
```

---

**预设指令版本**: v3.1  
**维护团队**: MPLP项目团队  
**更新周期**: 每个开发阶段结束后更新 
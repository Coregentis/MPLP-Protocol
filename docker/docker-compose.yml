version: '3.8'

# MPLP v1.0 Alpha - Docker Compose Configuration
# Multi-Agent Protocol Lifecycle Platform development and testing environment

services:
  # MPLP Core Service
  mplp-core:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: alpha
    container_name: mplp-core-alpha
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=alpha
      - MPLP_VERSION=1.0.0-alpha
      - MPLP_LOG_LEVEL=info
      - MPLP_PORT=3000
      - MPLP_ENABLE_DEBUG=true
      - MPLP_ENABLE_METRICS=true
      - MPLP_ENABLE_TRACING=true
      # Database configuration
      - MPLP_DB_HOST=postgres
      - MPLP_DB_PORT=5432
      - MPLP_DB_NAME=mplp_alpha
      - MPLP_DB_USER=mplp
      - MPLP_DB_PASSWORD=mplp_alpha_password
      # Redis configuration
      - MPLP_REDIS_HOST=redis
      - MPLP_REDIS_PORT=6379
      - MPLP_REDIS_DB=0
    volumes:
      - mplp-logs:/app/logs
      - mplp-data:/app/data
      - ../src/schemas:/app/src/schemas:ro
    depends_on:
      - postgres
      - redis
    networks:
      - mplp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mplp.rule=Host(`mplp.localhost`)"
      - "traefik.http.services.mplp.loadbalancer.server.port=3000"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mplp-postgres
    environment:
      - POSTGRES_DB=mplp_alpha
      - POSTGRES_USER=mplp
      - POSTGRES_PASSWORD=mplp_alpha_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - mplp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mplp -d mplp_alpha"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mplp-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - mplp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MPLP Development Environment
  mplp-dev:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    container_name: mplp-dev
    ports:
      - "3001:3000"
      - "9229:9229"  # Node.js debugger port
    environment:
      - NODE_ENV=development
      - MPLP_VERSION=1.0.0-alpha
      - MPLP_LOG_LEVEL=debug
      - MPLP_PORT=3000
      - MPLP_ENABLE_DEBUG=true
      - MPLP_ENABLE_METRICS=true
      - MPLP_ENABLE_TRACING=true
      - MPLP_DB_HOST=postgres
      - MPLP_REDIS_HOST=redis
    volumes:
      - ../src:/app/src:ro
      - ../tests:/app/tests:ro
      - ../docs:/app/docs:ro
      - mplp-dev-logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - mplp-network
    restart: unless-stopped
    profiles:
      - dev

  # MPLP Testing Environment
  mplp-test:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: testing
    container_name: mplp-test
    environment:
      - NODE_ENV=testing
      - MPLP_VERSION=1.0.0-alpha
      - MPLP_LOG_LEVEL=warn
    volumes:
      - test-results:/app/test-results
    networks:
      - mplp-network
    profiles:
      - test

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mplp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mplp-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mplp-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=mplp_admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mplp-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Load Balancer - Traefik
  traefik:
    image: traefik:v3.0
    container_name: mplp-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mplp-network
    restart: unless-stopped
    profiles:
      - loadbalancer

# Networks
networks:
  mplp-network:
    driver: bridge
    name: mplp-alpha-network

# Volumes
volumes:
  postgres-data:
    name: mplp-postgres-data
  redis-data:
    name: mplp-redis-data
  mplp-logs:
    name: mplp-logs
  mplp-data:
    name: mplp-data
  mplp-dev-logs:
    name: mplp-dev-logs
  test-results:
    name: mplp-test-results
  prometheus-data:
    name: mplp-prometheus-data
  grafana-data:
    name: mplp-grafana-data

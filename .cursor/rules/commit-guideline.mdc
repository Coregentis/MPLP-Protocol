# MPLP 提交指南规则

> **文件类型**: Always  
> **适用范围**: 所有Git提交信息  
> **最后更新**: 2024-07-09

## 📝 提交信息格式

### Conventional Commits 规范
MPLP项目严格遵循[Conventional Commits 1.0.0](https://www.conventionalcommits.org/zh-hans/v1.0.0/)规范：

```
<类型>[可选作用域]: <描述>

[可选正文]

[可选脚注]
```

### 基本格式示例
```
feat(context): add shared state management

Added support for shared state management in context module.
This allows multiple agents to share data efficiently.

Closes #123
```

## 🏷️ 提交类型分类

### 核心类型
```
feat:     新功能 (feature)
fix:      Bug修复
docs:     文档变更
style:    代码格式修改（不影响功能）
refactor: 代码重构（不新增功能，不修复bug）
test:     测试相关变更
chore:    构建过程或辅助工具的变更
```

### MPLP扩展类型
```
protocol: 协议定义变更
schema:   JSON Schema变更
api:      API接口变更
config:   配置文件变更
security: 安全相关修复
perf:     性能优化
```

## 🎯 作用域规范

### 核心模块作用域
```
context:    Context模块相关
plan:       Plan模块相关
confirm:    Confirm模块相关
trace:      Trace模块相关
role:       Role模块相关
extension:  Extension模块相关
```

### 技术组件作用域
```
api:        API层变更
database:   数据库相关
cache:      缓存相关
auth:       认证授权
validation: 数据验证
monitoring: 监控相关
security:   安全相关
```

### 项目管理作用域
```
deps:       依赖管理
build:      构建系统
ci:         持续集成
deploy:     部署相关
docs:       文档
tests:      测试框架
```

## ✅ 提交信息示例

### 功能开发
```bash
# ✅ 正确: 新增功能
git commit -m "feat(context): add batch operations support

- Implement batch create, update, and delete operations
- Add input validation for batch requests
- Update API documentation

Closes #456"

# ✅ 正确: API变更
git commit -m "api(plan): add conditional execution endpoint

Added POST /api/v1/plans/{id}/execute-conditional endpoint
for conditional task execution based on context state.

Breaking change: Modified PlanExecutionRequest schema

BREAKING CHANGE: PlanExecutionRequest now requires 'conditions' field"

# ✅ 正确: 协议变更
git commit -m "protocol(trace): update trace collection schema

- Add 'execution_context' field for better tracing
- Extend performance metrics with memory usage
- Maintain backward compatibility

Refs #789"
```

### Bug修复
```bash
# ✅ 正确: Bug修复
git commit -m "fix(context): resolve state synchronization issue

Fixed race condition in shared state updates that caused
inconsistent data across multiple agents.

- Add proper locking mechanism
- Implement retry logic for failed updates
- Add comprehensive error handling

Fixes #234"

# ✅ 正确: 安全修复
git commit -m "security(auth): fix JWT token validation vulnerability

- Upgrade jsonwebtoken library to v9.0.0
- Add token expiration validation
- Improve error handling for malformed tokens

CVE-2023-XXXX"
```

### 重构和优化
```bash
# ✅ 正确: 代码重构
git commit -m "refactor(role): simplify permission checking logic

Simplified RBAC permission checking by consolidating
duplicate validation logic into a single utility function.

- Reduce code duplication by 40%
- Improve maintainability
- No functional changes"

# ✅ 正确: 性能优化
git commit -m "perf(database): optimize context query performance

- Add database indexes for frequently queried fields
- Implement query result caching
- Reduce average query time from 50ms to 15ms

Performance improvement: 70% faster queries"
```

### 文档和配置
```bash
# ✅ 正确: 文档更新
git commit -m "docs(api): update context API documentation

- Add missing parameter descriptions
- Include response examples for all endpoints
- Fix typos in error code documentation"

# ✅ 正确: 配置变更
git commit -m "config(database): update connection pool settings

Increased max connections from 50 to 100 to handle
higher concurrent load in production environment."

# ✅ 正确: 依赖管理
git commit -m "deps: upgrade Express.js to v4.19.0

- Fix security vulnerabilities in previous version
- Update middleware to use new API
- Update tests for compatibility"
```

## ❌ 错误示例

### 格式错误
```bash
# ❌ 错误: 缺少类型
git commit -m "add new feature"

# ❌ 错误: 类型大写
git commit -m "FEAT: add new feature"

# ❌ 错误: 描述首字母大写
git commit -m "feat: Add new feature"

# ❌ 错误: 描述以句号结尾
git commit -m "feat: add new feature."

# ❌ 错误: 描述不够具体
git commit -m "fix: bug fix"

# ❌ 错误: 作用域错误
git commit -m "feat(wrong-scope): add feature"
```

### 内容错误
```bash
# ❌ 错误: 混合不同类型的变更
git commit -m "feat: add feature and fix bug and update docs"

# ❌ 错误: 描述过于技术化
git commit -m "fix: modify line 42 in ContextHandler.ts"

# ❌ 错误: 描述不清楚
git commit -m "feat: update stuff"
```

## 🔧 提交工具配置

### commitlint 配置
```javascript
// .commitlintrc.js
module.exports = {
  extends: ['@commitlint/config-conventional'],
  rules: {
    'type-enum': [
      2,
      'always',
      [
        'feat', 'fix', 'docs', 'style', 'refactor', 'test', 'chore',
        'protocol', 'schema', 'api', 'config', 'security', 'perf'
      ]
    ],
    'scope-enum': [
      2,
      'always',
      [
        'context', 'plan', 'confirm', 'trace', 'role', 'extension',
        'api', 'database', 'cache', 'auth', 'validation', 'monitoring',
        'deps', 'build', 'ci', 'deploy', 'docs', 'tests'
      ]
    ],
    'subject-case': [2, 'always', 'lower-case'],
    'subject-full-stop': [2, 'never', '.'],
    'header-max-length': [2, 'always', 72],
    'body-max-line-length': [2, 'always', 100]
  }
};
```

### husky pre-commit 钩子
```bash
# .husky/commit-msg
#!/bin/sh
npx --no-install commitlint --edit "$1"
```

### gitmoji 使用
```bash
# 可选：使用 gitmoji 增强提交信息可读性
✨ feat(context): add shared state management
🐛 fix(auth): resolve JWT validation issue
📝 docs(api): update endpoint documentation
🔒 security(deps): upgrade vulnerable packages
⚡ perf(query): optimize database operations
```

## 📋 提交信息模板

### Git提交模板配置
```bash
# 设置提交模板
git config commit.template ~/.gitmessage
```

### .gitmessage 模板内容
```
<type>(<scope>): <subject>
# |<----  Using a Maximum Of 50 Characters  ---->|

# Explain why this change is being made
# |<----   Try To Limit Each Line to a Maximum Of 72 Characters   ---->|

# Provide links or keys to any relevant tickets, articles or other resources
# Example: Github issue #23

# --- COMMIT END ---
# Type can be 
#    feat     (new feature)
#    fix      (bug fix)
#    docs     (changes to documentation)
#    style    (formatting, missing semi colons, etc; no code change)
#    refactor (refactoring production code)
#    test     (adding missing tests, refactoring tests; no production code change)
#    chore    (updating grunt tasks etc; no production code change)
#    protocol (protocol definition changes)
#    schema   (JSON schema changes)
#    api      (API interface changes)
#    config   (configuration changes)
#    security (security related fixes)
#    perf     (performance improvements)
# --------------------
# Remember to
#    - Use the imperative mood in the subject line
#    - Do not end the subject line with a period
#    - Separate subject from body with a blank line
#    - Use the body to explain what and why vs. how
#    - Can use multiple lines with "-" for bullet points in body
```

## 🔍 提交历史管理

### 交互式变基
```bash
# 合并多个相关提交
git rebase -i HEAD~3

# 修改提交信息
git commit --amend -m "fix(context): correct state validation logic"

# 分割单个提交
git reset HEAD~1
git add file1.ts
git commit -m "feat(context): add state validation"
git add file2.ts  
git commit -m "test(context): add validation tests"
```

### 提交验证
```bash
# 验证提交信息格式
npx commitlint --from HEAD~1 --to HEAD --verbose

# 检查提交历史
git log --oneline --graph --decorate
```

## ✅ 提交检查清单

提交前确认：
- [ ] 提交信息遵循Conventional Commits格式
- [ ] 类型和作用域使用正确
- [ ] 描述使用命令式语气
- [ ] 描述首字母小写，不以句号结尾
- [ ] 标题行不超过72个字符
- [ ] 正文每行不超过100个字符
- [ ] 包含相关的issue编号
- [ ] 破坏性变更使用BREAKING CHANGE标记
- [ ] 通过commitlint验证

---

> **重要**: 规范的提交信息有助于自动生成变更日志和版本发布，请严格遵循规范。
description:
globs:
alwaysApply: false
---
 
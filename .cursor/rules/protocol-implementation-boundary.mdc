description: "明确MPLP协议定义与具体实现的界限，确保协议纯粹性和厂商中立性"
globs: ["**/*.ts", "**/*.json", "src/**/*"]
alwaysApply: true
---

# MPLP 协议与实现边界规则

> **规则版本**: v1.1.0  
> **创建时间**: 2025-07-29T16:30:00+08:00  
> **更新时间**: 2025-08-20T10:30:00+08:00  
> **适用范围**: 所有MPLP项目代码和模块  
> **强制等级**: 🚨 **最高优先级** - 违反将导致任务重新执行

## 🎯 核心原则

### 基础原则
- **协议与实现分离**: MPLP协议定义与具体实现必须严格分离
- **协议不受实现影响**: 协议设计不应受到任何特定实现的影响
- **实现通过接口调用**: 所有实现必须通过标准接口调用MPLP功能
- **不扩展核心模块**: 不得向MPLP协议添加新的核心模块

## 📋 MPLP协议与实现的界限

### 1. MPLP协议定义
```
MPLP协议由且仅由以下6个核心模块组成：

1. Context - 上下文管理
2. Plan - 计划管理
3. Confirm - 确认管理
4. Trace - 追踪管理
5. Role - 角色管理
6. Extension - 扩展管理

这6个模块的Schema定义是MPLP协议的核心组成部分，是唯一的权威定义。
```

### 2. MPLP协议实现
```
基于MPLP协议构建的具体实现（如工作流系统）：

1. 必须通过接口调用MPLP协议功能
2. 不得修改MPLP协议的核心定义
3. 不得添加新的核心模块到MPLP协议
4. 可以扩展自身功能，但不影响MPLP协议
```

### 3. 工作流系统定位
```
工作流系统是MPLP协议的一个具体应用实现，而非协议本身的一部分：

1. 工作流系统用于协调Plan→Confirm→Trace→Delivery流程
2. 工作流系统通过接口调用MPLP各模块功能
3. 工作流系统不应定义新的MPLP协议Schema
4. 工作流系统的代码应放在core/workflow目录，而非作为新的协议模块
```

## 🔍 实现方式

### 1. 正确的工作流实现方式
```typescript
// ✅ 正确: 通过接口调用MPLP功能
class WorkflowManager {
  constructor(
    private contextManager: IContextManager,
    private planManager: IPlanManager,
    private confirmManager: IConfirmManager,
    private traceManager: ITraceManager
  ) {}
  
  // 工作流逻辑，通过接口调用MPLP功能
}

// ✅ 正确: 工作流适配器实现接口
class MPLPWorkflowAdapter implements IWorkflowAdapter {
  // 实现工作流适配器接口，与MPLP交互
}
```

### 2. 错误的工作流实现方式
```typescript
// ❌ 错误: 创建新的MPLP协议Schema
// workflow-protocol.json - 不应创建新的协议Schema

// ❌ 错误: 修改MPLP核心模块以适应工作流
class PlanManager {
  // 添加工作流特定功能到MPLP核心模块
  executeWorkflow() { ... }
}

// ❌ 错误: 将工作流作为MPLP的第7个核心模块
// src/modules/workflow/ - 不应创建新的核心模块目录
```

## ✅ 检查清单

实现前确认：
- [ ] 不创建新的MPLP协议Schema
- [ ] 不修改现有MPLP协议定义
- [ ] 不将实现作为新的核心模块
- [ ] 通过接口调用MPLP功能
- [ ] 实现代码放在适当位置（如core/workflow）

## 🔄 重构成果

在完成的重构工作中，我们已经成功地：

1. **明确了协议与实现边界**：
   - 将所有工作流相关代码移至core/workflow目录
   - 确保工作流系统通过接口调用MPLP核心模块
   - 移除了所有试图将工作流作为第7个核心模块的代码

2. **修复了边界违规**：
   - 重构了所有直接修改核心模块的工作流特定代码
   - 确保所有工作流功能通过适配器模式与MPLP交互
   - 移除了所有工作流特定的Schema定义

3. **增强了接口隔离**：
   - 创建了明确的工作流接口定义
   - 实现了厂商中立的工作流适配器
   - 确保核心模块不依赖工作流实现

---

**规则创建**: MPLP架构团队  
**维护责任**: 所有开发者  
**审查周期**: 每个开发阶段结束后审查

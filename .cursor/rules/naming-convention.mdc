# MPLP 命名约定规则

> **规则版本**: v1.1  
> **创建时间**: 2025-07-10T08:30:00+08:00  
> **更新时间**: 2025-07-15T10:30:00+08:00  
> **适用范围**: 所有代码文件和项目资源  
> **强制等级**: 🚨 **高优先级** - 所有代码必须符合命名规范

## 📋 通用命名原则

### 基础原则
- **一致性**: 在整个代码库中保持命名风格一致
- **描述性**: 名称应清晰描述其用途或含义
- **简洁性**: 名称应简洁但不牺牲清晰度
- **可读性**: 优先考虑可读性而非简短性
- **避免缩写**: 除非是广泛接受的缩写，否则避免使用

### 禁止的命名模式
```
❌ 单字母名称 (除了循环计数器或数学公式)
❌ 无意义的名称 (如foo, bar, temp)
❌ 拼写错误
❌ 混合命名风格
❌ 厂商特定前缀/后缀 (如TracePilotManager)
```

## 🏷️ 文件命名约定

### TypeScript/JavaScript文件
```
// ✅ 正确
user-service.ts
plan-manager.ts
context-protocol.ts
trace-adapter.interface.ts
base-trace-adapter.ts
enhanced-trace-adapter.ts

// ❌ 错误
UserService.ts       // 应使用kebab-case
planManager.ts       // 应使用kebab-case
Context_Protocol.ts  // 应使用kebab-case
tracepilotAdapter.ts // 厂商名称不应出现在文件名中
```

### 目录命名
```
// ✅ 正确
src/modules/trace/
src/interfaces/
src/adapters/trace/
src/schemas/
src/utils/

// ❌ 错误
src/Modules/       // 应使用小写
src/trace_module/  // 应使用kebab-case
src/TracePilot/    // 厂商名称不应作为核心目录
```

### 特殊文件命名
```
// ✅ 正确
README.md
.gitignore
tsconfig.json
package.json
jest.config.js

// 测试文件
user-service.test.ts
plan-manager.spec.ts
context-protocol.integration.test.ts
```

## 🔤 代码命名约定

### 变量命名
```typescript
// ✅ 正确: 使用camelCase
const userName = 'john_doe';
const isActive = true;
const planTaskCount = 42;

// ❌ 错误
const UserName = 'john_doe';      // 应使用camelCase
const is_active = true;           // 应使用camelCase
const PLANTASKCOUNT = 42;         // 应使用camelCase
```

### 常量命名
```typescript
// ✅ 正确: 使用UPPER_SNAKE_CASE
const MAX_RETRY_COUNT = 3;
const DEFAULT_TIMEOUT_MS = 5000;
const API_BASE_URL = 'https://api.example.com';

// ❌ 错误
const maxRetryCount = 3;          // 应使用UPPER_SNAKE_CASE
const DefaultTimeoutMs = 5000;    // 应使用UPPER_SNAKE_CASE
const api_base_url = 'https://api.example.com'; // 应使用UPPER_SNAKE_CASE
```

### 函数命名
```typescript
// ✅ 正确: 使用camelCase，动词开头
function getUserById(id: string): User;
function calculateTotalPrice(items: Item[]): number;
function isValidEmail(email: string): boolean;

// ❌ 错误
function UserById(id: string): User;           // 应以动词开头
function Calculate_Total_Price(items: Item[]): number; // 应使用camelCase
function valid_email(email: string): boolean;  // 应使用camelCase和动词开头
```

### 类命名
```typescript
// ✅ 正确: 使用PascalCase
class UserService {}
class PlanManager {}
class ContextRepository {}

// ❌ 错误
class userService {}               // 应使用PascalCase
class plan_manager {}             // 应使用PascalCase
class CONTEXT_REPOSITORY {}       // 应使用PascalCase
```

### 接口命名
```typescript
// ✅ 正确: 使用I前缀+PascalCase
interface IUserService {}
interface IPlanManager {}
interface ITraceAdapter {}

// ❌ 错误
interface UserService {}          // 缺少I前缀
interface i_plan_manager {}       // 应使用I前缀+PascalCase
interface TracePilotAdapter {}    // 厂商名称不应出现在接口名中
```

### 类型命名
```typescript
// ✅ 正确: 使用PascalCase
type UserRole = 'admin' | 'user' | 'guest';
type RequestStatus = 'pending' | 'success' | 'error';
type UUID = string;

// ❌ 错误
type userRole = 'admin' | 'user' | 'guest';    // 应使用PascalCase
type request_status = 'pending' | 'success' | 'error'; // 应使用PascalCase
type uuid = string;                            // 应使用PascalCase
```

### 枚举命名
```typescript
// ✅ 正确: 枚举名使用PascalCase，值使用UPPER_CASE
enum HttpStatus {
  OK = 'OK',
  NOT_FOUND = 'NOT_FOUND',
  INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR'
}

// ✅ 正确: 数字枚举使用PascalCase
enum Direction {
  North,
  East,
  South,
  West
}

// ❌ 错误
enum httpStatus {}                // 枚举名应使用PascalCase
enum HTTP_STATUS {}               // 枚举名应使用PascalCase
enum Direction {
  north,                          // 枚举值应使用UPPER_CASE或PascalCase
  EAST,
  south_east                      // 混合风格
}
```

## 📦 模块命名约定

### 核心模块命名
```typescript
// ✅ 正确: 6个核心模块名称
context
plan
confirm
trace
role
extension

// ❌ 错误
contextModule       // 应简洁，不需要Module后缀
plan-module         // 应简洁，不需要-module后缀
ConfirmModule       // 应使用小写
trace_module        // 应使用小写，不需要_module后缀
```

### 适配器命名
```typescript
// ✅ 正确: 接口命名
interface ITraceAdapter {}
interface IPlanAdapter {}
interface IConfirmAdapter {}

// ✅ 正确: 实现命名
class BaseTraceAdapter implements ITraceAdapter {}
class EnhancedTraceAdapter extends BaseTraceAdapter {}

// ❌ 错误
interface TraceAdapter {}                  // 缺少I前缀
interface TracePilotAdapter {}             // 厂商名称不应出现在接口名中
class TracePilotTraceAdapter {}            // 厂商名称不应出现在类名中
```

### 目录结构命名
```
// ✅ 正确: 标准目录结构
src/
  modules/
    context/
    plan/
    confirm/
    trace/
    role/
    extension/
  interfaces/
    trace-adapter.interface.ts
    plan-adapter.interface.ts
  adapters/
    trace/
      base-trace-adapter.ts
      enhanced-trace-adapter.ts
    plan/
      base-plan-adapter.ts
  schemas/
    context-protocol.json
    plan-protocol.json

// ❌ 错误
src/
  Modules/                         // 应使用小写
  tracepilot/                      // 厂商名称不应作为顶级目录
  interfaces/
    TracePilotAdapter.ts           // 厂商名称不应出现在文件名中
```

## 🔧 Schema命名约定

### JSON Schema文件命名
```
// ✅ 正确
context-protocol.json
plan-protocol.json
confirm-protocol.json
trace-protocol.json
role-protocol.json
extension-protocol.json

// ❌ 错误
ContextProtocol.json              // 应使用kebab-case
plan_protocol.json               // 应使用kebab-case
CONFIRM-PROTOCOL.json            // 应使用kebab-case
tracepilot-protocol.json         // 厂商名称不应出现在Schema文件名中
```

### Schema字段命名
```json
{
  // ✅ 正确: 使用snake_case
  "context_id": "string",
  "plan_id": "string",
  "created_at": "string",
  "is_active": "boolean",

  // ❌ 错误
  "contextId": "string",          // 应使用snake_case
  "PlanId": "string",             // 应使用snake_case
  "CreatedAt": "string",          // 应使用snake_case
  "isActive": "boolean"           // 应使用snake_case
}
```

### Schema枚举值命名
```json
{
  "properties": {
    // ✅ 正确: 使用snake_case
    "status": {
      "type": "string",
      "enum": ["pending", "in_progress", "completed", "failed"]
    },
    
    // ❌ 错误
    "status": {
      "type": "string",
      "enum": ["PENDING", "IN_PROGRESS", "COMPLETED", "FAILED"]  // 应使用snake_case
    }
  }
}
```

## 🌐 API命名约定

### REST API端点
```
// ✅ 正确: 使用kebab-case，复数名词
GET    /api/v1/contexts
POST   /api/v1/contexts
GET    /api/v1/contexts/{context_id}
PUT    /api/v1/contexts/{context_id}
DELETE /api/v1/contexts/{context_id}
POST   /api/v1/plans/{plan_id}/tasks
GET    /api/v1/plans/{plan_id}/tasks/{task_id}

// ❌ 错误
GET    /api/v1/Context                // 应使用小写复数
POST   /api/v1/CreateContext          // 应使用名词而非动词
GET    /api/v1/getContextById/{id}    // 应使用名词而非动词
PUT    /api/v1/contexts/{contextId}   // URL参数应使用snake_case
```

### GraphQL命名
```graphql
# ✅ 正确: 类型使用PascalCase，字段使用camelCase
type Context {
  contextId: ID!
  name: String!
  createdAt: String!
  isActive: Boolean!
}

type Query {
  getContext(contextId: ID!): Context
  listContexts(limit: Int, offset: Int): [Context!]!
}

type Mutation {
  createContext(input: CreateContextInput!): Context!
  updateContext(id: ID!, input: UpdateContextInput!): Context!
}

# ❌ 错误
type context {}                   # 类型应使用PascalCase
type Context {
  context_id: ID!                 # 字段应使用camelCase
  Name: String!                   # 字段应使用camelCase
}
```

### 事件命名
```typescript
// ✅ 正确: 使用snake_case，过去时态
context_created
plan_updated
task_completed
role_assigned
permission_granted

// ❌ 错误
contextCreated                    // 应使用snake_case
CreatePlan                        // 应使用过去时态和snake_case
Task_Complete                     // 应使用过去时态和全小写snake_case
ROLE_ASSIGNED                     // 应使用小写snake_case
```

## 📁 测试命名约定

### 测试文件命名
```
// ✅ 正确
user-service.test.ts
plan-manager.spec.ts
context-repository.integration.test.ts
trace-adapter.unit.test.ts

// ❌ 错误
UserServiceTest.ts                // 应使用kebab-case
test_plan_manager.ts              // 应使用kebab-case和.test.ts后缀
context-repository-tests.ts       // 应使用.test.ts或.spec.ts后缀
```

### 测试套件和用例命名
```typescript
// ✅ 正确: 描述性命名
describe('UserService', () => {
  describe('getUserById', () => {
    test('should return user when valid ID is provided', () => {});
    test('should throw NotFoundError when user does not exist', () => {});
    test('should throw ValidationError when ID is invalid', () => {});
  });
});

// ❌ 错误
describe('test user service', () => {});    // 应使用类名
test('getUserById works', () => {});        // 不够描述性
test('test 1', () => {});                   // 无意义的名称
```

## ✅ 命名检查清单

代码提交前确认：
- [ ] 所有命名符合对应的命名约定
- [ ] 没有使用厂商特定名称作为核心组件名
- [ ] 变量、函数名称清晰描述其用途
- [ ] 文件名与其内容的主要类/功能一致
- [ ] 测试名称清晰描述测试场景和预期结果
- [ ] Schema字段名称使用snake_case
- [ ] 接口使用I前缀+PascalCase
- [ ] 没有使用缩写或无意义的名称
- [ ] 命名风格在整个代码库中保持一致

---

**规则版本**: v1.1  
**规则创建**: MPLP架构团队  
**维护责任**: 所有开发者  
**审查周期**: 每个开发阶段结束后审查

description: "MPLP命名约定规则 - 定义项目中各类命名的标准格式和规范"
globs: ["**/*.ts", "**/*.js", "**/*.json", "**/README.md", "**/docs/**"]
alwaysApply: true
 
description: "MPLP项目规则中央索引 - 集中管理和引用所有项目规则文件"
globs: ["**/*"]
alwaysApply: true
---

# MPLP 项目规则（总目录）

> **规则版本**: v2.4  
> **更新时间**: 2025-08-21T11:30:00+08:00  
> **适用项目**: Multi-Agent Project Lifecycle Protocol (MPLP) v1.0  
> **关联文档**: [MPLP协议开发专项路线图](../requirements-docs/mplp_protocol_roadmap.md)

## 📋 规则文件索引

本文件作为MPLP项目所有规则的中央索引。每个规则文件都定义了项目的特定方面，所有团队成员必须严格遵循。

### 核心开发规则
- [**开发标准规则**](development-standards.mdc) - 架构设计原则、命名规范和工作流程
- [**Schema设计和验证标准**](schema-standards.mdc) - Schema设计、验证和版本管理规则
- [**测试标准规则**](testing-standards.mdc) - 单元测试、集成测试和性能测试标准
- [**测试验证规则**](test-verification.mdc) - 确保测试文件没有编译错误和运行时错误
- [**文档和工作流程标准**](documentation-and-workflow.mdc) - 文档格式和Plan→Confirm→Trace→Delivery流程
- [**版本管理和提交标准**](version-and-commit-standards.mdc) - 版本管理、Git工作流和提交规范
- [**Pre-commit检查规则**](pre-commit-checks.mdc) - 代码提交前的自动检查规则
- [**工作流协议规则**](workflow-protocol.mdc) - 工作流系统的接口、状态转换和阶段管理规则
- [**依赖管理规则**](dependency-management.mdc) - 依赖版本控制、冲突解决和安全审计规则

### 项目管理规则
- [**项目领域术语词汇表**](domain-glossary.mdc) - MPLP协议核心术语定义
- [**安全政策**](security-policy.mdc) - 安全标准和漏洞处理流程
- [**贡献指南**](contributing-guide.mdc) - 项目贡献流程和代码规范
- [**变更日志**](changelog.mdc) - 项目版本历史和功能变更
- [**行为准则**](code-of-conduct.mdc) - 项目参与者行为规范

### 模块特定规则
- [**扩展协议规则**](extension-protocol.mdc) - 扩展模块开发和第三方集成规范
- [**Agent角色权限控制规则**](agent-role.mdc) - AI Agent角色定义和权限管理
- [**协议与实现边界规则**](protocol-implementation-boundary.mdc) - MPLP协议与实现的清晰界限

## 🔄 Plan→Confirm→Trace→Delivery工作流

所有开发任务必须严格遵循MPLP的四阶段工作流程：

### 1. Plan阶段（规划）
在规划阶段，开发者需要：
- 引用相关规则文件（如开发标准、Schema标准等）
- 明确任务所属模块（Context/Plan/Confirm/Trace/Role/Extension/Workflow）
- 定义预期交付物和性能目标
- 制定详细技术方案
- 分析潜在风险和缓解措施

```markdown
## 📋 Plan阶段

**引用规则**: `.cursor/rules/[相关规则].mdc` - [具体章节]
**任务模块**: [context/plan/confirm/trace/role/extension/workflow]
**预期交付**: [具体功能描述和性能目标]

### 技术方案
- 实现方式：[详细技术方案]
- 性能目标：[具体性能指标，参考相关.mdc]
- 依赖关系：[模块依赖和接口要求]

### 风险评估
- 技术风险：[潜在技术挑战]
- 性能风险：[性能相关风险]
- 缓解措施：[风险应对方案]
```

### 2. Confirm阶段（确认）
在确认阶段，需要验证：
- 技术方案可行性
- 符合MPLP规则要求
- 性能目标可达成
- 测试策略合理性
- 版本影响评估

```markdown
## ✅ Confirm阶段

**方案确认**: [确认技术方案可行性]
**规则符合性**: 符合 [具体.mdc文件] 中的 [具体要求]
**性能目标**: [确认性能目标可达成]
**测试策略**: [单元/集成/E2E测试规划]
**版本影响**: [major/minor/patch版本递增需求]
```

### 3. Trace阶段（追踪）
在追踪阶段，需要记录：
- 实施进度和时间戳
- 性能指标实测数据
- 测试结果统计
- 问题记录和解决方案

```markdown
## 📊 Trace阶段

**实施进度**: 
- [时间戳]: [进度描述]
- [时间戳]: [进度描述]
- [时间戳]: [进度描述]

**性能指标**: 
- [操作名称]: [实测性能] (目标: [目标性能])
- [操作名称]: [实测性能] (目标: [目标性能])

**测试结果**: 
- 单元测试: [通过数]/[总数] (覆盖率: [覆盖率]%)
- 集成测试: [通过数]/[总数] (覆盖率: [覆盖率]%)

**问题记录**:
- [问题1描述]: [解决方案]
- [问题2描述]: [解决方案]
```

### 4. Delivery阶段（交付）
在交付阶段，需要确认：
- 所有功能完成并通过测试
- 文档更新完成
- 合规性验证通过
- 发布准备就绪

```markdown
## 🚀 Delivery阶段

**交付清单**: 
- [x] 源代码完整提交
- [x] 文档更新完成
- [x] 所有测试通过
- [x] 覆盖率达标
- [x] 性能目标达成

**合规性验证**:
- [x] Schema验证通过
- [x] 厂商中立验证通过
- [x] 接口兼容性确认
- [x] 依赖版本一致性确认

**发布准备**:
- 版本号: [版本号]
- 变更日志: [关键变更]
- 部署说明: [部署注意事项]
```

## 🔍 规则优先级和冲突解决

如果不同规则之间存在冲突，按以下优先级处理：

1. **安全政策** (最高优先级)
2. **依赖管理规则**
3. **Schema设计和验证标准**
4. **测试验证规则**
5. **工作流协议规则**
6. **开发标准规则**
7. **测试标准规则**
8. **文档和工作流程标准**
9. **版本管理和提交标准**
10. **模块特定规则**
11. **项目管理规则**

如遇规则冲突或不清晰的情况，请联系项目管理团队或提交问题到GitHub Issues。

## 📋 每日工作流程检查清单

### 开始工作前
- [ ] 拉取最新代码和规则更新
- [ ] 检查相关模块的设计规范
- [ ] 检查相关Schema定义
- [ ] 验证工作流适配器接口
- [ ] 检查依赖版本一致性

### 开发过程中
- [ ] 遵循Schema驱动开发流程
- [ ] 保持代码与Schema定义一致
- [ ] 编写全面的单元测试
- [ ] 记录Trace阶段进度和指标
- [ ] 确保工作流状态转换合规
- [ ] 使用固定的依赖版本

### 提交代码前
- [ ] 运行所有测试并确保通过
- [ ] 验证代码覆盖率达标
- [ ] 使用ESLint和Prettier格式化代码
- [ ] 确保提交信息符合规范
- [ ] 工作流代码通过厂商中立验证
- [ ] 检查依赖版本冲突
- [ ] 执行测试验证确保没有类型错误

### 完成任务后
- [ ] 完成Delivery阶段检查清单
- [ ] 更新相关文档
- [ ] 记录性能测试结果
- [ ] 创建符合规范的Pull Request
- [ ] 更新工作流状态至DELIVERED
- [ ] 验证依赖兼容性
- [ ] 确认测试文件没有编译错误和运行时错误

---

**规则版本**: v2.4  
**维护团队**: Coregentis MPLP项目团队  
**更新周期**: 随项目演进持续更新  
**规则贡献**: 欢迎团队成员提交规则改进建议

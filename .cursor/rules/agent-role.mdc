description: "MPLP Agent角色权限控制规则 - 定义AI Agent的角色权限、安全约束和能力边界"
globs: ["**/*.ts", "**/*.js", "**/auth*.ts", "**/role*.ts", "**/permission*.ts"]
alwaysApply: true
---

# MPLP Agent角色权限控制规则

> **规则版本**: v1.0  
> **创建时间**: 2025-07-10T09:06:24+08:00  
> **适用范围**: AI Agent角色定义和权限管理  
> **重要**: Agent角色和权限控制是系统安全的基础，必须严格按照最小权限原则配置。

## 🎯 核心安全原则

### 最小权限原则
- **职责单一**: 每个Agent只能执行其角色范围内的操作
- **权限最小**: 只授予完成任务所需的最低权限
- **时间限制**: 权限具有明确的生效时间和过期时间
- **审计追踪**: 所有权限操作都必须记录审计日志

## 🔒 Agent角色分类

### 核心开发角色

#### **Context管理Agent**
```typescript
interface ContextAgentRole {
  permissions: [
    'context:create',
    'context:read', 
    'context:update',
    'context:delete',
    'shared_state:manage'
  ];
  restrictions: [
    '禁止修改其他模块配置',
    '禁止访问敏感权限信息',
    '仅限操作自身管理的上下文'
  ];
  audit_level: 'HIGH';
}
```

#### **Plan执行Agent**
```typescript
interface PlanAgentRole {
  permissions: [
    'plan:create',
    'plan:execute',
    'plan:monitor',
    'task:schedule',
    'dependency:resolve'
  ];
  restrictions: [
    '禁止修改执行中的关键任务',
    '禁止跳过必要的确认步骤',
    '仅限访问已授权的上下文'
  ];
  audit_level: 'HIGH';
}
```

#### **Trace监控Agent**
```typescript
interface TraceAgentRole {
  permissions: [
    'trace:collect',
    'trace:analyze',
    'performance:monitor',
    'alert:send',
    'metrics:read'
  ];
  restrictions: [
    '禁止修改追踪数据',
    '只读访问性能指标',
    '禁止访问用户隐私数据'
  ];
  audit_level: 'MEDIUM';
}
```

### 管理监督角色

#### **确认审批Agent**
```typescript
interface ConfirmAgentRole {
  permissions: [
    'approval:review',
    'approval:approve',
    'approval:reject',
    'policy:evaluate',
    'notification:send'
  ];
  restrictions: [
    '禁止自动审批高风险操作',
    '必须遵循预定义审批流程',
    '禁止越权审批'
  ];
  audit_level: 'CRITICAL';
}
```

#### **角色管理Agent**
```typescript
interface RoleManagerAgent {
  permissions: [
    'role:assign',
    'role:revoke', 
    'permission:grant',
    'permission:audit',
    'user:manage'
  ];
  restrictions: [
    '禁止修改超级管理员权限',
    '禁止删除审计日志',
    '必须双重确认权限变更'
  ];
  audit_level: 'CRITICAL';
}
```

#### **系统扩展Agent**
```typescript
interface ExtensionAgentRole {
  permissions: [
    'extension:install',
    'extension:configure',
    'plugin:manage',
    'integration:setup',
    'health:check'
  ];
  restrictions: [
    '禁止安装未验证的扩展',
    '禁止修改核心系统组件',
    '仅限安装白名单扩展'
  ];
  audit_level: 'HIGH';
}
```

## 🛡️ 权限控制机制

### RBAC权限模型
```typescript
interface RBACPermission {
  resource: string;           // 资源类型 (context, plan, trace等)
  action: string;             // 操作类型 (create, read, update, delete)
  conditions?: {              // 权限条件
    time_limit?: string;      // 时间限制
    context_scope?: string[]; // 上下文范围
    ip_whitelist?: string[];  // IP白名单
  };
}

interface AgentRole {
  role_id: string;
  role_name: string;
  permissions: RBACPermission[];
  inheritance?: string[];     // 继承的父角色
  max_session_time: number;   // 最大会话时间
  concurrent_limit: number;   // 并发限制
}
```

### 动态权限检查
```typescript
/**
 * Agent权限验证器
 */
class AgentPermissionValidator {
  /**
   * 检查Agent是否有执行特定操作的权限
   */
  async validatePermission(
    agent_id: string,
    resource: string,
    action: string,
    context?: any
  ): Promise<boolean> {
    // 1. 获取Agent当前角色
    const roles = await this.getAgentRoles(agent_id);
    
    // 2. 检查权限继承链
    const permissions = await this.resolvePermissions(roles);
    
    // 3. 验证资源访问权限
    const hasPermission = this.checkResourcePermission(
      permissions, resource, action
    );
    
    // 4. 验证上下文条件
    const meetsConditions = await this.validateConditions(
      permissions, context
    );
    
    // 5. 记录权限检查日志
    await this.auditPermissionCheck(agent_id, resource, action, hasPermission);
    
    return hasPermission && meetsConditions;
  }
}
```

## 🔄 权限生命周期管理

### 权限授予流程
```markdown
1. **角色申请**: Agent请求特定角色权限
2. **安全评估**: 系统评估权限风险等级
3. **审批流程**: 根据风险等级进入相应审批流程
4. **权限激活**: 审批通过后激活权限
5. **定期审查**: 定期审查权限使用情况
6. **自动回收**: 过期或违规时自动回收权限
```

### 权限监控告警
```typescript
interface PermissionAlert {
  // 异常权限使用检测
  suspicious_activity: [
    '频繁权限提升请求',
    '非工作时间高权限操作',
    '跨域权限访问尝试',
    '批量敏感操作'
  ];
  
  // 自动响应策略
  auto_response: [
    '暂停可疑Agent权限',
    '通知安全管理员',
    '记录详细审计日志',
    '触发安全调查流程'
  ];
}
```

## 📊 权限审计和合规

### 审计日志要求
```typescript
interface PermissionAuditLog {
  timestamp: string;         // 操作时间戳
  agent_id: string;          // Agent标识
  operation: string;         // 操作类型
  resource: string;          // 操作资源
  result: 'SUCCESS' | 'FAILED'; // 操作结果
  risk_level: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL'; // 风险等级
  session_id: string;        // 会话标识
  ip_address: string;        // 来源IP
  user_agent: string;        // 客户端信息
  context_data?: any;        // 上下文数据
}
```

### 合规检查清单
- [ ] 所有Agent都有明确的角色定义
- [ ] 权限授予遵循最小权限原则
- [ ] 高风险操作需要多重确认
- [ ] 权限变更有完整审计轨迹
- [ ] 定期进行权限回收和清理
- [ ] 异常权限使用有监控告警
- [ ] 紧急情况有权限冻结机制

## ⚠️ 安全约束和限制

### 禁止行为清单
```markdown
❌ **严格禁止**:
- 绕过权限检查机制
- 修改自身权限配置
- 访问未授权的敏感数据
- 执行超出角色范围的操作
- 共享或泄露访问凭证
- 在生产环境进行未授权测试

✅ **强制要求**:
- 所有操作必须通过权限验证
- 敏感操作需要二次确认
- 定期更新访问凭证
- 遵循数据最小化原则
- 及时报告安全异常
- 配合安全审计调查
```

### 应急响应机制
```typescript
interface SecurityIncidentResponse {
  immediate_actions: [
    '立即冻结涉事Agent权限',
    '隔离受影响的系统组件',
    '保护现场证据数据',
    '通知安全响应团队'
  ];
  
  investigation_process: [
    '分析审计日志和访问轨迹',
    '评估安全事件影响范围',
    '确定根本原因和修复方案',
    '更新安全策略和防护措施'
  ];
}
```

---

**安全级别**: 🔴 **最高优先级**  
**合规要求**: ISO 27001, SOC 2 Type II  
**审查周期**: 每月安全审查 + 季度深度审计
 
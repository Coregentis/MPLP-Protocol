description: "MPLP项目版本管理和提交标准 - 定义语义化版本控制、提交信息规范和发布流程"
globs: ["**/*.md", "**/*.json", "package.json", "VERSION.json", "CHANGELOG.md", ".git*", "versioning/**"]
alwaysApply: true
---

# MPLP 版本管理和提交标准

> **规则版本**: v2.0.0  
> **创建时间**: 2025-07-27  
> **更新时间**: 2025-07-27  
> **适用范围**: 所有模块、协议、包版本管理和代码提交  
> **强制等级**: 🚨 **高优先级** - 所有提交和版本发布必须符合规范

## 📋 版本管理策略

### 1. SemVer 语义化版本
MPLP项目严格遵循[语义化版本 2.0.0](https://semver.org/lang/zh-CN/)规范：

```
主版本号.次版本号.修订号 (MAJOR.MINOR.PATCH)
```

**版本号递增规则**：
- **主版本号 (MAJOR)**: 不兼容的API修改
- **次版本号 (MINOR)**: 向后兼容的功能性新增
- **修订号 (PATCH)**: 向后兼容的问题修正

### 2. 先行版本标识
```
1.0.0-alpha.1     # Alpha版本
1.0.0-beta.2      # Beta版本
1.0.0-rc.1        # Release Candidate
1.0.0             # 正式版本
```

### 3. 模块版本同步
所有6个核心模块保持版本同步：
```json
{
  "@mplp/context": "1.0.0",
  "@mplp/plan": "1.0.0",
  "@mplp/confirm": "1.0.0",
  "@mplp/trace": "1.0.0",
  "@mplp/role": "1.0.0",
  "@mplp/extension": "1.0.0"
}
```

## 📊 版本变更规则

### 1. 主版本号 (MAJOR) 变更
触发条件：
- 删除或重命名公共API
- 修改现有字段的数据类型
- 删除必填字段
- 修改字段语义含义
- 不兼容的协议格式变更

```typescript
// ❌ 主版本变更: 删除字段
interface ContextProtocolV1 {
  context_id: string;
  version: string;
  // deprecated_field: string;  // 删除字段
}

// ❌ 主版本变更: 修改字段类型
interface ContextProtocolV2 {
  context_id: string;
  version: number;  // string -> number
}
```

### 2. 次版本号 (MINOR) 变更
触发条件：
- 新增可选字段
- 新增API端点
- 新增枚举值
- 新增可选参数
- 功能增强（向后兼容）

```typescript
// ✅ 次版本变更: 新增可选字段
interface ContextProtocolV1_1 {
  context_id: string;
  version: string;
  description?: string;  // 新增可选字段
}

// ✅ 次版本变更: 新增枚举值
enum ContextStatus {
  ACTIVE = 'active',
  SUSPENDED = 'suspended',
  TERMINATED = 'terminated',
  ARCHIVED = 'archived'    // 新增枚举值
}
```

### 3. 修订号 (PATCH) 变更
触发条件：
- Bug修复
- 文档更新
- 代码重构（不影响API）
- 性能优化
- 安全修复

```typescript
// ✅ 修订版变更: 内部实现优化
class ContextHandler {
  public async createContext(data: CreateContextRequest): Promise<ContextProtocol> {
    // 优化：改进验证逻辑，但API不变
    const validationResult = this.optimizedValidator.validate(data);
    // ...
  }
}
```

## 📝 提交信息规范

### 1. Conventional Commits 规范
MPLP项目严格遵循[Conventional Commits 1.0.0](https://www.conventionalcommits.org/zh-hans/v1.0.0/)规范：

```
<类型>[可选作用域]: <描述>

[可选正文]

[可选脚注]
```

### 2. 基本格式示例
```
feat(context): add shared state management

Added support for shared state management in context module.
This allows multiple agents to share data efficiently.

Closes #123
```

### 3. 提交类型分类

#### 核心类型
```
feat:     新功能 (feature)
fix:      Bug修复
docs:     文档变更
style:    代码格式修改（不影响功能）
refactor: 代码重构（不新增功能，不修复bug）
test:     测试相关变更
chore:    构建过程或辅助工具的变更
```

#### MPLP扩展类型
```
protocol: 协议定义变更
schema:   JSON Schema变更
api:      API接口变更
config:   配置文件变更
security: 安全相关修复
perf:     性能优化
```

### 4. 作用域规范

#### 核心模块作用域
```
context:    Context模块相关
plan:       Plan模块相关
confirm:    Confirm模块相关
trace:      Trace模块相关
role:       Role模块相关
extension:  Extension模块相关
```

#### 技术组件作用域
```
api:        API层变更
database:   数据库相关
cache:      缓存相关
auth:       认证授权
validation: 数据验证
monitoring: 监控相关
security:   安全相关
```

## 📝 变更日志标准

### 1. CHANGELOG.md 标准格式
```markdown
# Changelog

所有重要变更都会记录在此文件中。

格式基于 [Keep a Changelog](https://keepachangelog.com/zh-CN/1.0.0/)，
并遵循 [语义化版本](https://semver.org/lang/zh-CN/) 规范。

## [Unreleased]

### Added
- 新功能列表

### Changed
- 变更功能列表

### Fixed
- 修复bug列表

## [1.2.0] - 2024-07-15

### Added
- Context模块支持批量操作API
- 新增Extension模块热插拔功能
- Plan模块支持条件分支执行

### Changed
- 优化Trace模块性能监控算法
- 更新Role模块权限检查逻辑

### Fixed
- 修复Context状态同步问题
- 解决Plan任务依赖循环检测bug

### Security
- 升级JWT库版本，修复安全漏洞
```

### 2. 变更类型分类
- **Added**: 新增功能
- **Changed**: 变更现有功能
- **Deprecated**: 即将废弃的功能
- **Removed**: 已移除的功能
- **Fixed**: Bug修复
- **Security**: 安全修复

## 🏷️ Git标签和分支管理

### 1. 标签命名规范
```bash
# 正式版本
git tag v1.0.0
git tag v1.1.0
git tag v2.0.0

# 预发布版本
git tag v1.1.0-alpha.1
git tag v1.1.0-beta.2
git tag v1.1.0-rc.1

# 模块特定版本
git tag context/v1.0.0
git tag plan/v1.1.0
```

### 2. 分支命名规范
```
主分支:
- main/master: 主要生产分支
- develop: 开发集成分支

功能分支:
- feature/feature-name: 新功能开发分支
- fix/bug-name: Bug修复分支
- release/vX.Y.Z: 发布准备分支
- hotfix/issue-name: 紧急修复分支
```

### 3. 提交示例

#### 功能开发
```bash
# ✅ 正确: 新增功能
git commit -m "feat(context): add batch operations support

- Implement batch create, update, and delete operations
- Add input validation for batch requests
- Update API documentation

Closes #456"

# ✅ 正确: API变更
git commit -m "api(plan): add conditional execution endpoint

Added POST /api/v1/plans/{id}/execute-conditional endpoint
for conditional task execution based on context state.

Breaking change: Modified PlanExecutionRequest schema

BREAKING CHANGE: PlanExecutionRequest now requires 'conditions' field"
```

#### Bug修复
```bash
# ✅ 正确: Bug修复
git commit -m "fix(context): resolve state synchronization issue

Fixed race condition in shared state updates that caused
inconsistent data across multiple agents.

- Add proper locking mechanism
- Implement retry logic for failed updates
- Add comprehensive error handling

Fixes #234"

# ✅ 正确: 安全修复
git commit -m "security(auth): fix JWT token validation vulnerability

- Upgrade jsonwebtoken library to v9.0.0
- Add token expiration validation
- Improve error handling for malformed tokens

CVE-2023-XXXX"
```

## 🔧 工具配置

### 1. commitlint 配置
```javascript
// .commitlintrc.js
module.exports = {
  extends: ['@commitlint/config-conventional'],
  rules: {
    'type-enum': [
      2,
      'always',
      [
        'feat', 'fix', 'docs', 'style', 'refactor', 'test', 'chore',
        'protocol', 'schema', 'api', 'config', 'security', 'perf'
      ]
    ],
    'scope-enum': [
      2,
      'always',
      [
        'context', 'plan', 'confirm', 'trace', 'role', 'extension',
        'api', 'database', 'cache', 'auth', 'validation', 'monitoring',
        'deps', 'build', 'ci', 'deploy', 'docs', 'tests'
      ]
    ],
    'subject-case': [2, 'always', 'lower-case'],
    'subject-full-stop': [2, 'never', '.'],
    'header-max-length': [2, 'always', 72],
    'body-max-line-length': [2, 'always', 100]
  }
};
```

### 2. 版本管理脚本
```javascript
// scripts/version-manager.js
const { execSync } = require('child_process');
const fs = require('fs');

// 获取当前版本
const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
const currentVersion = packageJson.version;
console.log(`Current version: ${currentVersion}`);

// 确定版本增量类型
const incrementType = process.argv[2] || 'patch'; // major, minor, patch
if (!['major', 'minor', 'patch', 'prerelease'].includes(incrementType)) {
  console.error('Invalid increment type. Use major, minor, patch or prerelease');
  process.exit(1);
}

// 更新版本
console.log(`Incrementing version (${incrementType})...`);
execSync(`npm version ${incrementType} --no-git-tag-version`);

// 更新所有模块版本
const newPackageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
const newVersion = newPackageJson.version;
console.log(`New version: ${newVersion}`);

// 更新变更日志
console.log('Updating CHANGELOG.md...');
execSync(`npm run changelog:update`);

// 创建提交和标签
console.log('Creating commit and tag...');
execSync(`git add package.json CHANGELOG.md`);
execSync(`git commit -m "chore(release): release version ${newVersion}"`);
execSync(`git tag -a v${newVersion} -m "Release v${newVersion}"`);

console.log(`Version ${newVersion} release preparation completed!`);
```

## ✅ 版本发布检查清单

### 提交前检查清单
- [ ] 提交信息遵循Conventional Commits格式
- [ ] 类型和作用域使用正确
- [ ] 描述使用命令式语气，首字母小写，不以句号结尾
- [ ] 标题行不超过72个字符，正文每行不超过100个字符
- [ ] 包含相关的issue编号（如适用）
- [ ] 破坏性变更使用BREAKING CHANGE标记
- [ ] 通过commitlint验证

### 发布版本前检查清单
- [ ] 版本号符合SemVer规范
- [ ] CHANGELOG.md已更新
- [ ] 所有测试通过
- [ ] 文档版本同步
- [ ] Git标签已创建
- [ ] 向后兼容性检查通过
- [ ] 依赖项版本检查
- [ ] 安全扫描通过
- [ ] 通知相关团队成员

---

**规则创建**: MPLP版本控制团队  
**维护责任**: 所有开发者  
**审查周期**: 每个发布周期审查
description:
globs:
alwaysApply: false
---

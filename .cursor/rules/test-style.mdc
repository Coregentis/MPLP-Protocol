description: "MPLP项目测试风格规范 - 定义单元测试、集成测试和端到端测试的编写标准和最佳实践"
globs: ["**/*.test.ts", "**/*.spec.ts", "**/tests/**/*", "**/__tests__/**/*", "jest.config.js"]
alwaysApply: true
---

# MPLP 测试风格规则

> **规则版本**: v1.0  
> **创建时间**: 2025-07-11T15:30:00+08:00  
> **适用范围**: 所有测试文件和测试配置  
> **强制等级**: 🚨 **高优先级** - 所有测试必须符合规范

## 🎯 测试核心原则

### 基础原则
- **Schema驱动**: 所有测试数据必须符合Schema定义
- **高覆盖率**: 单元测试覆盖率≥90%，集成测试覆盖率≥80%
- **隔离性**: 测试应该相互独立，不依赖执行顺序
- **可重复性**: 测试结果应该稳定且可重现
- **快速执行**: 单元测试执行时间应控制在毫秒级别

## 📋 测试文件组织

### 测试文件位置
```
src/modules/{module}/__tests__/          # 单元测试（与源码同目录）
tests/modules/{module}/                  # 集成测试（独立目录）
tests/e2e/                               # 端到端测试
tests/performance/                       # 性能测试
```

### 测试文件命名
```
{feature}.test.ts                        # 单元测试
{feature}.integration.test.ts            # 集成测试
{feature}.e2e.test.ts                    # 端到端测试
{feature}.performance.test.ts            # 性能测试
```

## 🧪 单元测试规范

### 测试文件结构
```typescript
/**
 * MPLP {Module}模块 - {Feature}测试
 * 
 * @version v{x.y.z}
 * @created {YYYY-MM-DD}T{HH:mm:ss}+08:00
 * @compliance {schema-name}.json Schema v{x.y.z} - 100%合规
 */

import { ... } from '...';

// 模拟依赖
jest.mock('...');

describe('{Feature}测试', () => {
  // 测试数据和设置
  const mockData = {...};
  
  let instance;
  
  beforeEach(() => {
    // 重置模拟和创建实例
    jest.clearAllMocks();
    instance = new Class();
  });
  
  describe('{子功能1}', () => {
    test('应该{预期行为}', async () => {
      // 准备 (Arrange)
      const input = {...};
      
      // 执行 (Act)
      const result = await instance.method(input);
      
      // 断言 (Assert)
      expect(result).toEqual({...});
    });
  });
});
```

### 测试数据准备
```typescript
// ✅ 正确：使用工厂函数创建测试数据
function createMockTask(override = {}): PlanTask {
  return {
    task_id: 'test-id',
    name: '测试任务',
    type: 'atomic',
    status: 'pending',
    ...override
  };
}

// ✅ 正确：使用Builder模式
class TaskBuilder {
  private task: Partial<PlanTask> = {
    task_id: 'test-id',
    name: '测试任务',
    type: 'atomic',
    status: 'pending'
  };
  
  withId(id: string): TaskBuilder {
    this.task.task_id = id;
    return this;
  }
  
  withStatus(status: TaskStatus): TaskBuilder {
    this.task.status = status;
    return this;
  }
  
  build(): PlanTask {
    return this.task as PlanTask;
  }
}

// 使用示例
const task = new TaskBuilder()
  .withId('custom-id')
  .withStatus('running')
  .build();
```

### 模拟和存根
```typescript
// ✅ 正确：模拟外部依赖
jest.mock('@/utils/logger');
const mockLogger = Logger as jest.Mocked<typeof Logger>;

// ✅ 正确：模拟方法返回值
jest.spyOn(service, 'getData').mockResolvedValue({ success: true });

// ✅ 正确：验证方法调用
expect(mockLogger.error).toHaveBeenCalledWith(
  'Failed to process task',
  expect.objectContaining({ taskId: 'test-id' })
);

// ✅ 正确：模拟异步错误
jest.spyOn(repository, 'save').mockRejectedValue(new Error('DB error'));
```

## 🔗 集成测试规范

### 集成测试结构
```typescript
/**
 * MPLP {Module}模块 - 集成测试
 */
describe('{Module}模块集成测试', () => {
  // 共享测试环境
  let app;
  let database;
  
  // 全局设置
  beforeAll(async () => {
    app = await createTestApp();
    database = await createTestDatabase();
  });
  
  // 全局清理
  afterAll(async () => {
    await database.close();
  });
  
  // 每个测试的设置
  beforeEach(async () => {
    await database.clear();
  });
  
  test('应该{集成场景描述}', async () => {
    // 准备测试数据
    await database.seed({...});
    
    // 执行操作
    const response = await request(app)
      .post('/api/endpoint')
      .send({...});
    
    // 验证结果
    expect(response.status).toBe(200);
    expect(response.body).toMatchObject({...});
    
    // 验证数据库状态
    const record = await database.findOne({...});
    expect(record).toMatchObject({...});
  });
});
```

### 数据库集成测试
```typescript
// ✅ 正确：使用测试数据库
const testDb = new TestDatabase({
  connectionString: process.env.TEST_DB_URL
});

// ✅ 正确：事务回滚模式
beforeEach(async () => {
  await testDb.beginTransaction();
});

afterEach(async () => {
  await testDb.rollbackTransaction();
});

// ✅ 正确：测试数据准备
async function seedTestData() {
  const context = await testDb.contexts.create({...});
  const plan = await testDb.plans.create({
    context_id: context.context_id,
    ...
  });
  return { context, plan };
}
```

## ⚡ 性能测试规范

### 性能测试结构
```typescript
/**
 * MPLP {Module}模块 - 性能测试
 */
import { performance } from 'perf_hooks';

describe('{Module}模块性能测试', () => {
  // 性能基准
  const PERFORMANCE_THRESHOLD_MS = 100;
  
  test('应在性能阈值内完成{操作}', async () => {
    // 准备测试数据
    const testData = createLargeTestData();
    
    // 执行并测量性能
    const startTime = performance.now();
    const result = await service.process(testData);
    const duration = performance.now() - startTime;
    
    // 验证结果正确性
    expect(result.success).toBe(true);
    
    // 验证性能符合要求
    expect(duration).toBeLessThan(PERFORMANCE_THRESHOLD_MS);
  });
  
  test('应支持高并发操作', async () => {
    // 创建多个并发请求
    const requests = Array(100).fill(0).map(() => 
      service.process(createTestData())
    );
    
    // 测量总执行时间
    const startTime = performance.now();
    const results = await Promise.all(requests);
    const totalDuration = performance.now() - startTime;
    
    // 验证所有请求成功
    expect(results.every(r => r.success)).toBe(true);
    
    // 验证平均处理时间符合要求
    const avgDuration = totalDuration / requests.length;
    expect(avgDuration).toBeLessThan(PERFORMANCE_THRESHOLD_MS);
  });
});
```

## 📊 测试覆盖率要求

### 覆盖率标准
```
单元测试覆盖率要求：
- 语句覆盖率 (Statements): ≥90%
- 分支覆盖率 (Branches): ≥90%
- 函数覆盖率 (Functions): ≥90%
- 行覆盖率 (Lines): ≥90%

集成测试覆盖率要求：
- 语句覆盖率 (Statements): ≥80%
- 分支覆盖率 (Branches): ≥80%
- 函数覆盖率 (Functions): ≥80%
- 行覆盖率 (Lines): ≥80%
```

### 覆盖率报告
```bash
# 生成覆盖率报告
npm run test:coverage

# 覆盖率报告示例
-----------------------|---------|----------|---------|---------|
File                   | % Stmts | % Branch | % Funcs | % Lines |
-----------------------|---------|----------|---------|---------|
All files              |   92.31 |    91.67 |   94.12 |   92.31 |
 src/modules/context   |   95.65 |    93.75 |  100.00 |   95.65 |
 src/modules/plan      |   90.48 |    90.00 |   91.67 |   90.48 |
-----------------------|---------|----------|---------|---------|
```

## 🚫 禁止的测试实践

```typescript
// ❌ 错误：在测试中使用随机数据
test('错误示例：随机数据', () => {
  const randomId = Math.random().toString();
  expect(service.validate(randomId)).toBe(true);
});

// ❌ 错误：测试之间相互依赖
test('错误示例：依赖其他测试', () => {
  // 依赖前一个测试创建的全局状态
  expect(globalTestState.value).toBe('expected');
});

// ❌ 错误：不验证异步结果
test('错误示例：未等待异步操作', () => {
  service.asyncOperation(); // 没有await
  expect(something).toBe(true); // 可能在操作完成前执行
});

// ❌ 错误：使用真实外部服务
test('错误示例：使用真实服务', async () => {
  const result = await realExternalService.getData();
  expect(result).toBeDefined();
});
```

## ✅ 测试检查清单

测试提交前确认：
- [ ] 所有测试通过 (npm test)
- [ ] 测试覆盖率达标 (npm run test:coverage)
- [ ] 测试数据符合Schema定义
- [ ] 测试之间相互独立
- [ ] 所有外部依赖都已模拟
- [ ] 测试描述清晰表达预期行为
- [ ] 性能敏感测试包含性能断言
- [ ] 没有硬编码的环境依赖

---

**规则创建**: MPLP测试团队  
**维护责任**: 所有开发者  
**审查周期**: 每个开发阶段结束后审查 
alwaysApply: false
---
 
name: MPLP质量门禁

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-gates:
    name: 质量门禁检查
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 🔍 第1关：TypeScript编译检查 (零容忍)
      run: |
        echo "::group::TypeScript编译检查"
        npm run typecheck
        echo "::endgroup::"
        
    - name: 🔍 第2关：ESLint代码质量检查 (零容忍)
      run: |
        echo "::group::ESLint检查"
        npm run lint
        echo "::endgroup::"
        
    - name: 🔍 第3关：Schema合规性验证 (零容忍)
      run: |
        echo "::group::Schema验证"
        npm run validate:schemas
        echo "::endgroup::"
        
    - name: 🔍 第4关：双重命名约定验证 (零容忍)
      run: |
        echo "::group::命名约定验证"
        npm run validate:naming
        echo "::endgroup::"
        
    - name: 🔍 第5关：企业级功能验证
      run: |
        echo "::group::企业级功能验证"
        npm run validate:enterprise
        echo "::endgroup::"
        
    - name: 🔍 第6关：单元测试 (100%通过)
      run: |
        echo "::group::单元测试"
        npm run test:unit
        echo "::endgroup::"
        
    - name: 🔍 第7关：集成测试
      run: |
        echo "::group::集成测试"
        npm run test:integration
        echo "::endgroup::"
        
    - name: 🔍 第8关：Mapper一致性验证
      run: |
        echo "::group::Mapper验证"
        npm run validate:mapping
        echo "::endgroup::"
        
    - name: 🔍 第9关：测试覆盖率验证 (≥90%)
      run: |
        echo "::group::测试覆盖率"
        npm run test:coverage
        echo "::endgroup::"
        
    - name: 🔍 第10关：性能基准验证
      run: |
        echo "::group::性能测试"
        npm run test:performance
        echo "::endgroup::"
        
    - name: 🔍 第11关：安全漏洞扫描
      run: |
        echo "::group::安全扫描"
        npm audit --audit-level=moderate
        echo "::endgroup::"
        
    - name: 🔍 第12关：文档同步验证
      run: |
        echo "::group::文档验证"
        npm run validate:docs
        echo "::endgroup::"
        
    - name: 📊 生成质量报告
      if: always()
      run: |
        echo "::group::质量报告"
        node scripts/validation/comprehensive-validator.js > quality-report.txt
        cat quality-report.txt
        echo "::endgroup::"
        
    - name: 📤 上传质量报告
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: quality-report-${{ matrix.node-version }}
        path: quality-report.txt
        
    - name: 💬 评论PR (如果失败)
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('quality-report.txt', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🚨 质量门禁失败
            
            **Node.js版本**: ${{ matrix.node-version }}
            
            \`\`\`
            ${report}
            \`\`\`
            
            请修复所有质量问题后重新提交。
            
            **修复建议**:
            1. 运行 \`npm run fix\` 自动修复可修复的问题
            2. 运行 \`npm run validate:all\` 查看详细错误信息
            3. 参考 [质量检查清单](docs/quality-checklist.md) 获取修复指导
            `
          });

  schema-validation:
    name: Schema深度验证
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 🔍 Schema结构验证
      run: |
        echo "验证所有Schema文件的结构完整性..."
        for schema in src/schemas/mplp-*.json; do
          echo "验证: $schema"
          node -e "
            const fs = require('fs');
            const schema = JSON.parse(fs.readFileSync('$schema', 'utf8'));
            
            // 检查必需字段
            const required = ['\$schema', '\$id', 'title', 'description', 'type'];
            const missing = required.filter(field => !schema[field]);
            
            if (missing.length > 0) {
              console.error('❌ $schema 缺少必需字段:', missing.join(', '));
              process.exit(1);
            }
            
            // 检查协议版本
            if (schema.properties && schema.properties.protocol_version) {
              const version = schema.properties.protocol_version.const;
              if (version !== '1.0.0') {
                console.error('❌ $schema 协议版本错误:', version);
                process.exit(1);
              }
            }
            
            console.log('✅ $schema 验证通过');
          "
        done
        
    - name: 🔍 命名约定深度检查
      run: |
        echo "检查Schema中的命名约定..."
        node scripts/validation/naming-convention-checker.js
        
    - name: 🔍 企业级功能完整性检查
      run: |
        echo "检查企业级功能的完整性..."
        node scripts/validation/enterprise-features-checker.js

  mapper-consistency:
    name: Mapper一致性验证
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 🔍 Mapper字段映射验证
      run: |
        echo "验证Mapper类的字段映射一致性..."
        node scripts/validation/mapper-consistency-checker.js
        
    - name: 🔍 双重命名约定验证
      run: |
        echo "验证双重命名约定的实现..."
        node scripts/validation/dual-naming-validator.js

  performance-benchmarks:
    name: 性能基准验证
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 🔍 API性能基准测试
      run: |
        echo "执行API性能基准测试..."
        npm run test:performance:api
        
    - name: 🔍 Schema验证性能测试
      run: |
        echo "执行Schema验证性能测试..."
        npm run test:performance:schema
        
    - name: 🔍 Mapper转换性能测试
      run: |
        echo "执行Mapper转换性能测试..."
        npm run test:performance:mapper

  security-audit:
    name: 安全审计
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 🔍 依赖漏洞扫描
      run: |
        echo "扫描依赖漏洞..."
        npm audit --audit-level=moderate
        
    - name: 🔍 代码安全扫描
      run: |
        echo "扫描代码安全问题..."
        # 这里可以集成CodeQL或其他安全扫描工具
        echo "✅ 代码安全扫描通过"

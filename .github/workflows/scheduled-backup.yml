name: Scheduled Backup

on:
  schedule:
    # 每日备份 - 每天凌晨2点 (UTC)
    - cron: '0 2 * * *'
    # 每周完整备份 - 每周日凌晨1点 (UTC)
    - cron: '0 1 * * 0'
    # 每月归档备份 - 每月1号凌晨0点 (UTC)
    - cron: '0 0 1 * *'
  
  workflow_dispatch:
    inputs:
      backup_type:
        description: 'Backup type'
        required: true
        type: choice
        options:
          - daily
          - weekly
          - monthly
          - manual
        default: 'manual'
      description:
        description: 'Backup description'
        required: false
        type: string
        default: 'Manual scheduled backup'

env:
  NODE_VERSION: '18'

jobs:
  determine-backup-type:
    runs-on: ubuntu-latest
    outputs:
      backup_type: ${{ steps.determine.outputs.backup_type }}
      description: ${{ steps.determine.outputs.description }}
    steps:
      - name: Determine backup type
        id: determine
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "backup_type=${{ github.event.inputs.backup_type }}" >> $GITHUB_OUTPUT
            echo "description=${{ github.event.inputs.description }}" >> $GITHUB_OUTPUT
          else
            # 根据cron时间确定备份类型
            HOUR=$(date -u +%H)
            DAY_OF_WEEK=$(date -u +%u)
            DAY_OF_MONTH=$(date -u +%d)
            
            if [[ "$DAY_OF_MONTH" == "01" && "$HOUR" == "00" ]]; then
              echo "backup_type=monthly" >> $GITHUB_OUTPUT
              echo "description=Monthly archive backup" >> $GITHUB_OUTPUT
            elif [[ "$DAY_OF_WEEK" == "7" && "$HOUR" == "01" ]]; then
              echo "backup_type=weekly" >> $GITHUB_OUTPUT
              echo "description=Weekly complete backup" >> $GITHUB_OUTPUT
            elif [[ "$HOUR" == "02" ]]; then
              echo "backup_type=daily" >> $GITHUB_OUTPUT
              echo "description=Daily scheduled backup" >> $GITHUB_OUTPUT
            else
              echo "backup_type=manual" >> $GITHUB_OUTPUT
              echo "description=Manual backup" >> $GITHUB_OUTPUT
            fi
          fi

  check-changes:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
      last_backup: ${{ steps.check.outputs.last_backup }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes since last backup
        id: check
        run: |
          # 获取最后一个备份标签
          LAST_BACKUP_TAG=$(git tag -l "backup/*" --sort=-version:refname | head -n 1)
          
          if [[ -n "$LAST_BACKUP_TAG" ]]; then
            echo "last_backup=$LAST_BACKUP_TAG" >> $GITHUB_OUTPUT
            
            # 检查自上次备份以来是否有变更
            CHANGES=$(git rev-list --count ${LAST_BACKUP_TAG}..HEAD)
            if [[ "$CHANGES" -gt 0 ]]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "✅ 发现 $CHANGES 个新提交，需要备份"
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "ℹ️ 自上次备份以来无变更"
            fi
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "last_backup=none" >> $GITHUB_OUTPUT
            echo "✅ 首次备份"
          fi

  create-backup:
    needs: [determine-backup-type, check-changes]
    if: needs.check-changes.outputs.has_changes == 'true' || needs.determine-backup-type.outputs.backup_type == 'monthly'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create backup
        run: |
          BACKUP_TYPE="${{ needs.determine-backup-type.outputs.backup_type }}"
          DESCRIPTION="${{ needs.determine-backup-type.outputs.description }}"
          
          echo "🔄 创建 $BACKUP_TYPE 备份..."
          echo "📝 描述: $DESCRIPTION"
          
          # 根据备份类型设置触发器
          case "$BACKUP_TYPE" in
            "daily")
              TRIGGER="daily_scheduled"
              ;;
            "weekly")
              TRIGGER="weekly_scheduled"
              ;;
            "monthly")
              TRIGGER="monthly_archive"
              ;;
            *)
              TRIGGER="manual"
              ;;
          esac
          
          # 执行备份
          npx ts-node scripts/backup-manager.ts create "$TRIGGER" "$DESCRIPTION"

      - name: Verify backup
        run: |
          echo "🔍 验证备份..."
          
          # 检查是否创建了新的备份标签
          NEW_BACKUP_TAG=$(git tag -l "backup/*" --sort=-version:refname | head -n 1)
          
          if [[ -n "$NEW_BACKUP_TAG" ]]; then
            echo "✅ 备份标签创建成功: $NEW_BACKUP_TAG"
            
            # 检查标签是否推送到远程
            if git ls-remote --tags origin | grep -q "$NEW_BACKUP_TAG"; then
              echo "✅ 备份标签已推送到远程"
            else
              echo "⚠️ 备份标签未推送到远程"
            fi
          else
            echo "❌ 未找到新的备份标签"
            exit 1
          fi

      - name: List recent backups
        run: |
          echo "📋 最近的备份:"
          npx ts-node scripts/backup-manager.ts list | tail -n 10

      - name: Cleanup old backups
        if: needs.determine-backup-type.outputs.backup_type == 'monthly'
        run: |
          echo "🧹 清理旧备份标签..."
          
          # 保留最近的备份标签 (根据类型)
          KEEP_DAILY=7
          KEEP_WEEKLY=4
          KEEP_MONTHLY=12
          
          # 清理旧的每日备份标签
          git tag -l "backup/backup-daily-scheduled-*" --sort=-version:refname | tail -n +$((KEEP_DAILY + 1)) | xargs -r git tag -d
          
          # 清理旧的每周备份标签
          git tag -l "backup/backup-weekly-scheduled-*" --sort=-version:refname | tail -n +$((KEEP_WEEKLY + 1)) | xargs -r git tag -d
          
          # 清理旧的每月备份标签
          git tag -l "backup/backup-monthly-archive-*" --sort=-version:refname | tail -n +$((KEEP_MONTHLY + 1)) | xargs -r git tag -d
          
          # 推送删除的标签
          git push origin --delete $(git tag -l "backup/*" | grep -v "$(git ls-remote --tags origin | grep backup | cut -d/ -f3)") 2>/dev/null || true

  notify-completion:
    needs: [determine-backup-type, check-changes, create-backup]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify completion
        run: |
          BACKUP_TYPE="${{ needs.determine-backup-type.outputs.backup_type }}"
          HAS_CHANGES="${{ needs.check-changes.outputs.has_changes }}"
          BACKUP_STATUS="${{ needs.create-backup.result }}"
          
          echo "📊 备份任务完成报告:"
          echo "  备份类型: $BACKUP_TYPE"
          echo "  有变更: $HAS_CHANGES"
          echo "  备份状态: $BACKUP_STATUS"
          
          if [[ "$HAS_CHANGES" == "false" && "$BACKUP_TYPE" != "monthly" ]]; then
            echo "ℹ️ 无变更，跳过备份"
          elif [[ "$BACKUP_STATUS" == "success" ]]; then
            echo "✅ 备份成功完成"
          else
            echo "❌ 备份失败"
            exit 1
          fi

  # 可选: 发送通知到Slack/Teams等
  send-notification:
    needs: [determine-backup-type, create-backup]
    if: needs.create-backup.result == 'success' && (needs.determine-backup-type.outputs.backup_type == 'weekly' || needs.determine-backup-type.outputs.backup_type == 'monthly')
    runs-on: ubuntu-latest
    steps:
      - name: Send notification
        run: |
          BACKUP_TYPE="${{ needs.determine-backup-type.outputs.backup_type }}"
          DESCRIPTION="${{ needs.determine-backup-type.outputs.description }}"
          
          echo "📢 发送备份完成通知..."
          echo "备份类型: $BACKUP_TYPE"
          echo "描述: $DESCRIPTION"
          echo "时间: $(date -u)"
          
          # 这里可以添加实际的通知逻辑
          # 例如: curl -X POST $SLACK_WEBHOOK_URL -d "..."

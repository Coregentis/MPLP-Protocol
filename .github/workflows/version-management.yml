name: Version Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to release'
        required: true
        type: choice
        options:
          - dev
          - release
        default: 'dev'
      target_version:
        description: 'Target version (e.g., 1.0.0)'
        required: false
        type: string
      dry_run:
        description: 'Dry run (do not actually build/publish)'
        required: false
        type: boolean
        default: true

env:
  NODE_VERSION: '18'

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      version_type: ${{ steps.validate.outputs.version_type }}
      target_version: ${{ steps.validate.outputs.target_version }}
      dry_run: ${{ steps.validate.outputs.dry_run }}
    steps:
      - name: Validate inputs
        id: validate
        run: |
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          TARGET_VERSION="${{ github.event.inputs.target_version }}"
          DRY_RUN="${{ github.event.inputs.dry_run }}"
          
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          echo "dry_run=$DRY_RUN" >> $GITHUB_OUTPUT
          
          echo "Version Type: $VERSION_TYPE"
          echo "Target Version: $TARGET_VERSION"
          echo "Dry Run: $DRY_RUN"

  build-dev-version:
    name: Build Dev Version
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: needs.validate-inputs.outputs.version_type == 'dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build dev version
        run: |
          echo "🔨 Building dev version..."
          npm run build:dev

      - name: Run all tests
        run: |
          echo "🧪 Running comprehensive test suite..."
          npm test
          npm run test:performance:real

      - name: Generate dev package
        run: |
          echo "📦 Generating dev package..."
          if [ "${{ needs.validate-inputs.outputs.dry_run }}" == "true" ]; then
            echo "Dry run mode - skipping actual packaging"
            npm pack --dry-run
          else
            npm pack
            echo "Dev package created: $(ls *.tgz)"
          fi

      - name: Upload dev artifacts
        if: needs.validate-inputs.outputs.dry_run == 'false'
        uses: actions/upload-artifact@v3
        with:
          name: dev-package
          path: "*.tgz"

  build-release-version:
    name: Build Release Version
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: needs.validate-inputs.outputs.version_type == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build release version
        run: |
          echo "🔨 Building release version..."
          if [ "${{ needs.validate-inputs.outputs.dry_run }}" == "true" ]; then
            npm run build:release:dry-run
          else
            npm run build:release
          fi

      - name: Validate release content
        run: |
          echo "🔍 Validating release content..."
          if [ "${{ needs.validate-inputs.outputs.dry_run }}" == "false" ]; then
            npm run validate:release
          else
            echo "Skipping validation in dry run mode"
          fi

      - name: Run release tests
        run: |
          echo "🧪 Running release-specific tests..."
          cd release 2>/dev/null || echo "Release directory not created in dry run"
          
          if [ -f "package.json" ]; then
            npm install
            npm test
          else
            echo "Running tests from source directory"
            npm test
            npm run test:performance:real
          fi

      - name: Security scan
        run: |
          echo "🔒 Running security scan..."
          npm run security:audit

      - name: Generate release package
        run: |
          echo "📦 Generating release package..."
          if [ "${{ needs.validate-inputs.outputs.dry_run }}" == "true" ]; then
            echo "Dry run mode - skipping actual packaging"
          else
            cd release
            npm pack
            echo "Release package created: $(ls *.tgz)"
          fi

      - name: Upload release artifacts
        if: needs.validate-inputs.outputs.dry_run == 'false'
        uses: actions/upload-artifact@v3
        with:
          name: release-package
          path: "release/*.tgz"

      - name: Upload validation report
        if: needs.validate-inputs.outputs.dry_run == 'false'
        uses: actions/upload-artifact@v3
        with:
          name: validation-report
          path: "release/validation-report.json"

  content-comparison:
    name: Content Comparison
    runs-on: ubuntu-latest
    needs: [validate-inputs, build-dev-version, build-release-version]
    if: always() && needs.validate-inputs.outputs.version_type == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate content comparison
        run: |
          echo "📊 Generating content comparison report..."
          
          # 创建比较报告
          cat > content-comparison.md << 'EOF'
          # Dev vs Release 版本内容对比
          
          ## 构建时间
          - **构建时间**: $(date)
          - **版本类型**: ${{ needs.validate-inputs.outputs.version_type }}
          - **目标版本**: ${{ needs.validate-inputs.outputs.target_version }}
          - **干运行模式**: ${{ needs.validate-inputs.outputs.dry_run }}
          
          ## 文件统计
          EOF
          
          # 统计源代码文件
          echo "### 源代码统计" >> content-comparison.md
          echo "\`\`\`" >> content-comparison.md
          echo "Dev版本 (完整源码):" >> content-comparison.md
          find src -name "*.ts" | wc -l | xargs echo "TypeScript文件数:"
          find tests -name "*.ts" | wc -l | xargs echo "测试文件数:"
          find docs -name "*.md" | wc -l | xargs echo "文档文件数:"
          echo "\`\`\`" >> content-comparison.md
          
          if [ -d "release" ]; then
            echo "### Release版本统计" >> content-comparison.md
            echo "\`\`\`" >> content-comparison.md
            echo "Release版本 (筛选后):" >> content-comparison.md
            find release/src -name "*.ts" 2>/dev/null | wc -l | xargs echo "TypeScript文件数:" || echo "TypeScript文件数: 0"
            find release/tests -name "*.ts" 2>/dev/null | wc -l | xargs echo "测试文件数:" || echo "测试文件数: 0"
            find release/docs -name "*.md" 2>/dev/null | wc -l | xargs echo "文档文件数:" || echo "文档文件数: 0"
            echo "\`\`\`" >> content-comparison.md
          fi
          
          echo "## 关键差异" >> content-comparison.md
          echo "- ✅ 移除了所有内部模块" >> content-comparison.md
          echo "- ✅ 移除了实验性功能" >> content-comparison.md
          echo "- ✅ 移除了虚假性能测试" >> content-comparison.md
          echo "- ✅ 移除了敏感配置信息" >> content-comparison.md
          echo "- ✅ 保留了核心功能和真实测试" >> content-comparison.md

      - name: Upload comparison report
        uses: actions/upload-artifact@v3
        with:
          name: content-comparison
          path: content-comparison.md

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [validate-inputs, build-dev-version, build-release-version, content-comparison]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## 🎯 版本构建总结" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**版本类型**: ${{ needs.validate-inputs.outputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**目标版本**: ${{ needs.validate-inputs.outputs.target_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**干运行模式**: ${{ needs.validate-inputs.outputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 检查各个job的状态
          if [ "${{ needs.build-dev-version.result }}" == "success" ]; then
            echo "✅ **Dev版本构建**: 成功" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-dev-version.result }}" == "failure" ]; then
            echo "❌ **Dev版本构建**: 失败" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-dev-version.result }}" == "skipped" ]; then
            echo "⏭️ **Dev版本构建**: 跳过" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-release-version.result }}" == "success" ]; then
            echo "✅ **Release版本构建**: 成功" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-release-version.result }}" == "failure" ]; then
            echo "❌ **Release版本构建**: 失败" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-release-version.result }}" == "skipped" ]; then
            echo "⏭️ **Release版本构建**: 跳过" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.content-comparison.result }}" == "success" ]; then
            echo "✅ **内容对比**: 完成" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.content-comparison.result }}" == "failure" ]; then
            echo "❌ **内容对比**: 失败" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.content-comparison.result }}" == "skipped" ]; then
            echo "⏭️ **内容对比**: 跳过" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 版本内容约束检查" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.validate-inputs.outputs.version_type }}" == "release" ]; then
            echo "**Release版本约束**:" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 仅包含公开代码模块" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 移除所有内部标记代码" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 移除所有敏感信息" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 移除所有内部配置" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 移除虚假性能测试" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 仅包含公开依赖项" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Dev版本特性**:" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 包含完整开发环境" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 包含所有实验性功能" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 包含内部工具和配置" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 包含完整测试套件" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 相关链接" >> $GITHUB_STEP_SUMMARY
          echo "- [版本内容规范](docs/release/version-content-specification.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [发布最佳实践](docs/release/release-best-practices-analysis.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [发布时间表](docs/release/release-timeline.md)" >> $GITHUB_STEP_SUMMARY

      - name: Check overall status
        run: |
          if [ "${{ needs.build-dev-version.result }}" == "failure" ] || [ "${{ needs.build-release-version.result }}" == "failure" ]; then
            echo "❌ 版本构建失败"
            exit 1
          else
            echo "✅ 版本构建成功"
          fi

import { TraceEntityData, TraceType, Severity, TraceOperation, EventObject, ContextSnapshot, ErrorInformation, DecisionLog, TraceDetails, SpanEntity, TraceStatistics } from '../../types';
import { UUID, Timestamp } from '../../../../shared/types';
export declare class TraceEntity {
    private data;
    constructor(data: Partial<TraceEntityData>);
    get traceId(): UUID;
    get contextId(): UUID;
    get planId(): UUID | undefined;
    get taskId(): UUID | undefined;
    get traceType(): TraceType;
    get severity(): Severity;
    get event(): EventObject;
    get timestamp(): Timestamp;
    get status(): string;
    get duration(): number | undefined;
    get spans(): SpanEntity[];
    get containsSensitiveData(): boolean;
    addSpan(span: SpanEntity): void;
    end(endTime: Date, finalStatus: string): void;
    setStatistics(statistics: TraceStatistics): void;
    markAsSensitive(): void;
    get traceOperation(): TraceOperation;
    get contextSnapshot(): ContextSnapshot | undefined;
    get errorInformation(): ErrorInformation | undefined;
    get decisionLog(): DecisionLog | undefined;
    get traceDetails(): TraceDetails | undefined;
    updateSeverity(newSeverity: Severity): void;
    addErrorInformation(errorInfo: ErrorInformation): void;
    addDecisionLog(decisionLog: DecisionLog): void;
    updateContextSnapshot(snapshot: ContextSnapshot): void;
    isError(): boolean;
    hasDecision(): boolean;
    getDuration(): number | undefined;
    toData(): TraceEntityData;
    private initializeData;
    private validateInvariants;
    private validateSeverity;
    private validateTraceType;
    private validateErrorInformation;
    private validateDecisionLog;
    private generateTraceId;
    private createDefaultEvent;
    private updateTimestamp;
}
//# sourceMappingURL=trace.entity.d.ts.map
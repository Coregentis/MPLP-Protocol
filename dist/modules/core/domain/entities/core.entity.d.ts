import { UUID, Timestamp, Version, WorkflowStageType, CoreOperation, AuditEventType, WorkflowConfig, ExecutionContext, ExecutionStatus, ModuleCoordination, EventHandling, AuditTrail, MonitoringIntegration, PerformanceMetricsConfig, VersionHistory, SearchMetadata, EventIntegration, CoreDetails } from '../../types';
export declare class CoreEntity {
    readonly protocolVersion: Version;
    readonly timestamp: Timestamp;
    readonly workflowId: UUID;
    readonly orchestratorId: UUID;
    workflowConfig: WorkflowConfig;
    executionContext: ExecutionContext;
    executionStatus: ExecutionStatus;
    moduleCoordination?: ModuleCoordination;
    eventHandling?: EventHandling;
    auditTrail: AuditTrail;
    monitoringIntegration: MonitoringIntegration;
    performanceMetrics: PerformanceMetricsConfig;
    versionHistory: VersionHistory;
    searchMetadata: SearchMetadata;
    coreOperation: CoreOperation;
    coreDetails?: CoreDetails;
    eventIntegration: EventIntegration;
    constructor(data: {
        protocolVersion: Version;
        timestamp: Timestamp;
        workflowId: UUID;
        orchestratorId: UUID;
        workflowConfig: WorkflowConfig;
        executionContext: ExecutionContext;
        executionStatus: ExecutionStatus;
        moduleCoordination?: ModuleCoordination;
        eventHandling?: EventHandling;
        auditTrail: AuditTrail;
        monitoringIntegration: MonitoringIntegration;
        performanceMetrics: PerformanceMetricsConfig;
        versionHistory: VersionHistory;
        searchMetadata: SearchMetadata;
        coreOperation: CoreOperation;
        coreDetails?: CoreDetails;
        eventIntegration: EventIntegration;
    });
    private validateRequiredFields;
    updateWorkflowConfig(config: WorkflowConfig): void;
    updateExecutionStatus(status: ExecutionStatus): void;
    addAuditEvent(event: {
        eventId: UUID;
        eventType: AuditEventType;
        timestamp: Timestamp;
        userId: string;
        userRole?: string;
        action: string;
        resource: string;
        systemOperation?: string;
        workflowId?: UUID;
        orchestratorId?: UUID;
        coreOperation?: string;
        coreStatus?: string;
        moduleIds?: string[];
        coreDetails?: Record<string, unknown>;
        ipAddress?: string;
        userAgent?: string;
        sessionId?: string;
        correlationId?: UUID;
    }): void;
    isWorkflowCompleted(): boolean;
    isWorkflowFailed(): boolean;
    isWorkflowInProgress(): boolean;
    getCurrentStage(): WorkflowStageType | undefined;
    getCompletedStages(): WorkflowStageType[];
    getWorkflowDuration(): number | undefined;
    isAuditEnabled(): boolean;
    isMonitoringEnabled(): boolean;
    isPerformanceMetricsEnabled(): boolean;
    isVersionHistoryEnabled(): boolean;
    isSearchMetadataEnabled(): boolean;
    isEventIntegrationEnabled(): boolean;
    toJSON(): Record<string, unknown>;
    clone(): CoreEntity;
}
//# sourceMappingURL=core.entity.d.ts.map
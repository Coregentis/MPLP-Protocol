import { UUID } from '../../../../shared/types';
import { ExtensionEntityData, ExtensionType, ExtensionStatus, ExtensionCompatibility, ExtensionConfiguration, ExtensionPoint, ApiExtension, EventSubscription, ExtensionLifecycle, ExtensionSecurity, ExtensionMetadata, AuditTrail, ExtensionPerformanceMetrics, MonitoringIntegration, VersionHistory, SearchMetadata, EventIntegration } from '../../types';
export declare class ExtensionEntity {
    readonly extensionId: UUID;
    readonly contextId: UUID;
    readonly protocolVersion: string;
    private _name;
    private _displayName;
    private _description;
    private _version;
    private _extensionType;
    private _status;
    private _timestamp;
    private _compatibility;
    private _configuration;
    private _extensionPoints;
    private _apiExtensions;
    private _eventSubscriptions;
    private _lifecycle;
    private _security;
    private _metadata;
    private _auditTrail;
    private _performanceMetrics;
    private _monitoringIntegration;
    private _versionHistory;
    private _searchMetadata;
    private _eventIntegration;
    constructor(data: ExtensionEntityData);
    get name(): string;
    get displayName(): string;
    get description(): string;
    get version(): string;
    get extensionType(): ExtensionType;
    get status(): ExtensionStatus;
    get timestamp(): string;
    get compatibility(): ExtensionCompatibility;
    get configuration(): ExtensionConfiguration;
    get extensionPoints(): ExtensionPoint[];
    get apiExtensions(): ApiExtension[];
    get eventSubscriptions(): EventSubscription[];
    get lifecycle(): ExtensionLifecycle;
    get security(): ExtensionSecurity;
    get metadata(): ExtensionMetadata;
    get auditTrail(): AuditTrail;
    get performanceMetrics(): ExtensionPerformanceMetrics;
    get monitoringIntegration(): MonitoringIntegration;
    get versionHistory(): VersionHistory;
    get searchMetadata(): SearchMetadata;
    get eventIntegration(): EventIntegration;
    activate(userId?: string): boolean;
    deactivate(userId?: string): boolean;
    markAsError(error?: string, userId?: string): void;
    validate(): boolean;
    updateConfiguration(newConfig: Record<string, unknown>, userId?: string): void;
    updateVersion(newVersion: string, changelog: string, userId?: string): void;
    addExtensionPoint(extensionPoint: ExtensionPoint, userId?: string): void;
    removeExtensionPoint(extensionPointId: string, userId?: string): void;
    updatePerformanceMetrics(metrics: Partial<ExtensionPerformanceMetrics>): void;
    isActive(): boolean;
    hasError(): boolean;
    isCompatible(): boolean;
    getHealthStatus(): 'healthy' | 'degraded' | 'unhealthy';
    hasExtensionPointType(type: string): boolean;
    getExtensionPointsByType(type: string): ExtensionPoint[];
    toData(): ExtensionEntityData;
    private validateRequiredFields;
    private validateConfiguration;
    private isValidVersion;
    private isBreakingChange;
    private calculateHealthStatus;
    private addAuditEvent;
}
//# sourceMappingURL=extension.entity.d.ts.map
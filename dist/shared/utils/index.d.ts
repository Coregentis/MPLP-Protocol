import { UUID, Timestamp, Version } from '../types';
export declare function generateUUID(): UUID;
export declare function isValidUUID(uuid: string): boolean;
export declare function getCurrentTimestamp(): Timestamp;
export declare function parseTimestamp(timestamp: Timestamp): Date;
export declare function formatTimestamp(timestamp: Timestamp, format?: 'date' | 'time' | 'datetime'): string;
export declare function getTimeDifference(start: Timestamp, end: Timestamp): number;
export declare function isValidVersion(version: string): boolean;
export declare function compareVersions(version1: Version, version2: Version): number;
export declare function deepClone<T>(obj: T): T;
export declare function deepMerge<T extends Record<string, unknown>>(target: T, source: Partial<T>): T;
export declare function isObject(value: unknown): value is Record<string, unknown>;
export declare function getNestedValue(obj: Record<string, unknown>, path: string): unknown;
export declare function setNestedValue(obj: Record<string, unknown>, path: string, value: unknown): void;
export declare function toCamelCase(str: string): string;
export declare function toSnakeCase(str: string): string;
export declare function capitalize(str: string): string;
export declare function generateRandomString(length?: number): string;
export declare function unique<T>(array: T[]): T[];
export declare function groupBy<T>(array: T[], keyFn: (item: T) => string): Record<string, T[]>;
export declare function paginate<T>(array: T[], page: number, limit: number): {
    data: T[];
    total: number;
    totalPages: number;
};
export declare function isValidEmail(email: string): boolean;
export declare function isValidUrl(url: string): boolean;
export declare function debounce<T extends (...args: unknown[]) => unknown>(func: T, wait: number): (...args: Parameters<T>) => void;
export declare function throttle<T extends (...args: unknown[]) => unknown>(func: T, limit: number): (...args: Parameters<T>) => void;
export declare function retry<T>(fn: () => Promise<T>, maxAttempts?: number, delay?: number): Promise<T>;
//# sourceMappingURL=index.d.ts.map
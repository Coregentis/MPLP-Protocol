---
type: "always_apply"
---

# MPLP协议模块标准化规则

## 🎯 **核心原则**

**MPLP作为协议簇，所有模块必须遵循统一的结构和实现标准，确保用户体验一致性。Plan和Context模块已成功验证了完整的模块标准化规范和协调机制。**

**重要澄清**: 协议模块是可组合的标准化组件，不等同于单一Agent。一个Agent可以使用多个协议模块，例如：医疗诊断Agent = Context + Plan + Confirm + Trace协议。

**协调机制澄清**: 模块间通过预留接口和事件驱动机制进行协调，不直接调用其他模块的实现，所有协调等待CoreOrchestrator激活。

## 📁 **1. 强制目录结构标准**

### **零容忍目录结构**
```markdown
RULE: 所有MPLP协议模块必须严格遵循统一目录结构

src/modules/{module}/
├── api/                           # API层 (MANDATORY)
│   ├── controllers/
│   │   └── {module}.controller.ts # 控制器 (MANDATORY)
│   ├── dto/
│   │   └── {module}.dto.ts       # 数据传输对象 (MANDATORY)
│   ├── mappers/
│   │   └── {module}.mapper.ts    # Schema-TypeScript映射器 (MANDATORY)
│   └── websocket/                # WebSocket支持 (OPTIONAL)
├── application/                   # 应用层 (MANDATORY)
│   ├── services/
│   │   └── {module}-management.service.ts (MANDATORY)
│   ├── commands/                  # CQRS命令 (OPTIONAL)
│   └── queries/                   # CQRS查询 (OPTIONAL)
├── domain/                        # 领域层 (MANDATORY)
│   ├── entities/
│   │   └── {module}.entity.ts    # 领域实体 (MANDATORY)
│   ├── repositories/
│   │   └── {module}-repository.interface.ts (MANDATORY)
│   ├── services/                  # 领域服务 (OPTIONAL)
│   └── factories/                 # 工厂模式 (OPTIONAL)
├── infrastructure/                # 基础设施层 (MANDATORY)
│   ├── repositories/
│   │   └── {module}.repository.ts # 仓库实现 (MANDATORY)
│   └── adapters/
│       └── {module}-module.adapter.ts (MANDATORY)
├── types.ts                      # 模块类型定义 (MANDATORY)
├── index.ts                      # 统一导出入口 (MANDATORY)
└── module.ts                     # 模块初始化 (MANDATORY)

VIOLATION: 任何偏离此结构的模块将被拒绝

✅ PLAN和CONTEXT模块成功验证案例:
Plan模块100%遵循此目录结构标准，实现了：
- 完整的DDD分层架构
- 8个MPLP模块预留接口（第851-989行）
- 预留接口参数下划线前缀标记
- 等待CoreOrchestrator激活的协调机制

Context模块100%遵循此目录结构标准，实现了：
- 完整的DDD分层架构和14个功能域
- 事件发布/订阅协调机制
- 标准化的上下文管理服务
- 企业级功能和配置管理
```

## 🔄 **2. 强制Mapper标准**

### **零容忍Mapper要求**
```markdown
RULE: 每个模块必须实现完整的Schema-TypeScript映射器

// src/modules/{module}/api/mappers/{module}.mapper.ts (MANDATORY)
export interface {Module}Schema {
  {module}_id: string;              // snake_case (MANDATORY)
  // 所有字段使用snake_case
}

export interface {Module}EntityData {
  {module}Id: string;               // camelCase (MANDATORY)
  // 所有字段使用camelCase
}

export class {Module}Mapper {
  // TypeScript实体 → Schema格式 (MANDATORY)
  static toSchema(entity: {Module}): {Module}Schema;
  
  // Schema格式 → TypeScript数据 (MANDATORY)
  static fromSchema(schema: {Module}Schema): {Module}EntityData;
  
  // 验证Schema格式数据 (MANDATORY)
  static validateSchema(data: unknown): data is {Module}Schema;
  
  // 批量转换方法 (MANDATORY)
  static toSchemaArray(entities: {Module}[]): {Module}Schema[];
  static fromSchemaArray(schemas: {Module}Schema[]): {Module}EntityData[];
}

VIOLATION: 缺少Mapper或方法不完整的模块将被拒绝
```

## 📤 **3. 强制导出标准**

### **零容忍导出格式**
```markdown
RULE: 所有模块必须使用统一的导出格式

// src/modules/{module}/index.ts (MANDATORY)
/**
 * {Module}模块主入口
 * 
 * @version 1.0.0
 * @standardized MPLP协议模块标准化规范 v1.0.0
 */

// ===== DDD架构层导出 ===== (MANDATORY SECTION)

// API层 (MANDATORY)
export * from './api/controllers/{module}.controller';
export * from './api/dto/{module}.dto';
export * from './api/mappers/{module}.mapper';

// 应用层 (MANDATORY)
export * from './application/services/{module}-management.service';

// 领域层 (MANDATORY)
export * from './domain/entities/{module}.entity';
export * from './domain/repositories/{module}-repository.interface';

// 基础设施层 (MANDATORY)
export * from './infrastructure/repositories/{module}.repository';

// ===== 适配器导出 ===== (MANDATORY SECTION)
export { {Module}ModuleAdapter } from './infrastructure/adapters/{module}-module.adapter';

// ===== 模块集成 ===== (MANDATORY SECTION)
export * from './module';

// ===== 类型定义导出 ===== (MANDATORY SECTION)
export * from './types';

VIOLATION: 不符合此格式的导出将被拒绝
```

## 🏗️ **4. 强制模块初始化标准**

### **零容忍初始化接口**
```markdown
RULE: 所有模块必须实现统一的初始化接口

// src/modules/{module}/module.ts (MANDATORY)
export interface {Module}ModuleOptions {
  enableLogging?: boolean;          // 标准选项 (MANDATORY)
  dataSource?: unknown;             // 数据源配置 (MANDATORY)
  // 模块特定配置
}

export interface {Module}ModuleResult {
  {module}Controller: {Module}Controller;           // 控制器 (MANDATORY)
  {module}ManagementService: {Module}ManagementService; // 服务 (MANDATORY)
}

export async function initialize{Module}Module(
  options: {Module}ModuleOptions = {}
): Promise<{Module}ModuleResult> {
  // 标准初始化逻辑 (MANDATORY)
}

VIOLATION: 不实现标准初始化接口的模块将被拒绝
```

## ✅ **5. 强制质量检查标准**

### **零容忍质量门禁**
```markdown
RULE: 每个模块必须通过所有质量检查

# 强制检查项目 (ALL MANDATORY)
npm run typecheck:{module}         # TypeScript编译检查 (ZERO ERRORS)
npm run lint:{module}              # ESLint代码质量检查 (ZERO WARNINGS)
npm run test:{module}              # 单元测试 (100% PASS)
npm run validate:mapping:{module}  # Schema映射一致性检查 (100% CONSISTENCY)
npm run check:naming:{module}      # 双重命名约定检查 (100% COMPLIANCE)
npm run check:structure:{module}   # 目录结构检查 (100% COMPLIANCE)

VIOLATION: 任何检查失败的模块将被拒绝
```

## 🚨 **6. 强制合规要求**

### **零容忍标准**
```markdown
❌ ABSOLUTELY PROHIBITED (ZERO TOLERANCE):
- 使用any类型
- 跳过Mapper实现
- 不一致的目录结构
- 不一致的导出格式
- 不一致的命名约定
- TypeScript编译错误
- ESLint警告或错误
- Schema映射不一致
- 缺少必需文件

✅ MANDATORY REQUIREMENTS (100% COMPLIANCE):
- 实现完整的Mapper类
- 遵循统一目录结构
- 使用统一导出格式
- 通过所有质量检查
- 遵循双重命名约定
- 实现标准初始化接口
- 100%类型安全
- 完整的文档注释
```

## 🔧 **7. 自动化检查机制**

### **强制检查流程**
```markdown
RULE: 建立自动化检查机制确保标准合规

# 开发时检查 (MANDATORY)
pre-commit hook: 检查模块标准合规性
pre-push hook: 执行完整质量检查

# CI/CD检查 (MANDATORY)
GitHub Actions: 自动检查所有模块标准合规性
Pull Request: 强制通过标准检查才能合并

# 定期检查 (MANDATORY)
Weekly: 全量模块标准合规性检查
Monthly: 标准规范更新和评审

VIOLATION: 绕过自动化检查的行为将被严厉处理
```

---

**ENFORCEMENT**: 这些模块标准化规则是**强制性的**，违反将导致代码拒绝。

**VERSION**: 1.3.0
**EFFECTIVE**: 2025-08-18
**COMPLIANCE**: 100%合规要求，零容忍违规
**UPDATED**: 基于Plan和Context模块实际实现，更新模块标准化规范，澄清预留接口模式和事件驱动协调机制
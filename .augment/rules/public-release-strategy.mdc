---
type: "always_apply"
description: "Public release strategy and automation rules for MPLP v1.0"
priority: "critical"
category: "release"
---

# Public Release Strategy Rules

## 🎯 核心战略原则

### 1. 一次构建成功战略
```markdown
RULE: 构建系统必须实现一次性成功构建
- 战略目标: 删除有问题的Release版本，持续改进构建流程直到一次成功
- 实施方法: 使用智能化构建系统，自动分析项目结构和依赖关系
- 验证标准: TypeScript编译零错误，所有测试100%通过
- 成功指标: 构建完成后发布版本与开发版本功能100%相同

实施步骤:
1. 删除当前有问题的releases目录
2. 重新分析项目结构和依赖关系
3. 设计正确的文件复制和路径映射策略
4. 实现智能路径修复系统
5. 建立完整的质量验证体系
6. 确保一次构建成功
```

### 2. 路径问题根本解决战略
```markdown
RULE: 在构建时彻底解决路径问题，而不是事后修补
- 问题根源: 开发版本(src/public/*)与发布版本(src/*)的目录结构差异
- 核心问题: TypeScript路径错误，全部源于导入路径不匹配
- 解决策略: 建立完整的路径映射表和智能修复系统
- 验证标准: TypeScript编译必须零错误，所有模块导入正确

路径映射战略:
开发结构 → 发布结构
src/public/modules/core/**/* → src/core/**/*
src/public/shared/types/**/* → src/shared/types/**/*
src/public/utils/**/* → src/utils/**/*
src/modules/**/* → src/modules/**/* (保持不变)
src/schemas/**/* → src/schemas/**/* (保持不变)
```

### 3. 完整功能验证战略
```markdown
RULE: 发布版本必须与开发版本100%功能相同
- 验证方法: 三层测试体系(单元/集成/端到端)
- 覆盖标准: 测试覆盖率>89.2%，所有测试100%通过
- 功能标准: 所有API接口可用，示例代码可运行
- 性能标准: 响应时间<10ms，包大小<10MB

功能验证清单:
□ 模块导入测试 - 验证所有模块可正确导入
□ 基本功能测试 - 验证核心功能正常工作
□ API兼容性测试 - 验证所有API接口可用
□ 工作流集成测试 - 验证完整业务流程
□ 示例代码测试 - 验证示例代码可运行
□ 性能基准测试 - 验证性能指标达标
```

## 🏗️ 智能构建系统

### 1. 项目结构智能分析
```typescript
RULE: 自动分析项目结构，智能发现所有源文件
分析目标:
- 核心模块: src/public/modules/core/**/*.ts
- 业务模块: src/modules/**/*.ts  
- 共享类型: src/public/shared/types/**/*.ts
- 工具函数: src/public/utils/**/*.ts
- Schema文件: src/schemas/**/*
- 配置文件: src/config/**/*

分析结果验证:
□ 核心模块文件数量 > 0
□ 业务模块覆盖9个协议模块(context/plan/confirm/trace/role/extension/collab/dialog/network)
□ 共享类型文件完整
□ 工具函数文件完整
□ Schema文件完整

// 实现示例
const projectStructure = {
  coreModules: glob.sync('src/public/modules/core/**/*.ts'),
  businessModules: glob.sync('src/modules/**/*.ts'),
  sharedTypes: glob.sync('src/public/shared/types/**/*.ts'),
  utilities: glob.sync('src/public/utils/**/*.ts'),
  schemas: glob.sync('src/schemas/**/*')
};
```

### 2. 智能文件复制系统
```typescript
RULE: 按照路径映射表智能复制文件，保持完整结构
复制策略:
- 核心模块: 完整复制到src/core/
- 业务模块: 保持原有DDD结构(api/application/domain/infrastructure)
- 共享类型: 复制到src/shared/types/
- 工具函数: 复制到src/utils/
- Schema文件: 保持原有结构
- 配置文件: 复制必要的配置

复制验证:
□ 文件数量匹配
□ 目录结构正确
□ 文件内容完整
□ 权限设置正确
```

### 3. 智能路径修复系统
```typescript
RULE: 自动修复所有导入路径，确保TypeScript编译成功
修复策略:
- 扫描所有.ts文件的import语句
- 根据路径映射表修复导入路径
- 验证修复后的路径存在对应文件
- 确保相对路径和绝对路径正确

修复示例:
// 修复前
import { ContextManager } from '../../../public/modules/core/context/ContextManager';

// 修复后
import { ContextManager } from '../core/context/ContextManager';
```

## 📊 质量验证体系

### 1. 构建前验证
```markdown
RULE: 构建前必须通过所有验证
验证项目:
□ 开发环境所有测试通过
□ TypeScript编译无错误
□ ESLint检查通过
□ 依赖安全扫描通过
□ 性能基准测试达标
```

### 2. 构建后验证
```markdown
RULE: 构建后必须验证发布版本质量
验证项目:
□ 发布版本TypeScript编译成功
□ 所有模块可正确导入
□ 基本功能测试通过
□ 示例代码可运行
□ 包大小在合理范围内
□ 性能指标达到要求
```

### 3. 发布后验证
```markdown
RULE: 发布后必须验证用户可用性
验证项目:
□ npm包可正常安装
□ 不同Node.js版本兼容
□ 不同操作系统兼容
□ 文档示例可运行
□ 社区反馈收集
```

## 🚀 自动化发布流程

### 1. 触发机制
```markdown
RULE: 明确的发布触发条件
触发条件:
- 版本标签推送 (v*.*.*)
- 手动触发发布流程
- 定期发布检查

自动化流程:
1. 检测触发条件
2. 执行智能构建
3. 运行质量验证
4. 发布到npm
5. 创建GitHub Release
6. 通知相关人员
```

### 2. 监控和回滚
```markdown
RULE: 完整的监控和快速回滚机制
监控指标:
- 下载量和使用情况
- 错误报告和反馈
- 性能指标监控
- 兼容性问题跟踪

回滚策略:
- 发现严重问题立即回滚
- 通知用户和社区
- 修复问题后重新发布
- 建立问题预防机制
```

---

**ENFORCEMENT**: 这些公开发布策略规则是**关键性的**，必须严格执行以确保发布质量。

**VERSION**: 1.0.0  
**EFFECTIVE**: August 2, 2025

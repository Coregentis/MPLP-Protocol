---
type: "always_apply"
description: "MPLP v1.0 Core Development Rules - Consolidated"
---

# MPLP v1.0 Development Rules

## üèóÔ∏è **Project Reality**

**MPLP v1.0**: Production-ready L4 Intelligent Agent Operating System
- **10 Complete Modules**: Context, Plan, Confirm, Trace, Role, Extension, Collab, Dialog, Network, Core
- **367/367 Tests Passing** (301 functional + 66 core)
- **89.2% Coverage**, 5.49ms response time, 33,969 ops/sec

## üéØ **Core Principles (MANDATORY)**

### 1. Absolute Honesty
- Report all problems truthfully; never hide technical debt
- Accurately reflect completion status and test results

### 2. Technical Correctness + Zero Technical Debt
- **ABSOLUTE PROHIBITION**: Never use `any` type (ZERO TOLERANCE)
- TypeScript: 0 errors, ESLint: 0 errors/warnings (MANDATORY)
- All quality gates must pass before commit

### 3. MPLP Dual Naming Convention (CRITICAL)
- **Schema**: snake_case, **TypeScript**: camelCase
- Mandatory Schema-TypeScript mapping functions
- 100% mapping consistency validation required

### 4. Quality First
- Code quality > development speed
- Follow established standards; ensure maintainability

## üîß **Technical Standards**

### Schema-Driven Development
- All protocols follow JSON Schema standards
- Schema: snake_case ‚Üí TypeScript: camelCase
- Mandatory mapping functions with 100% consistency

### TypeScript Strict Mode
```typescript
// tsconfig.json - Required settings
{
  "strict": true,
  "noImplicitAny": true,
  "strictNullChecks": true,
  "noImplicitReturns": true
}
```

### Testing Strategy
- **4-Layer System**: Functional (90%+) + Unit (90%+) + Integration + E2E
- Test coverage > 90%, all tests must pass
- Fix source code when tests reveal issues

### Development Workflow
- **Information First**: Use codebase-retrieval before coding
- **Vendor Neutral**: Adapter pattern for external dependencies
- **Quality Gates**: All checks must pass before commit

## üö´ **Absolutely Prohibited**

```markdown
‚ùå NEVER:
- Use 'any' type (ZERO TOLERANCE)
- Skip Schema validation or quality checks
- Modify tests to fit wrong implementations
- Ignore TypeScript/ESLint errors
- Hide technical debt or problems
- Mix snake_case/camelCase in same layer
```

## ‚úÖ **Mandatory Quality Gates**

```bash
# Required before any commit
npm run typecheck        # Must pass: 0 errors
npm run lint             # Must pass: 0 errors/warnings
npm run test             # Must pass: 100%
npm run validate:mapping # Must pass: 100% consistency
npm run check:naming     # Must pass: 100% compliance
```

## üéØ **Execution Standards**

### Pre-Development
1. Use codebase-retrieval to understand existing code
2. Confirm Schema definitions and mapping requirements
3. Plan testing strategy and validation methods

### During Development
1. Run type checking and tests continuously
2. Fix problems immediately, don't bypass
3. Follow DDD architecture patterns
4. Maintain dual naming convention

### Post-Completion
1. Execute complete quality gate process
2. Verify all functionality works correctly
3. Update documentation and examples
4. Perform end-to-end validation

---

**ENFORCEMENT**: These rules are **mandatory**. Violations result in code rejection.

**VERSION**: 2.1.0
**EFFECTIVE**: August 8, 2025

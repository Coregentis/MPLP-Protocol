---
type: "always_apply"
description: "Testing strategy rules for MPLP v1.0 - L4 Intelligent Agent Operating System"
---

# Testing Strategy Rules - MPLP Proven Methodology

## 🏗️ **MPLP v1.0 Testing Context**

**CRITICAL**: MPLP v1.0 has **301 functional scenario tests + 66 core tests with 89.2% coverage** across 10 complete modules. All testing must maintain this production-grade quality standard.

**PROVEN METHODOLOGY**: This testing strategy has been successfully validated through complete testing of all 10 MPLP modules, discovering and fixing 12 critical source code issues.

## 🎯 **核心理念：测试的根本目的**

### **测试的最高原则**
```markdown
RULE: 测试的根本目的是发现并修复源代码问题，确保项目在生产环境中正常运行

核心价值观：
1. 发现源代码问题 - 而不是绕过问题
2. 基于实际实现 - 而不是凭空生成
3. 从用户角度验证 - 而不是技术导向
4. 修复源代码 - 而不是修改测试期望
5. 确保系统稳定 - 而不是局部优化

当测试过程中发现源代码错误时，应该立即修复源代码的功能实现或错误，
而不是绕过问题。测试应该模拟生产环境，通过修复源代码来使测试通过，
这才是测试的真正价值。
```

### **MPLP测试基准**
```markdown
RULE: 维护MPLP生产级测试标准
- 保持89.2%以上的测试覆盖率
- 确保所有367个测试持续通过（301功能+66核心）
- 新增功能必须包含相应测试
- 测试必须基于实际Schema和实现编写
- 功能场景覆盖率必须 > 90%
```

## 📋 **四层测试体系架构**

### **第1层：功能场景测试（新增核心层）**
```markdown
RULE: 基于真实用户需求的功能场景测试
- 目标：90%+功能场景覆盖率
- 方法：从用户角色和使用场景出发设计测试
- 文件：tests/functional/[module]-functional.test.ts
- 重点：发现源代码功能缺失和业务逻辑错误

功能场景类型：
□ 基本功能场景（用户最常见需求）
□ 高级功能场景（专业用户需求）
□ 异常处理场景（系统健壮性）
□ 边界条件场景（极端情况）
□ 集成场景（模块间协作）
□ 性能场景（生产环境需求）
```

### **第2层：跨模块功能测试 (新增核心层)**
```markdown
RULE: 基于真实用户需求的跨模块集成测试
- 目标：90%+跨模块功能场景覆盖率
- 方法：验证模块间协作的完整数据流转
- 文件：tests/cross-module/[workflow]-cross.test.ts
- 重点：发现跨模块集成问题和数据一致性问题

跨模块测试方法论 (Cross-Module Testing Methodology)：
□ 基于真实用户角色和使用场景设计测试
□ 使用实际服务层API，避免虚构接口
□ 动态Mock策略确保跨模块数据一致性
□ 验证完整的数据流转和业务逻辑
□ 发现并修复源代码问题而非绕过

标准测试模式：
- 设置动态Mock实现，确保数据一致性
- 创建第一个模块的数据并验证成功
- 基于第一个模块数据创建第二个模块数据
- 验证跨模块数据一致性和业务逻辑
- 验证服务层调用和Mock使用情况
```

### **第3层：单元测试**
```markdown
RULE: 完整的单元测试覆盖
- 目标：90%+代码覆盖率
- 方法：测试单个组件和函数
- 重点：验证实现细节和边界条件
```

### **第4层：集成测试**
```markdown
RULE: 真实的模块间协作测试
- 目标：验证模块间协作
- 方法：测试真实的模块交互
- 重点：验证完整的业务流程
```

### **第5层：端到端测试**
```markdown
RULE: 完整的用户场景测试
- 目标：验证完整业务流程
- 方法：测试真实的用户场景
- 重点：验证系统整体稳定性
```

### **Schema驱动开发原则**
```typescript
RULE: 基于实际Schema和实现的测试
- 测试必须基于实际的Schema定义编写
- 确认使用的TypeScript、Jest等版本和具体方法
- 基于实际实现来编写测试文件，确保接口一致性
- 避免脱离实际实现直接编写测试导致的不一致问题

// ✅ 正确示例 - 基于实际Schema
const contextSchema = require('../../../schemas/context-protocol.json');

describe('Context Schema Validation', () => {
  it('should validate against actual context schema', async () => {
    const validator = new SchemaValidator(contextSchema);
    const validData = TestDataFactory.createValidContextData();

    const result = await validator.validate(validData);
    expect(result.isValid).toBe(true);
  });
});
```

## 🔧 **链式源代码修复方法论**

### **第一步：问题影响分析**
```markdown
RULE: 发现问题后，立即分析影响范围

影响分析清单：
□ 直接影响：哪些模块直接受影响？
□ 间接影响：哪些模块可能间接受影响？
□ 系统性问题：是否存在相同的问题模式？
□ 类型定义影响：是否需要更新类型定义？
□ API接口影响：是否需要更新接口定义？
□ 测试影响：哪些测试需要相应调整？
```

### **第二步：系统性修复**
```markdown
RULE: 修复源代码问题，而不是绕过问题

修复原则：
□ 修复根本原因，而不是症状
□ 保持向后兼容性
□ 确保类型安全
□ 遵循现有架构模式
□ 添加必要的验证逻辑
□ 完善错误处理机制
```

### **第三步：链式验证**
```markdown
RULE: 修复后必须进行完整的链式验证

验证步骤：
1. TypeScript编译验证 - 确保零编译错误
2. 单元测试验证 - 确保现有功能不受影响
3. 功能场景测试验证 - 确保修复有效
4. 集成测试验证 - 确保模块间协作正常
5. 端到端测试验证 - 确保系统整体稳定
```

## 🧪 测试实施标准

### 功能场景测试标准
```typescript
RULE: 基于用户场景的功能测试
- 覆盖率必须 > 90%
- 基于真实用户角色和使用场景
- 验证用户期望的结果
- 发现源代码功能缺失和逻辑错误

// ✅ 正确的功能场景测试示例
describe('Dialog模块功能场景测试 - 基于真实用户需求', () => {
  describe('1. 对话创建场景 - 对话管理员日常使用', () => {
    it('应该让管理员能够创建一个基本的文本对话', async () => {
      // 用户场景：对话管理员创建一个团队讨论对话
      const createRequest: CreateDialogRequest = {
        session_id: sessionId,
        context_id: contextId,
        name: '团队项目讨论',
        description: '关于新项目的团队讨论对话',
        // ... 基于实际需求的完整数据
      };

      const result = await dialogService.createDialog(createRequest);

      expect(result.success).toBe(true);
      expect(result.data?.name).toBe('团队项目讨论');
      expect(result.data?.participants).toHaveLength(2);
    });
  });
});
```

### 单元测试标准
```typescript
RULE: 高质量单元测试
- 覆盖率必须 > 90%
- 测试所有公共方法和边界条件
- 使用真实的测试数据，避免mock过度
- 每个测试用例独立且可重复

// ✅ 正确的单元测试示例
describe('ContextManager', () => {
  let manager: ContextManager;
  
  beforeEach(() => {
    manager = new ContextManager(mockConfig);
  });
  
  it('should create context with valid data', async () => {
    const validRequest = TestDataFactory.createValidContextRequest();
    const result = await manager.createContext(validRequest);
    
    expect(result.success).toBe(true);
    expect(result.data).toMatchSchema(contextSchema);
  });
  
  it('should reject invalid context data', async () => {
    const invalidRequest = { /* missing required fields */ };
    
    await expect(manager.createContext(invalidRequest))
      .rejects.toThrow('Invalid context data');
  });
});
```

### 集成测试标准
```typescript
RULE: 真实的集成测试
- 测试真实的模块间交互
- 使用真实的数据库和外部服务（测试环境）
- 验证完整的业务流程
- 测试错误处理和恢复机制

// ✅ 正确的集成测试示例
describe('MPLP Workflow Integration', () => {
  it('should complete full context-plan-confirm workflow', async () => {
    // 1. 创建上下文
    const context = await contextManager.createContext(contextRequest);
    expect(context.success).toBe(true);
    
    // 2. 创建计划
    const plan = await planManager.createPlan({
      contextId: context.data.id,
      ...planRequest
    });
    expect(plan.success).toBe(true);
    
    // 3. 确认执行
    const confirmation = await confirmManager.confirm({
      planId: plan.data.id,
      ...confirmRequest
    });
    expect(confirmation.success).toBe(true);
  });
});
```

### 端到端测试标准
```typescript
RULE: 完整的端到端测试
- 测试完整的用户场景
- 使用真实的API端点
- 验证性能和并发要求
- 测试跨系统集成

// ✅ 正确的E2E测试示例
describe('MPLP E2E Workflow', () => {
  it('should handle complete multi-agent collaboration', async () => {
    const startTime = Date.now();
    
    // 完整的业务流程测试
    const result = await executeCompleteWorkflow({
      agents: 3,
      tasks: 5,
      timeout: 30000
    });
    
    const duration = Date.now() - startTime;
    
    expect(result.success).toBe(true);
    expect(result.completedTasks).toBe(5);
    expect(duration).toBeLessThan(30000); // 性能要求
  });
});
```

## 📊 测试数据管理

### 测试数据工厂
```typescript
RULE: 标准化的测试数据创建
export class TestDataFactory {
  static createValidContextRequest(overrides?: Partial<ContextRequest>): ContextRequest {
    return {
      sessionId: 'test-session-' + Date.now(),
      agentId: 'test-agent-001',
      configuration: this.createValidConfiguration(),
      metadata: {
        source: 'test',
        timestamp: new Date().toISOString()
      },
      ...overrides
    };
  }
  
  static createValidConfiguration(): ContextConfiguration {
    return {
      maxAgents: 5,
      timeout: 30000,
      retryPolicy: {
        maxRetries: 3,
        backoffMs: 1000
      }
    };
  }
}
```

### 测试环境管理
```markdown
RULE: 隔离的测试环境
- 每个测试套件使用独立的数据库
- 测试后自动清理所有测试数据
- 使用确定性的测试数据（固定时间戳等）
- 避免测试间的数据污染
```

## 🔍 测试质量保证

### 测试覆盖率要求
```bash
RULE: 严格的覆盖率标准
# 必须达到的覆盖率指标
- 语句覆盖率: > 90%
- 分支覆盖率: > 90%
- 函数覆盖率: > 95%
- 行覆盖率: > 90%

# 运行覆盖率检查
npm run test:coverage
```

### 测试性能要求
```markdown
RULE: 测试执行性能标准
- 单元测试: 每个测试 < 100ms
- 集成测试: 每个测试 < 5s
- 端到端测试: 每个测试 < 30s
- 完整测试套件: < 10分钟
```

## 🎯 **实战案例：MPLP项目成功验证**

### **发现并修复的关键问题**
```markdown
通过功能场景测试发现的重要源代码问题：

1. Dialog模块 - updateDialog方法缺少状态更新逻辑
2. Dialog模块 - UpdateDialogRequest类型定义缺失status字段
3. Network模块 - updateNetwork方法缺少状态更新逻辑
4. Network模块 - UpdateNetworkRequest类型定义缺失status字段
5. Collab/Dialog/Network模块 - updateBasicInfo逻辑错误（系统性问题）
6. Extension模块 - 缺少getExtensions和deleteExtension方法
7. Role模块 - 缺少删除系统角色的安全检查
8. 多个模块 - API接口参数格式不匹配

总计：12个重要源代码问题全部修复
```

### **验证成果**
```markdown
MPLP项目应用本方法论的成果：
□ 9个协议模块功能场景测试完成
□ 301个功能场景测试用例全部通过
□ 353个单元测试全部通过
□ 12个重要源代码问题修复
□ 4个链式更新完成
□ TypeScript编译零错误
□ 系统达到生产级质量标准
```

## 🚫 测试反模式

### 禁止的测试做法
```markdown
❌ 绝对禁止:
- 修改测试期望来适应错误的实现
- 跳过失败的测试用例
- 使用过度的mock导致测试失去意义
- 测试实现细节而不是行为
- 编写不稳定的测试（flaky tests）
- 测试间存在依赖关系
- 硬编码测试数据导致维护困难
- 为了提高通过率而降低测试标准
- 忽略源代码问题，只关注测试通过
```

### 正确的测试修复方法
```markdown
✅ 当测试失败时:
1. 分析失败原因 - 是代码问题还是测试问题
2. 如果是代码问题 - 修复源代码
3. 如果是测试问题 - 修复测试逻辑
4. 确保修复后测试稳定可靠
5. 验证修复没有引入新问题
6. 执行完整的链式验证
7. 记录问题和解决方案
```

## 🛠️ **工具使用规范**

### **信息收集工具**
```bash
# 必需工具使用
codebase-retrieval "[模块名]模块的完整实现分析"
git-commit-retrieval "[模块名]相关的历史变更"
view src/modules/[module]/application/services/[service].service.ts
diagnostics [file-paths]
```

### **测试执行命令**
```bash
# 运行功能场景测试
npm test -- --testPathPattern="functional.*test.ts" --verbose

# 运行特定模块测试
npm test -- --testPathPattern="[module]-functional.test.ts" --verbose

# TypeScript编译检查
npm run typecheck

# 完整质量检查
npm run lint && npm run typecheck && npm test
```

## 📊 **质量保证机制**

### **质量门禁标准**
```markdown
必须达到的标准：
□ 功能场景覆盖率 > 90%
□ 测试用例通过率 = 100%
□ TypeScript编译错误 = 0
□ 源代码问题修复率 = 100%
□ 链式验证全部通过
□ 系统稳定性验证通过
```

### **持续改进机制**
```markdown
改进流程：
□ 每个模块测试完成后总结经验
□ 记录发现的问题模式
□ 更新测试方法论
□ 分享最佳实践
□ 建立问题预防机制
```

---

**测试承诺**: 这些测试策略基于MPLP项目的成功实践，确保项目具备企业级的质量保证能力，支持可靠的软件交付。

**验证状态**: ✅ 已在9个协议模块中成功验证，654个测试用例全部通过，12个源代码问题修复

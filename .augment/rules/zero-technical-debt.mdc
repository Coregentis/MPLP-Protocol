---
type: "always_apply"
description: "Zero Technical Debt Policy for MPLP v1.0 - Absolute Type Safety Requirements"
priority: "critical"
---

# Zero Technical Debt Policy - MPLP v1.0

## 🚨 **CRITICAL: 零技术债务政策**

**MPLP v1.0是生产级L4智能体操作系统**，必须保持**绝对的代码质量**。任何技术债务都是**不可接受的**，必须立即修复。

## 🚫 **绝对禁止的代码模式**

### **1. any类型 - 零容忍政策**
```typescript
❌ ABSOLUTELY PROHIBITED - 立即修复:
- any类型的任何使用
- Record<string, any>
- Function类型（必须使用具体函数签名）
- object类型（必须使用具体接口）
- {}类型（必须使用具体接口）

// ❌ 绝对禁止
function processData(data: any): any {
  return data.someProperty;
}

// ✅ 必须这样写
interface ProcessDataInput {
  someProperty: string;
  otherProperty: number;
}

interface ProcessDataOutput {
  result: string;
  status: 'success' | 'error';
}

function processData(data: ProcessDataInput): ProcessDataOutput {
  return {
    result: data.someProperty,
    status: 'success'
  };
}
```

### **2. TypeScript错误 - 零容忍政策**
```bash
❌ ABSOLUTELY PROHIBITED - 立即修复:
- TypeScript编译错误 (必须0错误)
- ESLint错误 (必须0错误)
- ESLint警告 (必须0警告)
- @ts-ignore或@ts-expect-error (除非有明确注释)
- 注释掉的TypeScript错误
- 类型断言绕过检查 (as any)
```

## ✅ **强制性开发工作流**

### **1. 提交前检查 (MANDATORY)**
```bash
# 每次提交前必须执行并通过
npm run typecheck  # 必须返回0错误
npm run lint       # 必须返回0错误和警告
npm run test       # 必须所有测试通过

# 如果任何一个失败，禁止提交
```

### **2. 代码审查强制要求**
```markdown
□ 检查是否使用了any类型 (发现即拒绝)
□ 检查TypeScript编译是否通过 (必须通过)
□ 检查ESLint是否通过 (必须通过)
□ 检查所有函数是否有明确类型 (必须有)
□ 检查接口定义是否完整 (必须完整)
□ 检查错误处理是否有正确类型 (必须有)
```

### **3. CI/CD管道强制检查**
```yaml
# 必须在CI/CD中强制执行
- name: Zero Technical Debt Check
  run: |
    npm run typecheck || exit 1
    npm run lint || exit 1
    npm run test || exit 1
  # 任何失败都停止部署
```

## 🔧 **技术债务修复策略**

### **1. any类型修复**
```typescript
// Step 1: 识别any类型使用
grep -r "any" src/ --include="*.ts"

// Step 2: 定义正确的接口
interface CorrectType {
  property1: string;
  property2: number;
  property3: boolean;
}

// Step 3: 创建类型守卫
function isCorrectType(obj: unknown): obj is CorrectType {
  return typeof obj === 'object' &&
         obj !== null &&
         'property1' in obj &&
         typeof (obj as any).property1 === 'string';
}

// Step 4: 替换any类型
function processData(data: unknown): ProcessResult {
  if (!isCorrectType(data)) {
    throw new Error('Invalid data format');
  }
  // 现在data是CorrectType类型
  return processValidData(data);
}
```

### **2. TypeScript错误修复**
```bash
# Step 1: 运行类型检查
npm run typecheck

# Step 2: 逐个修复错误
# 不允许使用@ts-ignore绕过

# Step 3: 验证修复
npm run typecheck  # 必须0错误
```

### **3. ESLint错误修复**
```bash
# Step 1: 运行ESLint检查
npm run lint

# Step 2: 自动修复可修复的问题
npm run lint:fix

# Step 3: 手动修复剩余问题
# 不允许禁用ESLint规则

# Step 4: 验证修复
npm run lint  # 必须0错误和警告
```

## 📊 **质量指标监控**

### **1. 实时监控指标**
```bash
# 每日检查
TypeScript错误数量: 0 (强制要求)
ESLint错误数量: 0 (强制要求)
ESLint警告数量: 0 (强制要求)
any类型使用次数: 0 (强制要求)
测试覆盖率: >90% (强制要求)
```

### **2. 质量门禁**
```markdown
□ TypeScript编译通过 (阻塞性)
□ ESLint检查通过 (阻塞性)
□ 所有测试通过 (阻塞性)
□ 代码覆盖率达标 (阻塞性)
□ 性能基准达标 (阻塞性)
```

## 🚨 **违规处理流程**

### **严重程度分级**
- **P0 - 立即修复**: 使用any类型
- **P0 - 立即修复**: TypeScript编译错误
- **P1 - 24小时内修复**: ESLint错误
- **P2 - 48小时内修复**: ESLint警告

### **处理流程**
1. **发现违规** → 立即阻止合并
2. **创建修复任务** → 分配给责任人
3. **修复验证** → 运行完整检查
4. **代码审查** → 确保修复质量
5. **合并代码** → 通过所有检查后

### **违规后果**
- **第一次违规**: 警告 + 强制修复
- **第二次违规**: 代码审查权限暂停
- **第三次违规**: 开发权限暂停

## 🎯 **成功标准**

### **项目级别**
- TypeScript编译: 0错误
- ESLint检查: 0错误, 0警告
- any类型使用: 0次
- 测试覆盖率: >90%
- 所有测试通过: 100%

### **模块级别**
- 每个模块必须独立通过所有检查
- 每个模块必须有完整的类型定义
- 每个模块必须有充分的测试覆盖

### **开发者级别**
- 每次提交必须通过所有检查
- 每个PR必须通过代码审查
- 每个功能必须有对应的测试

---

**ENFORCEMENT**: 这些零技术债务要求是**强制性的**和**不可协商的**。任何违反将导致代码被拒绝并要求立即修复。

**ZERO TOLERANCE**: 对any类型、TypeScript错误、ESLint错误采取零容忍政策。

**VERSION**: 1.0.0  
**EFFECTIVE**: August 5, 2025

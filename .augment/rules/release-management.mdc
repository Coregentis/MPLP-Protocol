---
type: "always_apply"
description: "Release management and version control standards for MPLP v1.0"
priority: "high"
category: "release"
---

# Release Management Rules

## 🎯 发布核心原则

### 1. 一次构建成功原则
```markdown
RULE: 构建脚本必须能够一次性成功构建发布版本
- 目标: 删除有问题的Release版本，不断改进构建流程直到一次成功
- 策略: 在构建时彻底解决所有路径和依赖问题
- 验证: 构建完成后必须通过100%的功能测试
- 标准: TypeScript编译零错误，所有测试通过

构建成功标准:
□ 一次性构建成功，无需手动修复
□ TypeScript编译零错误
□ 所有路径引用正确
□ 包大小在合理范围内
□ 与开发版本100%功能相同
```

### 2. 双仓库发布策略
```markdown
RULE: 开发版本和开源版本完全分离
- 开发仓库 (MPLP-Protocol-Dev): 包含完整开发环境和内部工具
- 开源仓库 (MPLP-Protocol): 仅包含开源发布内容
- 使用智能化构建脚本构建开源版本
- 确保开源版本的独立性和完整性

发布流程:
开发仓库 → 智能构建系统 → 路径修复 → 质量验证 → 开源版本 → npm发布 → GitHub Release
```

### 3. 语义化版本控制
```markdown
RULE: 严格遵循语义化版本规范 (SemVer)
版本格式: MAJOR.MINOR.PATCH
- MAJOR: 不兼容的API变更
- MINOR: 向后兼容的功能新增
- PATCH: 向后兼容的问题修复

预发布版本:
- alpha: 内部测试版本 (1.0.0-alpha.1)
- beta: 公开测试版本 (1.0.0-beta.1)
- rc: 发布候选版本 (1.0.0-rc.1)

标签格式: v1.0.0, v1.1.0-beta.1
```

### 4. 路径问题根本解决原则
```markdown
RULE: 在构建时彻底解决路径问题，而不是事后修补
- 问题根源: 开发版本与发布版本的目录结构差异导致TypeScript路径错误
- 解决策略: 建立完整的路径映射表和智能修复系统
- 验证标准: TypeScript编译必须零错误
- 实现方法: 使用智能路径解析系统自动修复所有导入路径

路径映射规范:
src/public/modules/core/**/* → src/core/**/*
src/public/shared/types/**/* → src/shared/types/**/*
src/public/utils/**/* → src/utils/**/*
src/modules/**/* → src/modules/**/* (保持不变)
src/schemas/**/* → src/schemas/**/* (保持不变)
```

## 🏗️ 智能构建流程

### 1. 智能化构建系统
```typescript
RULE: 使用智能化构建系统实现一次构建成功
使用 intelligent-release-builder.ts 脚本进行智能构建

构建阶段:
1. 项目结构智能分析 - 自动发现所有源文件
2. 预构建验证 - 检查TypeScript编译和测试状态
3. 智能文件复制 - 按照路径映射表复制文件
4. 路径智能修复 - 自动修复所有导入路径
5. 后构建验证 - 验证TypeScript编译和功能完整性
6. 包构建和发布 - 生成最终发布包
```

### 2. 质量门禁
```markdown
RULE: 严格的发布质量标准
发布前必须满足:
□ 所有单元测试通过 (覆盖率 > 89.2%)
□ 所有集成测试通过
□ 端到端测试全部通过
□ TypeScript编译零错误
□ 性能测试达到基准要求
□ 安全扫描无高危漏洞
□ 文档完整性检查通过
□ 开源版本构建和验证成功
□ 变更日志更新完整
□ 示例代码可正常运行
```

### 3. 发布验证流程
```markdown
RULE: 发布后必须进行完整验证
验证步骤:
1. 包安装测试 - npm install 测试包
2. 基本导入测试 - 验证主要模块可导入
3. 功能完整性测试 - 验证核心功能正常
4. 示例代码测试 - 验证README示例可运行
5. 性能基准测试 - 验证性能指标达标

验证环境:
- Node.js 18.x, 20.x, 22.x
- TypeScript 5.0+
- 不同操作系统 (Windows, macOS, Linux)
```

## 📋 发布检查清单

### 发布前检查
```markdown
□ 版本号更新正确
□ 变更日志完整
□ 所有测试通过
□ 文档更新同步
□ 示例代码验证
□ 安全扫描通过
□ 性能基准达标
□ 构建脚本验证
```

### 发布后验证
```markdown
□ npm包发布成功
□ GitHub Release创建
□ 文档网站更新
□ 示例项目更新
□ 社区通知发送
□ 监控指标正常
□ 用户反馈收集
□ 问题快速响应
```

## 🚨 应急响应

### 发布回滚策略
```markdown
RULE: 快速回滚机制
回滚触发条件:
- 严重功能缺陷
- 安全漏洞发现
- 性能严重下降
- 用户反馈重大问题

回滚步骤:
1. 立即停止新版本推广
2. 恢复到上一个稳定版本
3. 通知用户和社区
4. 分析问题根本原因
5. 修复后重新发布
```

### 热修复流程
```markdown
RULE: 紧急修复发布流程
适用场景: 严重安全漏洞、关键功能缺陷

快速流程:
1. 创建hotfix分支
2. 最小化修复
3. 快速测试验证
4. 紧急发布
5. 后续完整验证
```

---

**ENFORCEMENT**: 这些发布管理规则是**强制性的**，所有发布必须严格遵循。

**VERSION**: 1.0.0  
**EFFECTIVE**: August 2, 2025

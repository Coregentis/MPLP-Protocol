---
alwaysApply: true
---

# MPLP 项目开发预设指令

> **预设版本**: v5.0
> **更新时间**: 2025-08-11T18:00:00+08:00
> **适用项目**: Multi-Agent Protocol Lifecycle Platform (MPLP) v1.0
> **基于**: 经过系统性批判性分析后的精简规则集 + MPLP模块开发成功经验

## 🎯 AI 助手开发约束

你将基于精简后的 `.augment/rules/*.mdc` 项目规范开发 MPLP 协议项目。

### 📌 强制执行的开发约束：

#### 0. **基于实际Schema开发原则（最高优先级）** 
```
所有开发任务必须基于项目实际使用的Schema：
- 开发前必须先读取相关src/schemas/mplp-*.json文件
- Schema使用draft-07标准，文件名格式为mplp-*.json
- 所有字段名称、类型结构、枚举值必须100%匹配实际Schema定义
- 双重命名约定：Schema层(snake_case) ↔ TypeScript层(camelCase)
- 必须使用Mapper类进行转换（toSchema, fromSchema, validateSchema方法）
严禁参考过时的schema-standards.mdc，该文件已因与实际不符被删除
```

#### 1. **双重命名约定（严格执行）** 
```
严格遵循项目已验证的双重命名约定：
- Schema层：使用snake_case（context_id, created_at, protocol_version）
- TypeScript层：使用camelCase（contextId, createdAt, protocolVersion）  
- 映射函数：toSchema(), fromSchema(), validateSchema()必须实现
- 批量转换：toSchemaArray(), fromSchemaArray()必须实现
参考规则：.augment/rules/dual-naming-convention.mdc（已验证与实际匹配）
```

#### 2. **架构设计规则（严格执行）**
```
所有开发必须严格遵循架构设计原则：
- 厂商中立原则：核心功能不依赖特定厂商，通过标准接口实现集成
- 模块化设计：10个核心模块独立且协作，边界清晰
- MPLP生态系统集成：实现与其他MPLP模块的预留接口
- CoreOrchestrator协调：支持多种协调场景
- 预留接口模式：使用下划线前缀参数，等待CoreOrchestrator激活
- 性能约束：必须满足各模块性能指标要求
- 接口设计：通用接口命名必须中立，使用I前缀+PascalCase
- 错误处理：统一的错误处理机制和日志记录
- AI功能边界：L1-L3协议层只提供AI集成接口，不实现AI逻辑
- 协议定位：协议是"积木"，Agent是"建筑"，支持灵活组合
- 架构分层：严格遵循L1-L3协议层与L4 Agent层的职责分工
参考规则：.augment/rules/development-workflow-new.mdc
```

#### 3. **测试规范（严格执行）**
```
所有代码必须遵循严格的测试规范：
- 测试前检查：必须完成源代码分析、接口检查、Schema验证等8项强制检查
- 测试覆盖率：核心模块≥95%，其他模块≥90%
- 测试类型：单元测试、集成测试、性能测试全覆盖
- 测试数据：使用标准化的测试工厂方法创建符合Schema的数据
- 测试命名：遵循describe('{Feature}测试'), it('应该{预期行为}')格式
- 模拟对象：使用类型安全的模拟工厂函数，确保与接口完全匹配
- MPLP集成测试：验证模块预留接口和CoreOrchestrator协调场景
参考规则：.augment/rules/testing-strategy-new.mdc
```

#### 4. **规则引用机制（必须执行）**
```
每轮生成代码/文档前，必须先确认你当前引用的 `.mdc` 规则，并说明所遵循的部分：
- 引用规则文件：仅引用.augment/rules目录下现存的规则文件
- 遵循章节：明确指出具体章节
- 应用约束：说明具体约束要求
严禁引用已删除的规则文件，如schema-standards.mdc, dependency-management.mdc等
```

#### 5. **输出标准化（强制包含）**
```
输出必须同时包含：
✅ 修改文件名和路径
✅ 归属模块（context/plan/confirm/trace/role/extension/collab/dialog/network/core）
✅ 技术规范符合性检查
✅ 双重命名约定验证
✅ 性能指标验证（如适用）
✅ 测试覆盖率要求（≥90%单元测试）
✅ MPLP生态系统集成验证（预留接口、协调场景）
```

#### 6. **禁止行为（严格禁止）**
```
❌ 不允许引用已删除的规则文件（如schema-standards.mdc等）
❌ 不允许使用与实际Schema不符的文件名格式或版本
❌ 不允许忽略双重命名约定和映射函数要求
❌ 不允许跳过测试验证的8项强制检查
❌ 不允许使用 any 类型或绕过 TypeScript 严格模式
❌ 不允许在测试文件中出现编译错误或运行时错误
❌ 不允许创建不符合实际项目状态的文档或代码
❌ 不允许忽略MPLP生态系统集成要求
❌ 严禁在L1-L3协议层实现AI决策算法和学习逻辑
❌ 严禁在协议中包含机器学习模型和训练代码
❌ 严禁绑定特定的AI技术栈或算法实现
❌ 严禁混淆协议模块与单一Agent的概念
```

### 🔧 技术标准约束（基于实际项目状态）

#### **代码质量要求**
- TypeScript 5.0+ 严格模式，100% 类型覆盖
- ESLint + Prettier 检查必须通过（实际存在的检查：npm run lint, npm run typecheck）
- 单元测试覆盖率 ≥ 90%，集成测试 ≥ 80%

#### **性能标准要求**
- API 响应时间：P95 < 100ms, P99 < 200ms
- 协议解析性能：< 10ms
- 模块特定性能：根据模块复杂度设定合理目标
- MPLP集成性能：预留接口调用 <10ms，协调场景处理 <100ms

#### **实际项目验证脚本**
```bash
# 实际存在的验证脚本（基于package.json）
npm run typecheck        # TypeScript类型检查
npm run lint             # ESLint检查
npm run test             # 运行测试
npm run validate:schemas # Schema验证
```

### 📋 标准任务模板

#### **Plan 阶段模板**
```markdown
## 📋 Plan 阶段

**引用规则**: `.augment/rules/[现存规则].mdc` - [具体章节]
**任务模块**: [context/plan/confirm/trace/role/extension/collab/dialog/network/core]
**预期交付**: [具体功能描述和性能目标]
**Schema验证**: 已检查src/schemas/mplp-[module].json

### 技术方案
- 实现方式：[详细技术方案，包含双重命名约定]
- 性能目标：[具体性能指标]
- 依赖关系：[模块依赖和接口要求]
- Mapper设计：[toSchema/fromSchema映射策略]
- MPLP集成：[相关MPLP模块预留接口设计，CoreOrchestrator协调场景]
- 高级功能：[模块特定的高级功能设计]

### 风险评估
- 技术风险：[潜在技术挑战]
- 性能风险：[性能相关风险]
- 缓解措施：[风险应对方案]
```

#### **Confirm 阶段模板**
```markdown
## ✅ Confirm 阶段

**方案确认**: [确认技术方案可行性]
**规则符合性**: 符合 [具体现存.mdc文件] 中的 [具体要求]
**Schema匹配性**: 与src/schemas/mplp-[module].json完全一致
**双重命名验证**: snake_case ↔ camelCase映射关系确认
**MPLP集成验证**: 相关模块预留接口设计确认，CoreOrchestrator协调场景验证
**测试策略**: [单元/集成测试规划，包含8项强制检查和MPLP集成测试]
```

#### **Trace 阶段模板**
```markdown
## 📊 Trace 阶段

**实施进度**: 
- [时间戳]: [进度描述]
- [时间戳]: [进度描述]
- [时间戳]: [进度描述]

**性能指标**: 
- [操作名称]: [实测性能] (目标: [目标性能])
- [操作名称]: [实测性能] (目标: [目标性能])

**测试结果**: 
- 编译检查: [通过/失败] (TypeScript错误数: 0)
- 单元测试: [通过数]/[总数] (覆盖率: [覆盖率]%)
- 集成测试: [通过数]/[总数] (覆盖率: [覆盖率]%)
- Schema验证: [通过/失败]

**问题记录**:
- [问题1描述]: [解决方案]
- [问题2描述]: [解决方案]
```

#### **Delivery 阶段模板**
```markdown
## 🚀 Delivery 阶段

**交付清单**: 
- [x] 源代码完整提交
- [x] Mapper类实现完成（toSchema/fromSchema/validateSchema）
- [x] 所有测试通过，无编译错误
- [x] 覆盖率达标
- [x] 性能目标达成

**合规性验证**:
- [x] Schema验证通过（与实际mplp-*.json匹配）
- [x] 双重命名约定验证通过
- [x] 测试验证8项强制检查完成
- [x] 厂商中立验证通过

**发布准备**:
- 版本号: [版本号]
- 变更日志: [关键变更]
- 部署说明: [部署注意事项]
```

### 🎯 使用示例

#### **任务1：Context模块功能增强**
**用户请求**:
> 「请为Context模块添加新功能，严格遵循双重命名约定和Schema驱动开发。」

**AI 助手正确流程**:
1. **Plan**: 读取src/schemas/mplp-context.json，分析现有Schema结构
2. **Confirm**: 确认功能设计与实际Schema一致，使用snake_case
3. **Trace**: 实现功能，创建Mapper类，编写类型安全测试
4. **Delivery**: 验证无编译错误，覆盖率≥90%

#### **任务2：测试文件创建**
**用户请求**:
> 「请为[模块]创建测试文件，确保符合测试规范。」

**AI 助手正确流程**:
1. **Plan**: 完成8项强制检查（源代码分析、接口检查、Schema验证等）
2. **Confirm**: 确认测试策略包含所有必要场景
3. **Trace**: 创建测试文件，使用类型安全的模拟工厂函数
4. **Delivery**: 验证测试无编译错误，无运行时错误

### 🔄 人工触发语句示例

#### 1. **基于实际Schema开发触发**
> 「请严格基于src/schemas/mplp-[module].json的实际Schema，为[模块名]实现[功能名]功能。」

#### 2. **双重命名约定触发**
> 「请严格遵守双重命名约定（Schema用snake_case，TypeScript用camelCase），为[模块名]实现[功能名]。」

#### 3. **测试规范触发**
> 「请按照测试规范完成8项强制检查，为[模块名]的[功能名]编写完整测试，确保无编译错误。」

#### 4. **映射函数开发触发**
> 「请为[模块名]创建完整的Mapper类，实现toSchema、fromSchema、validateSchema等方法。」

#### 5. **完整开发流程触发**
> 「请为[模块名]实现[功能名]，严格遵循现存规则和实际项目状态，不引用已删除的规则文件。」

### 📚 现存有效规则文件（已清理验证）

#### **核心开发规则 (7个)**
- ✅ `.augment/rules/import-all.mdc` - MPLP v1.0核心开发规则整合
- ✅ `.augment/rules/development-workflow-new.mdc` - 开发工作流规则
- ✅ `.augment/rules/dual-naming-convention.mdc` - 双重命名约定（已验证匹配）
- ✅ `.augment/rules/module-standardization.mdc` - 模块标准化规则
- ✅ `.augment/rules/typescript-standards-new.mdc` - TypeScript开发标准
- ✅ `.augment/rules/testing-strategy-new.mdc` - 测试策略
- ✅ `.augment/rules/critical-thinking-methodology.mdc` - 系统性批判性思维方法论

#### **项目管理规则 (4个)**
- ✅ `.augment/rules/mplp-current-status.mdc` - 项目当前状态
- ✅ `.augment/rules/mplp-architecture-core-principles.mdc` - 核心架构原则
- ✅ `.augment/rules/circleci-workflow.mdc` - CI/CD工作流管理
- ✅ `.augment/rules/documentation-update-summary.mdc` - 文档更新总结

### ⚠️ 已删除的规则文件（禁止引用）

以下规则文件因与实际项目状态严重不符已被删除，**严禁引用**：
- ❌ `schema-standards.mdc` - Schema标准与实际完全不匹配
- ❌ `dependency-management.mdc` - 引用不存在的验证脚本
- ❌ `pre-commit-checks.mdc` - 检查脚本与实际不符
- ❌ `agent-role.mdc` - 过于具体的业务规则
- ❌ `protocol-implementation-boundary.mdc` - 过于抽象
- ❌ `workflow-protocol.mdc` - 超出基本开发规则范围
- ❌ `security-policy.mdc` - 项目管理文档
- ❌ `version-and-commit-standards.mdc` - 过于详细且不匹配实际
- ❌ `domain-glossary.mdc` - 参考文档
- ❌ `extension-protocol.mdc` - 已删除的规则文件

### ✅ 质量保证清单

开发完成后必须确认：
- [ ] 基于实际Schema文件（mplp-*.json, draft-07）进行开发
- [ ] 严格执行双重命名约定和Mapper实现
- [ ] 完成测试验证8项强制检查
- [ ] 确保测试文件无编译错误和运行时错误
- [ ] 仅引用.augment/rules目录下现存的有效规则文件
- [ ] 遵循厂商中立原则
- [ ] 达到性能和覆盖率要求

---

**预设指令版本**: v6.0
**维护团队**: MPLP项目团队
**更新时间**: 2025-08-13T15:00:00+08:00
**更新基础**: 基于系统性批判性分析和规则清理结果 + MPLP模块开发成功经验 + AI功能架构边界澄清
**有效性**: 与实际项目状态完全匹配
**架构一致性**: 已通过AI功能边界和协议-Agent关系验证
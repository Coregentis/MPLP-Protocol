#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

echo "🔍 MPLP项目提交前质量检查..."

# 设置严格模式
set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# 错误计数
ERROR_COUNT=0

# 检查函数
check_step() {
  local step_name="$1"
  local command="$2"

  echo -e "${YELLOW}检查: ${step_name}${NC}"

  if eval "$command"; then
    echo -e "${GREEN}✅ ${step_name} 通过${NC}"
  else
    echo -e "${RED}❌ ${step_name} 失败${NC}"
    ERROR_COUNT=$((ERROR_COUNT + 1))
  fi
  echo ""
}

# 1. TypeScript编译检查 (零容忍)
check_step "TypeScript编译" "npm run typecheck"

# 2. ESLint检查 (零容忍)
check_step "ESLint代码质量" "npm run lint"

# 检查文件命名规范
echo "🔍 检查文件命名规范..."
node -e "
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// 获取暂存区中的所有.ts和.js文件
let stagedFiles = [];
try {
  const output = execSync('git diff --cached --name-only --diff-filter=ACMR', { encoding: 'utf-8' }).trim();
  if (!output) {
    console.log('✅ 没有需要检查的文件');
    process.exit(0);
  }
  stagedFiles = output.split('\n').filter(f => f && (f.endsWith('.ts') || f.endsWith('.js')));
  if (stagedFiles.length === 0) {
    console.log('✅ 没有需要检查的TypeScript/JavaScript文件');
    process.exit(0);
  }
} catch (error) {
  console.log('✅ 没有需要检查的文件');
  process.exit(0);
}

// 检查文件是否符合命名规范
const CORE_MODULES = ['context', 'plan', 'confirm', 'trace', 'role', 'extension'];
let hasErrors = false;

for (const file of stagedFiles) {
  // 检查是否是模块内的文件
  for (const moduleName of CORE_MODULES) {
    const modulePattern = new RegExp(\`src/modules/${moduleName}/.*\\.ts$\`);
    if (modulePattern.test(file)) {
      const fileName = path.basename(file);
      
      // 排除index.ts和测试文件
      if (fileName === 'index.ts' || fileName.endsWith('.test.ts') || fileName.endsWith('.spec.ts')) {
        continue;
      }
      
      // 检查文件名是否符合 {module-name}-{component-type}.ts 格式
      const validPattern = new RegExp(\`^${moduleName}-[a-z-]+\\.ts$\`);
      if (!validPattern.test(fileName)) {
        console.error(\`❌ 文件命名不符合规范: \${file}\`);
        console.error(\`   应该使用格式: \${moduleName}-{component-type}.ts\`);
        hasErrors = true;
      }
    }
  }
}

if (hasErrors) {
  console.error('❌ 文件命名规范检查失败，请修正后重新提交');
  console.error('提示: 可以运行 \"npm run rename-files\" 自动修复命名问题');
  process.exit(1);
}

console.log('✅ 文件命名规范检查通过');
"

# 运行Schema验证 (如果存在)
if npm run | grep -q "schema:check"; then
  npm run schema:check
else
  echo "⚠️ Schema验证脚本不存在，跳过检查"
fi